{
  "uid" : "eebc918b30feba09",
  "name" : "test_fms_version_list",
  "fullName" : "test_connectivity.TestFMS#test_fms_version_list",
  "historyId" : "625b39bf0168621f7240138f6e718dbc",
  "time" : {
    "start" : 1637921056786,
    "stop" : 1637921068555,
    "duration" : 11769
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False not in [False]",
  "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7fbd13f52370>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fbd140fad60>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_ap_logs = None\n\n    @pytest.mark.get_firmware_list\n    def test_fms_version_list(self, fixtures_ver, get_configuration, get_ap_logs):\n        PASS = []\n        for ap in get_configuration['access_point']:\n            # get the latest branch\n            firmware_list = fixtures_ver.fw_client.get_firmwares(model=ap['model'],\n                                                                 branch=\"\",\n                                                                 commit_id='',\n                                                                 limit='10000',\n                                                                 offset='3000')\n            firmware_list.reverse()\n            release_list_data = []\n            for i in firmware_list:\n                release_list_data.append(str(i['release']))\n            allure.attach(name=\"firmware_list\", body=str(\"\\n\".join(release_list_data)),\n                          attachment_type=allure.attachment_type.JSON)\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                target_revision_branch = ap['version'].split(\"-\")[-3]\n                flag = True\n                for i in release_list_data:\n                    if target_revision_commit == i.split('-')[-1] and target_revision_branch == i.split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + i)\n                        allure.attach(name='target firmware : ' + ap['version'] + \" is available in FMS : \" + i,\n                                      body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n                break\n            except Exception as e:\n                pass\n    \n            if ap['version'].split('-')[1] == \"latest\":\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        version = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            break\n    \n                    if firmware['release'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                        break\n            else:\n                flag = True\n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        branch = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        commit = ap['version'].split('-')[1]\n                        if branch.__contains__('v2.') and commit == firmware['release'].split('-')[-1]:\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            PASS.append(True)\n                            flag = False\n                            break\n                    if ap['version'].split('-')[1] == firmware['release'].split('-')[-1] and ap['version'].split('-')[\n                        0] == \\\n                            firmware['release'].split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release'])\n                        allure.attach(\n                            name='target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release']\n                            , body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n>       assert False not in PASS\nE       assert False not in [False]\n\ntest_connectivity.py:135: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "get_apnos",
    "time" : {
      "start" : 1637921016314,
      "stop" : 1637921016314,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1637921016162,
      "stop" : 1637921016162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1637921016162,
      "stop" : 1637921016162,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1637921016161,
      "stop" : 1637921016161,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1637921016163,
      "stop" : 1637921016279,
      "duration" : 116
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs",
    "time" : {
      "start" : 1637921053806,
      "stop" : 1637921056786,
      "duration" : 2980
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False not in [False]",
    "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7fbd13f52370>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fbd140fad60>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_ap_logs = None\n\n    @pytest.mark.get_firmware_list\n    def test_fms_version_list(self, fixtures_ver, get_configuration, get_ap_logs):\n        PASS = []\n        for ap in get_configuration['access_point']:\n            # get the latest branch\n            firmware_list = fixtures_ver.fw_client.get_firmwares(model=ap['model'],\n                                                                 branch=\"\",\n                                                                 commit_id='',\n                                                                 limit='10000',\n                                                                 offset='3000')\n            firmware_list.reverse()\n            release_list_data = []\n            for i in firmware_list:\n                release_list_data.append(str(i['release']))\n            allure.attach(name=\"firmware_list\", body=str(\"\\n\".join(release_list_data)),\n                          attachment_type=allure.attachment_type.JSON)\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                target_revision_branch = ap['version'].split(\"-\")[-3]\n                flag = True\n                for i in release_list_data:\n                    if target_revision_commit == i.split('-')[-1] and target_revision_branch == i.split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + i)\n                        allure.attach(name='target firmware : ' + ap['version'] + \" is available in FMS : \" + i,\n                                      body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n                break\n            except Exception as e:\n                pass\n    \n            if ap['version'].split('-')[1] == \"latest\":\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        version = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            break\n    \n                    if firmware['release'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                        break\n            else:\n                flag = True\n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        branch = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        commit = ap['version'].split('-')[1]\n                        if branch.__contains__('v2.') and commit == firmware['release'].split('-')[-1]:\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            PASS.append(True)\n                            flag = False\n                            break\n                    if ap['version'].split('-')[1] == firmware['release'].split('-')[-1] and ap['version'].split('-')[\n                        0] == \\\n                            firmware['release'].split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release'])\n                        allure.attach(\n                            name='target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release']\n                            , body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n>       assert False not in PASS\nE       assert False not in [False]\n\ntest_connectivity.py:135: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4c4a03268192bccd",
      "name" : "firmwares/limit=10000&deviceType=&latestonly=offset=3000",
      "source" : "4c4a03268192bccd.json",
      "type" : "application/json",
      "size" : 1636315
    }, {
      "uid" : "28d8a742a78d9202",
      "name" : "firmware_list",
      "source" : "28d8a742a78d9202.json",
      "type" : "application/json",
      "size" : 108169
    }, {
      "uid" : "775c6b18a3cd13c9",
      "name" : "target firmware : v2.4.0-rc1 is not available in FMS : ",
      "source" : "775c6b18a3cd13c9.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1637927601369,
      "stop" : 1637927601369,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1637927601650,
      "stop" : 1637927601650,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1637927601690,
      "stop" : 1637927601690,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1637927601693,
      "stop" : 1637927601694,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1637927601455,
      "stop" : 1637927601455,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs::collect_logs",
    "time" : {
      "start" : 1637921069346,
      "stop" : 1637921083364,
      "duration" : 14018
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2eadbc3b7cc634b4",
      "name" : "logread",
      "source" : "2eadbc3b7cc634b4.attach",
      "type" : "text/plain",
      "size" : 136
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "uc_firmware"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "get_firmware_list"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestFMS"
  }, {
    "name" : "host",
    "value" : "testing-102-dnv57"
  }, {
    "name" : "thread",
    "value" : "376-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Firmware Management",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 4,
        "skipped" : 0,
        "passed" : 7,
        "unknown" : 0,
        "total" : 12
      },
      "items" : [ {
        "uid" : "939a89acbd27c4cd",
        "status" : "passed",
        "time" : {
          "start" : 1637874125044,
          "stop" : 1637874137272,
          "duration" : 12228
        }
      }, {
        "uid" : "5417a84796f2bff5",
        "status" : "passed",
        "time" : {
          "start" : 1637852900231,
          "stop" : 1637852910669,
          "duration" : 10438
        }
      }, {
        "uid" : "53c4052dd0c0b961",
        "status" : "passed",
        "time" : {
          "start" : 1637787173553,
          "stop" : 1637787185834,
          "duration" : 12281
        }
      }, {
        "uid" : "8b7028bcdaa5ba62",
        "status" : "passed",
        "time" : {
          "start" : 1637725698660,
          "stop" : 1637725709382,
          "duration" : 10722
        }
      }, {
        "uid" : "470e871065b9ff40",
        "status" : "broken",
        "statusDetails" : "NameError: Invalid response code.",
        "time" : {
          "start" : 1637701294076,
          "stop" : 1637701294094,
          "duration" : 18
        }
      }, {
        "uid" : "cef62a146ff09f18",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='fms-f5ca4964.cicd.lab.wlan.tip.build', port=16004): Max retries exceeded with url: /api/v1/firmwares/?limit=10000&deviceType=&latestonly=offset=3000 (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7fee4c76a640>: Failed to establish a new connection: [Errno -5] No address associated with hostname'))",
        "time" : {
          "start" : 1637614732102,
          "stop" : 1637614732146,
          "duration" : 44
        }
      }, {
        "uid" : "b6d87126bae35bad",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: HTTPSConnectionPool(host='fms-9a72d353.cicd.lab.wlan.tip.build', port=16004): Max retries exceeded with url: /api/v1/firmwares/?deviceSet=true (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f8931fa5f70>: Failed to establish a new connection: [Errno -5] No address associated with hostname'))",
        "time" : {
          "start" : 1637528274808,
          "stop" : 1637528274819,
          "duration" : 11
        }
      }, {
        "uid" : "fee37a72150ba2c",
        "status" : "passed",
        "time" : {
          "start" : 1637441911187,
          "stop" : 1637441922145,
          "duration" : 10958
        }
      }, {
        "uid" : "b5c213e58169ba78",
        "status" : "passed",
        "time" : {
          "start" : 1637356513558,
          "stop" : 1637356526117,
          "duration" : 12559
        }
      }, {
        "uid" : "2b2bda223d0d7f04",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))",
        "time" : {
          "start" : 1637270859346,
          "stop" : 1637270864363,
          "duration" : 5017
        }
      }, {
        "uid" : "b36848fdb9069500",
        "status" : "passed",
        "time" : {
          "start" : 1637233759235,
          "stop" : 1637233768528,
          "duration" : 9293
        }
      } ]
    },
    "tags" : [ "get_firmware_list", "test_resources", "sanity_55", "sanity", "uc_firmware", "uc_sanity" ]
  },
  "source" : "eebc918b30feba09.json",
  "parameterValues" : [ ]
}
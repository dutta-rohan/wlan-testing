{"name": "test_wpa_enterprise_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "UnboundLocalError: local variable 'output' referenced before assignment", "trace": "self = <apnos.apnos.APNOS object at 0x7fab9db644c0>\n\n    def get_ucentral_status(self):\n        try:\n>           client = self.ssh_cli_connect()\n\n../libs/apnos/apnos.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7fab9db644c0>\n\n    def ssh_cli_connect(self):\n        client = paramiko.SSHClient()\n        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        print(\"Connecting to jumphost: %s@%s:%s\" % (\n            self.username, self.ip, self.port))\n>       client.connect(self.ip, username=self.username, password=self.password,\n                       port=self.port, timeout=10, allow_agent=False, banner_timeout=200)\n\n../libs/apnos/apnos.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.client.SSHClient object at 0x7fab9db12580>\nhostname = '10.28.3.103', port = 22, username = 'lanforge'\npassword = 'pumpkin77', pkey = None, key_filename = None, timeout = 10\nallow_agent = False, look_for_keys = True, compress = False\nsock = <socket.socket fd=7, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('10.10.11.253', 51226), raddr=('10.28.3.103', 22)>\ngss_auth = False, gss_kex = False, gss_deleg_creds = True, gss_host = None\nbanner_timeout = 200, auth_timeout = None, gss_trust_dns = True\npassphrase = None, disabled_algorithms = None\n\n    def connect(\n        self,\n        hostname,\n        port=SSH_PORT,\n        username=None,\n        password=None,\n        pkey=None,\n        key_filename=None,\n        timeout=None,\n        allow_agent=True,\n        look_for_keys=True,\n        compress=False,\n        sock=None,\n        gss_auth=False,\n        gss_kex=False,\n        gss_deleg_creds=True,\n        gss_host=None,\n        banner_timeout=None,\n        auth_timeout=None,\n        gss_trust_dns=True,\n        passphrase=None,\n        disabled_algorithms=None,\n    ):\n        \"\"\"\n        Connect to an SSH server and authenticate to it.  The server's host key\n        is checked against the system host keys (see `load_system_host_keys`)\n        and any local host keys (`load_host_keys`).  If the server's hostname\n        is not found in either set of host keys, the missing host key policy\n        is used (see `set_missing_host_key_policy`).  The default policy is\n        to reject the key and raise an `.SSHException`.\n    \n        Authentication is attempted in the following order of priority:\n    \n            - The ``pkey`` or ``key_filename`` passed in (if any)\n    \n              - ``key_filename`` may contain OpenSSH public certificate paths\n                as well as regular private-key paths; when files ending in\n                ``-cert.pub`` are found, they are assumed to match a private\n                key, and both components will be loaded. (The private key\n                itself does *not* need to be listed in ``key_filename`` for\n                this to occur - *just* the certificate.)\n    \n            - Any key we can find through an SSH agent\n            - Any \"id_rsa\", \"id_dsa\" or \"id_ecdsa\" key discoverable in\n              ``~/.ssh/``\n    \n              - When OpenSSH-style public certificates exist that match an\n                existing such private key (so e.g. one has ``id_rsa`` and\n                ``id_rsa-cert.pub``) the certificate will be loaded alongside\n                the private key and used for authentication.\n    \n            - Plain username/password auth, if a password was given\n    \n        If a private key requires a password to unlock it, and a password is\n        passed in, that password will be used to attempt to unlock the key.\n    \n        :param str hostname: the server to connect to\n        :param int port: the server port to connect to\n        :param str username:\n            the username to authenticate as (defaults to the current local\n            username)\n        :param str password:\n            Used for password authentication; is also used for private key\n            decryption if ``passphrase`` is not given.\n        :param str passphrase:\n            Used for decrypting private keys.\n        :param .PKey pkey: an optional private key to use for authentication\n        :param str key_filename:\n            the filename, or list of filenames, of optional private key(s)\n            and/or certs to try for authentication\n        :param float timeout:\n            an optional timeout (in seconds) for the TCP connect\n        :param bool allow_agent:\n            set to False to disable connecting to the SSH agent\n        :param bool look_for_keys:\n            set to False to disable searching for discoverable private key\n            files in ``~/.ssh/``\n        :param bool compress: set to True to turn on compression\n        :param socket sock:\n            an open socket or socket-like object (such as a `.Channel`) to use\n            for communication to the target host\n        :param bool gss_auth:\n            ``True`` if you want to use GSS-API authentication\n        :param bool gss_kex:\n            Perform GSS-API Key Exchange and user authentication\n        :param bool gss_deleg_creds: Delegate GSS-API client credentials or not\n        :param str gss_host:\n            The targets name in the kerberos database. default: hostname\n        :param bool gss_trust_dns:\n            Indicates whether or not the DNS is trusted to securely\n            canonicalize the name of the host being connected to (default\n            ``True``).\n        :param float banner_timeout: an optional timeout (in seconds) to wait\n            for the SSH banner to be presented.\n        :param float auth_timeout: an optional timeout (in seconds) to wait for\n            an authentication response.\n        :param dict disabled_algorithms:\n            an optional dict passed directly to `.Transport` and its keyword\n            argument of the same name.\n    \n        :raises:\n            `.BadHostKeyException` -- if the server's host key could not be\n            verified\n        :raises: `.AuthenticationException` -- if authentication failed\n        :raises:\n            `.SSHException` -- if there was any other error connecting or\n            establishing an SSH session\n        :raises socket.error: if a socket error occurred while connecting\n    \n        .. versionchanged:: 1.15\n            Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,\n            ``gss_deleg_creds`` and ``gss_host`` arguments.\n        .. versionchanged:: 2.3\n            Added the ``gss_trust_dns`` argument.\n        .. versionchanged:: 2.4\n            Added the ``passphrase`` argument.\n        .. versionchanged:: 2.6\n            Added the ``disabled_algorithms`` argument.\n        \"\"\"\n        if not sock:\n            errors = {}\n            # Try multiple possible address families (e.g. IPv4 vs IPv6)\n            to_try = list(self._families_and_addresses(hostname, port))\n            for af, addr in to_try:\n                try:\n                    sock = socket.socket(af, socket.SOCK_STREAM)\n                    if timeout is not None:\n                        try:\n                            sock.settimeout(timeout)\n                        except:\n                            pass\n                    retry_on_signal(lambda: sock.connect(addr))\n                    # Break out of the loop on success\n                    break\n                except socket.error as e:\n                    # Raise anything that isn't a straight up connection error\n                    # (such as a resolution error)\n                    if e.errno not in (ECONNREFUSED, EHOSTUNREACH):\n                        raise\n                    # Capture anything else so we know how the run looks once\n                    # iteration is complete. Retain info about which attempt\n                    # this was.\n                    errors[addr] = e\n    \n            # Make sure we explode usefully if no address family attempts\n            # succeeded. We've no way of knowing which error is the \"right\"\n            # one, so we construct a hybrid exception containing all the real\n            # ones, of a subclass that client code should still be watching for\n            # (socket.error)\n            if len(errors) == len(to_try):\n                raise NoValidConnectionsError(errors)\n    \n        t = self._transport = Transport(\n            sock,\n            gss_kex=gss_kex,\n            gss_deleg_creds=gss_deleg_creds,\n            disabled_algorithms=disabled_algorithms,\n        )\n        t.use_compression(compress=compress)\n        t.set_gss_host(\n            # t.hostname may be None, but GSS-API requires a target name.\n            # Therefore use hostname as fallback.\n            gss_host=gss_host or hostname,\n            trust_dns=gss_trust_dns,\n            gssapi_requested=gss_auth or gss_kex,\n        )\n        if self._log_channel is not None:\n            t.set_log_channel(self._log_channel)\n        if banner_timeout is not None:\n            t.banner_timeout = banner_timeout\n        if auth_timeout is not None:\n            t.auth_timeout = auth_timeout\n    \n        if port == SSH_PORT:\n            server_hostkey_name = hostname\n        else:\n            server_hostkey_name = \"[{}]:{}\".format(hostname, port)\n        our_server_keys = None\n    \n        our_server_keys = self._system_host_keys.get(server_hostkey_name)\n        if our_server_keys is None:\n            our_server_keys = self._host_keys.get(server_hostkey_name)\n        if our_server_keys is not None:\n            keytype = our_server_keys.keys()[0]\n            sec_opts = t.get_security_options()\n            other_types = [x for x in sec_opts.key_types if x != keytype]\n            sec_opts.key_types = [keytype] + other_types\n    \n        t.start_client(timeout=timeout)\n    \n        # If GSS-API Key Exchange is performed we are not required to check the\n        # host key, because the host is authenticated via GSS-API / SSPI as\n        # well as our client.\n        if not self._transport.gss_kex_used:\n>           server_key = t.get_remote_server_key()\n\n/usr/local/lib/python3.8/site-packages/paramiko/client.py:412: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.Transport at 0x9db642b0 (cipher aes128-ctr, 128 bits) (connecting)>\n\n    def get_remote_server_key(self):\n        \"\"\"\n        Return the host key of the server (in client mode).\n    \n        .. note::\n            Previously this call returned a tuple of ``(key type, key\n            string)``. You can get the same effect by calling `.PKey.get_name`\n            for the key type, and ``str(key)`` for the key string.\n    \n        :raises: `.SSHException` -- if no session is currently active.\n    \n        :return: public key (`.PKey`) of the remote server\n        \"\"\"\n        if (not self.active) or (not self.initial_kex_done):\n>           raise SSHException(\"No existing session\")\nE           paramiko.ssh_exception.SSHException: No existing session\n\n/usr/local/lib/python3.8/site-packages/paramiko/transport.py:834: SSHException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup_profiles' for <Function test_wpa_enterprise_2g[setup_profiles0]>>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7fab9fdca7c0>\ntestbed = 'basic', get_equipment_ref = ['903cb39d6918']\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fab9fdcaf10>\nreset_scenario_lf = ''\ninstantiate_profile = <class 'controller.controller_2x.controller.UProfileUtility'>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7fab9fca6700>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1, 1.1.wiphy3'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver, reset_scenario_lf,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info):\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        # call this, if 1.x\n>       return_var = fixtures_ver.setup_profiles(request, param, setup_controller, testbed, get_equipment_ref,\n                                                 instantiate_profile,\n                                                 get_markers, create_lanforge_chamberview_dut, lf_tools,\n                                                 get_security_flags, get_configuration, radius_info, get_apnos,\n                                                 radius_accounting_info)\n\ne2e/basic/conftest.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_2x.py:515: in setup_profiles\n    connected, latest, active = ap_ssh.get_ucentral_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7fab9db644c0>\n\n    def get_ucentral_status(self):\n        try:\n            client = self.ssh_cli_connect()\n            cmd = \"ubus call ucentral status\"\n            if self.mode:\n                cmd = f\"cd ~/cicd-git/ && ./openwrt_ctl.py {self.owrt_args} -t {self.tty} --action \" \\\n                      f\"cmd --value \\\"{cmd}\\\" \"\n            stdin, stdout, stderr = client.exec_command(cmd)\n            output = stdout.read()\n            print(output)\n            if 'latest' not in str(output):\n                print(\"ubus call ucentral status: command has invalid output\", str(output))\n                connected, latest, active = \"Error\", \"Error1\", \"Error2\"\n                return connected, latest, active\n            else:\n                connected = False\n                if \"connected\" in output.decode('utf-8').splitlines()[2]:\n                    connected = True\n                # connected = output.decode('utf-8').splitlines()[2]\n                latest = output.decode('utf-8').splitlines()[3].split(\":\")[1].replace(\" \", \"\").replace(\",\", \"\")\n                active = output.decode('utf-8').splitlines()[4].split(\":\")[1].replace(\" \", \"\").replace(\",\", \"\")\n            client.close()\n        except Exception as e:\n>           if output.__contains__(b'\"connected\":'):\nE           UnboundLocalError: local variable 'output' referenced before assignment\n\n../libs/apnos/apnos.py:340: UnboundLocalError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100, 'security': 'wpa'}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100, 'security': 'wpa'}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100, 'security': 'wpa2'}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100, 'security': 'wpa2'}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100, 'security': 'wpa3'}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100, 'security': 'wpa3'}]}, 'rf': {}, 'radius': True}"}], "start": 1637701613754, "stop": 1637701613754, "uuid": "b1f19a1a-e94c-4548-84ec-3abf4ec2dfe1", "historyId": "981c17415bd122d85b669bfd808d9b76", "testCaseId": "c8c193f544cbcd92bafdc00d97821f09", "fullName": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteOne#test_wpa_enterprise_2g", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "wpa_enterprise"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "vlan"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "client_connectivity"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"}, {"name": "suite", "value": "test_enterprise_ttls"}, {"name": "subSuite", "value": "TestVLANModeEnterpriseTTLSSuiteOne"}, {"name": "host", "value": "testing-89-hxs2q"}, {"name": "thread", "value": "382-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"}]}
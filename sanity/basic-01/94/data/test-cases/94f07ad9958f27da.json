{
  "uid" : "94f07ad9958f27da",
  "name" : "test_wpa_wpa2_personal_ssid_5g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestbridgeModeConnectivitySuiteB#test_wpa_wpa2_personal_ssid_5g",
  "historyId" : "4b40e5c6da501370f752a33bd0dbd449",
  "time" : {
    "start" : 1627351444108,
    "stop" : 1627351444108,
    "duration" : 0
  },
  "description" : "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and bridge and general and wpa_wpa2_personal_mixed and fiveg\"\n        ",
  "descriptionHtml" : "<p>Client Connectivity open ssid 2.4G\npytest -m &quot;client_connectivity and bridge and general and wpa_wpa2_personal_mixed and fiveg&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: '3e:2c:99:f4:4e:79'",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa3_personal_ssid_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f5c05761a30>\ntestbed = 'basic-01', setup_vlan = 100, get_equipment_id = [2]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f5be02c5a60>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-01'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f5c0555d7f0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', 'mode': 'wifi5', ...}], 'cont...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = True\n                            creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        # ssid_names = []\n        # for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n        #     ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        # ssid_names.sort()\n        ssid_names = []\n        for i in lf_dut_data:\n            ssid_names.append(i[\"ssid_name\"])\n        ssid_names.sort()\n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n        ssid_info = ap_ssh.get_ssid_info()\n        ssid_data = []\n        print(ssid_info)\n        band_mapping = ap_ssh.get_bssid_band_mapping()\n        print(band_mapping)\n        idx_mapping = {}\n        for i in range(0, len(ssid_info)):\n            if ssid_info[i][1] == \"OPEN\":\n                ssid_info[i].append(\"\")\n            if ssid_info[i][1] == \"OPEN\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=OPEN\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n    \n            if ssid_info[i][1] == \"WPA\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n            if ssid_info[i][1] == \"WPA2\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA2\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n                idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\n            if ssid_info[i][1] == \"WPA3_PERSONAL\":\n                ssid = [\"ssid_idx=\" + str(i) + \" ssid=\" + ssid_info[i][3] + \" security=WPA3\" +\n                        \" password=\" + ssid_info[i][2] + \" bssid=\" + ssid_info[i][0]]\n>               idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n                                       ssid_info[i][0]]\nE               KeyError: '3e:2c:99:f4:4e:79'\n\ne2e/basic/conftest.py:597: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "lf_test",
    "time" : {
      "start" : 1627349834406,
      "stop" : 1627349834406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1627345776685,
      "stop" : 1627345776685,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "241b489056d898bc",
      "name" : "Testbed Selected: ",
      "source" : "241b489056d898bc.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1627345783536,
      "stop" : 1627345783536,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1627345778173,
      "stop" : 1627345778281,
      "duration" : 108
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a6030da995cbd653",
      "name" : "Controller Instantiated: ",
      "source" : "a6030da995cbd653.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1627345789187,
      "stop" : 1627345799347,
      "duration" : 10160
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1627345778464,
      "stop" : 1627345778464,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1627349834405,
      "stop" : 1627349834405,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1627345789183,
      "stop" : 1627345789183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1627345776685,
      "stop" : 1627345778172,
      "duration" : 1487
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "47fbfde4a235d99e",
      "name" : "added openwrtctl.py to :",
      "source" : "47fbfde4a235d99e.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "3bc63fd40ffd0284",
      "name" : "APNOS LIbrary: ",
      "source" : "3bc63fd40ffd0284.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "7836159ba755b94b",
      "name" : "openwrt_ctl Setup",
      "source" : "7836159ba755b94b.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1627351589439,
      "stop" : 1627351596342,
      "duration" : 6903
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9b4fd742a37d4161",
      "name" : "APNOS LIbrary: ",
      "source" : "9b4fd742a37d4161.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "39dadac74dae1c77",
      "name" : "openwrt_ctl Setup",
      "source" : "39dadac74dae1c77.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "70f68d4dc5f50a7d",
      "name" : "vif config Output Msg: ",
      "source" : "70f68d4dc5f50a7d.attach",
      "type" : "text/plain",
      "size" : 11142
    }, {
      "uid" : "e6316d5ed965af58",
      "name" : "vif config Err Msg: ",
      "source" : "e6316d5ed965af58.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "cd0f0180df8f6ba7",
      "name" : "get_vif_config_ssids ",
      "source" : "cd0f0180df8f6ba7.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "618174b2278634fe",
      "name" : "vif state Output Msg: ",
      "source" : "618174b2278634fe.attach",
      "type" : "text/plain",
      "size" : 12336
    }, {
      "uid" : "fdaaa64f30bf890c",
      "name" : "vif state Err Msg: ",
      "source" : "fdaaa64f30bf890c.attach",
      "type" : "text/plain",
      "size" : 108
    }, {
      "uid" : "b080dfef9a3d8d72",
      "name" : "get_vif_state_ssids ",
      "source" : "b080dfef9a3d8d72.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "a69f07ed5dabb1d9",
      "name" : "vif_state",
      "source" : "a69f07ed5dabb1d9.attach",
      "type" : "text/plain",
      "size" : 118
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1627345778464,
      "stop" : 1627345780998,
      "duration" : 2534
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1f90952124771557",
      "name" : "APNOS LIbrary: ",
      "source" : "1f90952124771557.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "ee208ed6a6190528",
      "name" : "openwrt_ctl Setup",
      "source" : "ee208ed6a6190528.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "ca193c531845e8b4",
      "name" : "get_active_firmware ",
      "source" : "ca193c531845e8b4.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1627345776685,
      "stop" : 1627345776685,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1627345802279,
      "stop" : 1627345802280,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "56909970e8f89036",
      "name" : "Radius server Info: ",
      "source" : "56909970e8f89036.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1627345778463,
      "stop" : 1627345778463,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1627345776684,
      "stop" : 1627345776685,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6af5804920354f52",
      "name" : "Testbed Selected : ",
      "source" : "6af5804920354f52.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1627345778281,
      "stop" : 1627345778282,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1627345799347,
      "stop" : 1627345802279,
      "duration" : 2932
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1627349834405,
      "stop" : 1627349834406,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1627345778463,
      "stop" : 1627345778463,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1627345789183,
      "stop" : 1627345789183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1627345778282,
      "stop" : 1627345778352,
      "duration" : 70
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1627345789183,
      "stop" : 1627345789183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a63f6c1520b244f9",
      "name" : "VLAN Created: ",
      "source" : "a63f6c1520b244f9.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1627345780999,
      "stop" : 1627345783535,
      "duration" : 2536
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c85f7dd8f6715617",
      "name" : "APNOS LIbrary: ",
      "source" : "c85f7dd8f6715617.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "4c11e3816e303ba",
      "name" : "openwrt_ctl Setup",
      "source" : "4c11e3816e303ba.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "24fc1942a977143a",
      "name" : "get_active_firmware ",
      "source" : "24fc1942a977143a.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1627345789184,
      "stop" : 1627345789186,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5640a0e04215666f",
      "name" : "Test Cases Requires: ",
      "source" : "5640a0e04215666f.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "station_names_fiveg",
    "time" : {
      "start" : 1627349992354,
      "stop" : 1627349992354,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1627345783535,
      "stop" : 1627345783535,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1627345778353,
      "stop" : 1627345778462,
      "duration" : 109
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1627351385869,
      "stop" : 1627351443523,
      "duration" : 57654
    },
    "status" : "broken",
    "statusMessage" : "KeyError: '3e:2c:99:f4:4e:79'\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 597, in setup_profiles\n    idx_mapping[str(i)] = [ssid_info[i][3], ssid_info[i][2], ssid_info[i][1], band_mapping[ssid_info[i][0]],\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3078cc7b9a96bfef",
      "name" : "RF Profile Created : wifi5",
      "source" : "3078cc7b9a96bfef.attach",
      "type" : "text/plain",
      "size" : 44
    }, {
      "uid" : "e3e37373eed4b1a0",
      "name" : "SSID Profile Created",
      "source" : "e3e37373eed4b1a0.attach",
      "type" : "text/plain",
      "size" : 2820
    }, {
      "uid" : "7facbb25702734f9",
      "name" : "SSID Profile Created",
      "source" : "7facbb25702734f9.attach",
      "type" : "text/plain",
      "size" : 2816
    }, {
      "uid" : "f4aecf3a921ec39b",
      "name" : "SSID Profile Created",
      "source" : "f4aecf3a921ec39b.attach",
      "type" : "text/plain",
      "size" : 2829
    }, {
      "uid" : "39864c74985fc5a5",
      "name" : "SSID Profile Created",
      "source" : "39864c74985fc5a5.attach",
      "type" : "text/plain",
      "size" : 2825
    }, {
      "uid" : "f39ab8fb87805ac8",
      "name" : "SSID Profile Created",
      "source" : "f39ab8fb87805ac8.attach",
      "type" : "text/plain",
      "size" : 2832
    }, {
      "uid" : "7eadfd9f9737f38f",
      "name" : "SSID Profile Created",
      "source" : "7eadfd9f9737f38f.attach",
      "type" : "text/plain",
      "size" : 2828
    }, {
      "uid" : "f328f7d389c97f16",
      "name" : "Equipment AP Profile Created",
      "source" : "f328f7d389c97f16.attach",
      "type" : "text/plain",
      "size" : 48
    }, {
      "uid" : "5c1acea938565812",
      "name" : "APNOS LIbrary: ",
      "source" : "5c1acea938565812.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "dce087773c242c6e",
      "name" : "openwrt_ctl Setup",
      "source" : "dce087773c242c6e.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "10359affc6e84d9",
      "name" : "vif config Output Msg: ",
      "source" : "10359affc6e84d9.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "a9a055e3f777ef21",
      "name" : "vif config Err Msg: ",
      "source" : "a9a055e3f777ef21.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a4c19ff654be0fc8",
      "name" : "get_vif_config_ssids ",
      "source" : "a4c19ff654be0fc8.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "2096ed3329b9f413",
      "name" : "vif config Output Msg: ",
      "source" : "2096ed3329b9f413.attach",
      "type" : "text/plain",
      "size" : 10209
    }, {
      "uid" : "818862fd9219f000",
      "name" : "vif config Err Msg: ",
      "source" : "818862fd9219f000.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "803e87862bb61c2e",
      "name" : "get_vif_config_ssids ",
      "source" : "803e87862bb61c2e.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e456e84a90c3eec",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "e456e84a90c3eec.attach",
      "type" : "text/plain",
      "size" : 290
    }, {
      "uid" : "96178d254cdaca8",
      "name" : "APNOS LIbrary: ",
      "source" : "96178d254cdaca8.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "d4adb417a9dccb73",
      "name" : "openwrt_ctl Setup",
      "source" : "d4adb417a9dccb73.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "cc567ca502cc3f57",
      "name" : "vif state Output Msg: ",
      "source" : "cc567ca502cc3f57.attach",
      "type" : "text/plain",
      "size" : 62
    }, {
      "uid" : "ef0da9013cde3276",
      "name" : "vif state Err Msg: ",
      "source" : "ef0da9013cde3276.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "e300f3481e6beb18",
      "name" : "get_vif_state_ssids ",
      "source" : "e300f3481e6beb18.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "5fc9a64fa9b457a9",
      "name" : "vif config Output Msg: ",
      "source" : "5fc9a64fa9b457a9.attach",
      "type" : "text/plain",
      "size" : 10209
    }, {
      "uid" : "57761381a3dabc64",
      "name" : "vif config Err Msg: ",
      "source" : "57761381a3dabc64.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "9bc51365c2080265",
      "name" : "get_vif_config_ssids ",
      "source" : "9bc51365c2080265.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e023ed86e8925c79",
      "name" : "vif state Output Msg: ",
      "source" : "e023ed86e8925c79.attach",
      "type" : "text/plain",
      "size" : 11479
    }, {
      "uid" : "28fc211498545881",
      "name" : "vif state Err Msg: ",
      "source" : "28fc211498545881.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a6770bf31b7fdeba",
      "name" : "get_vif_state_ssids ",
      "source" : "a6770bf31b7fdeba.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "e702451202428314",
      "name" : "vif config Output Msg: ",
      "source" : "e702451202428314.attach",
      "type" : "text/plain",
      "size" : 10209
    }, {
      "uid" : "54e35fca20724fd",
      "name" : "vif config Err Msg: ",
      "source" : "54e35fca20724fd.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "4567f980ab85f258",
      "name" : "get_vif_config_ssids ",
      "source" : "4567f980ab85f258.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "b3166603040b54d4",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "b3166603040b54d4.attach",
      "type" : "text/plain",
      "size" : 272
    }, {
      "uid" : "16c622876d74d83d",
      "name" : "AP LOgs: ",
      "source" : "16c622876d74d83d.attach",
      "type" : "text/plain",
      "size" : 69678
    }, {
      "uid" : "13b776e9580aaa84",
      "name" : "vif state Output Msg: ",
      "source" : "13b776e9580aaa84.attach",
      "type" : "text/plain",
      "size" : 12640
    }, {
      "uid" : "1a45c060f93c7c9b",
      "name" : "vif state Err Msg: ",
      "source" : "1a45c060f93c7c9b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "40ed56ebe84fdf65",
      "name" : "iwinfo Output Msg: ",
      "source" : "40ed56ebe84fdf65.attach",
      "type" : "text/plain",
      "size" : 1109
    }, {
      "uid" : "afa92b4fa6bab651",
      "name" : "iwinfo config Err Msg: ",
      "source" : "afa92b4fa6bab651.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 37,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  } ],
  "afterStages" : [ {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1627354783871,
      "stop" : 1627354783871,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1627354784115,
      "stop" : 1627354784115,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1627354783870,
      "stop" : 1627354783870,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1627354784000,
      "stop" : 1627354784000,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1627354784000,
      "stop" : 1627354784001,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "90d9faec0fc9bcee",
      "name" : "Controller Teardown: ",
      "source" : "90d9faec0fc9bcee.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1627354783829,
      "stop" : 1627354783829,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1627354783894,
      "stop" : 1627354783894,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1627354783875,
      "stop" : 1627354783875,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1627354783854,
      "stop" : 1627354783854,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1627354784010,
      "stop" : 1627354784010,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1627352035483,
      "stop" : 1627352035483,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1627354783884,
      "stop" : 1627354783884,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1627354784041,
      "stop" : 1627354784041,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1627354783804,
      "stop" : 1627354783804,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1627354783901,
      "stop" : 1627354783901,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1627354784158,
      "stop" : 1627354784158,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1627354783964,
      "stop" : 1627354783964,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1627354783874,
      "stop" : 1627354783874,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1627354783916,
      "stop" : 1627354783916,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1627354783861,
      "stop" : 1627354783861,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1627354783949,
      "stop" : 1627354783949,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1627354783868,
      "stop" : 1627354783868,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1627354783876,
      "stop" : 1627354783876,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1627354783838,
      "stop" : 1627354783838,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_fiveg::0",
    "time" : {
      "start" : 1627354783875,
      "stop" : 1627354783875,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1627354783869,
      "stop" : 1627354783869,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1627354783923,
      "stop" : 1627354783923,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "wpa wpa2 personal mixed 5 GHZ Band"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "BRIDGE MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "bridge"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "fiveg"
  }, {
    "name" : "tag",
    "value" : "wpa_wpa2_personal_mixed"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes"
  }, {
    "name" : "subSuite",
    "value" : "TestbridgeModeConnectivitySuiteB"
  }, {
    "name" : "host",
    "value" : "testing-94-lgb59"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 17,
        "unknown" : 0,
        "total" : 18
      },
      "items" : [ {
        "uid" : "fb62389cf5513538",
        "status" : "passed",
        "time" : {
          "start" : 1627265070098,
          "stop" : 1627265151846,
          "duration" : 81748
        }
      }, {
        "uid" : "89ee82a786961a2d",
        "status" : "passed",
        "time" : {
          "start" : 1627178665206,
          "stop" : 1627178745686,
          "duration" : 80480
        }
      }, {
        "uid" : "6134822a405dbd6b",
        "status" : "passed",
        "time" : {
          "start" : 1627092146161,
          "stop" : 1627092221614,
          "duration" : 75453
        }
      }, {
        "uid" : "bb4b79fbf22d4d5b",
        "status" : "passed",
        "time" : {
          "start" : 1627005641464,
          "stop" : 1627005721695,
          "duration" : 80231
        }
      }, {
        "uid" : "968fe331b8d0161c",
        "status" : "passed",
        "time" : {
          "start" : 1626920075792,
          "stop" : 1626920196526,
          "duration" : 120734
        }
      }, {
        "uid" : "a6ad2aa0fc7bc972",
        "status" : "passed",
        "time" : {
          "start" : 1626833007233,
          "stop" : 1626833086716,
          "duration" : 79483
        }
      }, {
        "uid" : "4eb9eae10968b9f",
        "status" : "passed",
        "time" : {
          "start" : 1626746705239,
          "stop" : 1626746782690,
          "duration" : 77451
        }
      }, {
        "uid" : "3f8947548b6e5d4a",
        "status" : "passed",
        "time" : {
          "start" : 1626660165478,
          "stop" : 1626660241515,
          "duration" : 76037
        }
      }, {
        "uid" : "c07ea5e9ad71777f",
        "status" : "passed",
        "time" : {
          "start" : 1626573827193,
          "stop" : 1626573903183,
          "duration" : 75990
        }
      }, {
        "uid" : "47247ed1e9ebff10",
        "status" : "passed",
        "time" : {
          "start" : 1626487760313,
          "stop" : 1626487836358,
          "duration" : 76045
        }
      }, {
        "uid" : "93fd4d66bff05778",
        "status" : "passed",
        "time" : {
          "start" : 1626401164376,
          "stop" : 1626401239973,
          "duration" : 75597
        }
      }, {
        "uid" : "721fa799db20f5b2",
        "status" : "passed",
        "time" : {
          "start" : 1626228684741,
          "stop" : 1626228764264,
          "duration" : 79523
        }
      }, {
        "uid" : "3503fb79671598e2",
        "status" : "passed",
        "time" : {
          "start" : 1625576060480,
          "stop" : 1625576136951,
          "duration" : 76471
        }
      }, {
        "uid" : "8c05db433a2e83cc",
        "status" : "passed",
        "time" : {
          "start" : 1625191912414,
          "stop" : 1625191987837,
          "duration" : 75423
        }
      }, {
        "uid" : "9695e0aa069f4659",
        "status" : "passed",
        "time" : {
          "start" : 1625018586460,
          "stop" : 1625018665284,
          "duration" : 78824
        }
      }, {
        "uid" : "421ac931979fa15",
        "status" : "passed",
        "time" : {
          "start" : 1624759418385,
          "stop" : 1624759494706,
          "duration" : 76321
        }
      }, {
        "uid" : "1e863e9f02985594",
        "status" : "passed",
        "time" : {
          "start" : 1624535054057,
          "stop" : 1624535136200,
          "duration" : 82143
        }
      } ]
    },
    "tags" : [ "@pytest.mark.usefixtures('setup_profiles')", "general", "suiteB", "sanity", "wpa_wpa2_personal_mixed", "client_connectivity", "bridge", "fiveg" ]
  },
  "source" : "94f07ad9958f27da.json",
  "parameterValues" : [ "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHz'], 'security_key': 'something', 'profile_name': 'basic-01-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}" ]
}
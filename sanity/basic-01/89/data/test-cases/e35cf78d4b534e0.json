{
  "uid" : "e35cf78d4b534e0",
  "name" : "test_wpa3_enterprise_2g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestvlanModeEnterpriseTTLSSuiteOne#test_wpa3_enterprise_2g",
  "historyId" : "ace834b63539294e84dd57484072e70f",
  "time" : {
    "start" : 1627094441540,
    "stop" : 1627094441540,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa_enterprise_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f23d1d21100>\ntestbed = 'basic-01', setup_vlan = 100, get_equipment_id = [2]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f23d0158430>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-01'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f23d1c9c0d0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', 'mode': 'wifi5', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n>       ssid_info = ap_ssh.get_ssid_info()\n\ne2e/basic/conftest.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f23d014f7f0>\n\n    def get_ssid_info(self):\n        stdout = self.get_vif_state()\n        ssid_info_list = []\n        info = []\n        for i in stdout.splitlines():\n            ssid = str(i).replace(\" \", \"\").split(\".\")\n            # print(ssid)\n            if ssid[0].split(\":\")[0] == \"b'mac\":\n                mac_info_list = ssid[0].split(\":\")\n                mac_info_list.pop(0)\n                info.append(\":\".join(mac_info_list).replace(\"'\", \"\"))\n            if ssid[0].split(\":\")[0] == \"b'security\":\n                security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n                print(ssid[0].split(\":\")[1])\n                if security != \"OPEN\":\n                    if security == \"WPA-PSK\":\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"1\"):\n                            info.append(\"WPA\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"2\"):\n                            info.append(\"WPA2\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"mixed\"):\n                            info.append(\"WPA | WPA2\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA-SAE\":\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"3\"):\n                            info.append(\"WPA3_PERSONAL\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"mixed\"):\n                            info.append(\"WPA3_PERSONAL\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA-EAP\":\n                        info.append(\"EAP-TTLS\")\n                        security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA3-EAP\":\n                        info.append(\"EAP-TTLS\")\n                        security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    else:\n>                       security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\nE                       IndexError: list index out of range\n\n../libs/apnos/apnos.py:177: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1627086562834,
      "stop" : 1627086562834,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1627086562833,
      "stop" : 1627086562833,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5d7958837f3854e6",
      "name" : "VLAN Created: ",
      "source" : "5d7958837f3854e6.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1627086551989,
      "stop" : 1627086551989,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1627086562834,
      "stop" : 1627086562839,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "390d2afe1ded76da",
      "name" : "Test Cases Requires: ",
      "source" : "390d2afe1ded76da.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1627086551525,
      "stop" : 1627086551525,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1627086557128,
      "stop" : 1627086557128,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1627086551989,
      "stop" : 1627086551989,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1627086549877,
      "stop" : 1627086549877,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bc8bf8957b46602e",
      "name" : "Testbed Selected: ",
      "source" : "bc8bf8957b46602e.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1627094382852,
      "stop" : 1627094441138,
      "duration" : 58286
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 573, in setup_profiles\n    ssid_info = ap_ssh.get_ssid_info()\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 177, in get_ssid_info\n    security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ac9838d1e0623927",
      "name" : "RF Profile Created : wifi5",
      "source" : "ac9838d1e0623927.attach",
      "type" : "text/plain",
      "size" : 42
    }, {
      "uid" : "f44dcb0efcd7e6a",
      "name" : "Radius Profile Created",
      "source" : "f44dcb0efcd7e6a.attach",
      "type" : "text/plain",
      "size" : 179
    }, {
      "uid" : "16fa038d67da93cf",
      "name" : "SSID Profile Created",
      "source" : "16fa038d67da93cf.attach",
      "type" : "text/plain",
      "size" : 2836
    }, {
      "uid" : "b9ce1f89e6b7fcb5",
      "name" : "SSID Profile Created",
      "source" : "b9ce1f89e6b7fcb5.attach",
      "type" : "text/plain",
      "size" : 2854
    }, {
      "uid" : "d8705d9013dc48e9",
      "name" : "SSID Profile Created",
      "source" : "d8705d9013dc48e9.attach",
      "type" : "text/plain",
      "size" : 2843
    }, {
      "uid" : "fdb8a88dd5f7f0b7",
      "name" : "SSID Profile Created",
      "source" : "fdb8a88dd5f7f0b7.attach",
      "type" : "text/plain",
      "size" : 2861
    }, {
      "uid" : "b3f5a47c7f62a4fe",
      "name" : "SSID Profile Created",
      "source" : "b3f5a47c7f62a4fe.attach",
      "type" : "text/plain",
      "size" : 2840
    }, {
      "uid" : "2f234b6c2f151ea0",
      "name" : "SSID Profile Created",
      "source" : "2f234b6c2f151ea0.attach",
      "type" : "text/plain",
      "size" : 2858
    }, {
      "uid" : "d6d5a8d483138c77",
      "name" : "Equipment AP Profile Created",
      "source" : "d6d5a8d483138c77.attach",
      "type" : "text/plain",
      "size" : 46
    }, {
      "uid" : "e129a6a94e37a735",
      "name" : "APNOS LIbrary: ",
      "source" : "e129a6a94e37a735.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "87bb3003bf7b20d1",
      "name" : "openwrt_ctl Setup",
      "source" : "87bb3003bf7b20d1.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "b1106150df34426",
      "name" : "vif config Output Msg: ",
      "source" : "b1106150df34426.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "9ba479a696083d6d",
      "name" : "vif config Err Msg: ",
      "source" : "9ba479a696083d6d.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a1eb07680013b14f",
      "name" : "get_vif_config_ssids ",
      "source" : "a1eb07680013b14f.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "b9ba90da7e154638",
      "name" : "vif config Output Msg: ",
      "source" : "b9ba90da7e154638.attach",
      "type" : "text/plain",
      "size" : 11154
    }, {
      "uid" : "a8e529fb3582ed86",
      "name" : "vif config Err Msg: ",
      "source" : "a8e529fb3582ed86.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a4c98f34753ed111",
      "name" : "get_vif_config_ssids ",
      "source" : "a4c98f34753ed111.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "fe0fd78804ec5e3e",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "fe0fd78804ec5e3e.attach",
      "type" : "text/plain",
      "size" : 278
    }, {
      "uid" : "157324bdc68a010d",
      "name" : "APNOS LIbrary: ",
      "source" : "157324bdc68a010d.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "e424e2679dfe8064",
      "name" : "openwrt_ctl Setup",
      "source" : "e424e2679dfe8064.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "62cfd9882bd43b8",
      "name" : "vif state Output Msg: ",
      "source" : "62cfd9882bd43b8.attach",
      "type" : "text/plain",
      "size" : 12424
    }, {
      "uid" : "406c507a63d4f49b",
      "name" : "vif state Err Msg: ",
      "source" : "406c507a63d4f49b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "70117d23e957afa3",
      "name" : "get_vif_state_ssids ",
      "source" : "70117d23e957afa3.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "c9dc3a721b371564",
      "name" : "vif config Output Msg: ",
      "source" : "c9dc3a721b371564.attach",
      "type" : "text/plain",
      "size" : 11154
    }, {
      "uid" : "f170780e31ab816c",
      "name" : "vif config Err Msg: ",
      "source" : "f170780e31ab816c.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "ba496dd60f84014e",
      "name" : "get_vif_config_ssids ",
      "source" : "ba496dd60f84014e.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "b24ee5788e7a9c0c",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "b24ee5788e7a9c0c.attach",
      "type" : "text/plain",
      "size" : 260
    }, {
      "uid" : "c4cb9c0ea34e8412",
      "name" : "AP LOgs: ",
      "source" : "c4cb9c0ea34e8412.attach",
      "type" : "text/plain",
      "size" : 70365
    }, {
      "uid" : "6f47ea36c641cd33",
      "name" : "vif state Output Msg: ",
      "source" : "6f47ea36c641cd33.attach",
      "type" : "text/plain",
      "size" : 13074
    }, {
      "uid" : "7e0147a6fa8e52b",
      "name" : "vif state Err Msg: ",
      "source" : "7e0147a6fa8e52b.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 30,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1627090138852,
      "stop" : 1627090138853,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1627086563202,
      "stop" : 1627086566135,
      "duration" : 2933
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1627090138853,
      "stop" : 1627090138853,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1627094500852,
      "stop" : 1627094505676,
      "duration" : 4824
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b6ef86fa8abe6375",
      "name" : "APNOS LIbrary: ",
      "source" : "b6ef86fa8abe6375.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "844d1e5d8e01f3b9",
      "name" : "openwrt_ctl Setup",
      "source" : "844d1e5d8e01f3b9.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "8a70ad0a1086d70b",
      "name" : "vif config Output Msg: ",
      "source" : "8a70ad0a1086d70b.attach",
      "type" : "text/plain",
      "size" : 7589
    }, {
      "uid" : "7315bb84387fc217",
      "name" : "vif config Err Msg: ",
      "source" : "7315bb84387fc217.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "47b776fd1317c956",
      "name" : "get_vif_config_ssids ",
      "source" : "47b776fd1317c956.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "c03049073d863649",
      "name" : "vif state Output Msg: ",
      "source" : "c03049073d863649.attach",
      "type" : "text/plain",
      "size" : 2291
    }, {
      "uid" : "36df93182dc92f90",
      "name" : "vif state Err Msg: ",
      "source" : "36df93182dc92f90.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "b031c75054c53bdb",
      "name" : "get_vif_state_ssids ",
      "source" : "b031c75054c53bdb.attach",
      "type" : "text/plain",
      "size" : 26
    }, {
      "uid" : "9c2faf386ef7392a",
      "name" : "vif_state",
      "source" : "9c2faf386ef7392a.attach",
      "type" : "text/plain",
      "size" : 26
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1627086551387,
      "stop" : 1627086551524,
      "duration" : 137
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7cff7009c648d150",
      "name" : "Controller Instantiated: ",
      "source" : "7cff7009c648d150.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1627086557128,
      "stop" : 1627086557128,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1627086549878,
      "stop" : 1627086551387,
      "duration" : 1509
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e3c1b05e6b061c66",
      "name" : "added openwrtctl.py to :",
      "source" : "e3c1b05e6b061c66.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "edbabcb3d647071e",
      "name" : "APNOS LIbrary: ",
      "source" : "edbabcb3d647071e.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "c5f92df4d5c89709",
      "name" : "openwrt_ctl Setup",
      "source" : "c5f92df4d5c89709.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1627086551990,
      "stop" : 1627086551990,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1627086551990,
      "stop" : 1627086554525,
      "duration" : 2535
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be2a37f1506ec33d",
      "name" : "APNOS LIbrary: ",
      "source" : "be2a37f1506ec33d.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "77c30c3c2e5a216f",
      "name" : "openwrt_ctl Setup",
      "source" : "77c30c3c2e5a216f.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "6d2581e1577502fb",
      "name" : "get_active_firmware ",
      "source" : "6d2581e1577502fb.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1627086562839,
      "stop" : 1627086563202,
      "duration" : 363
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1627086551525,
      "stop" : 1627086551672,
      "duration" : 147
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1627090138852,
      "stop" : 1627090138852,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "exit_on_fail",
    "time" : {
      "start" : 1627090138853,
      "stop" : 1627090138853,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1627086554525,
      "stop" : 1627086557128,
      "duration" : 2603
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d3c1fab71854bee7",
      "name" : "APNOS LIbrary: ",
      "source" : "d3c1fab71854bee7.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "d44650dcbb9ad371",
      "name" : "openwrt_ctl Setup",
      "source" : "d44650dcbb9ad371.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "af4489ca3ace2b93",
      "name" : "get_active_firmware ",
      "source" : "af4489ca3ace2b93.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1627086549877,
      "stop" : 1627086549877,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "724e6faefb1195e6",
      "name" : "Testbed Selected : ",
      "source" : "724e6faefb1195e6.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1627086562834,
      "stop" : 1627086562834,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1627086551672,
      "stop" : 1627086551989,
      "duration" : 317
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1627086549877,
      "stop" : 1627086549877,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1627086566135,
      "stop" : 1627086566135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "23f42ee0a35ff223",
      "name" : "Radius server Info: ",
      "source" : "23f42ee0a35ff223.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1627090138852,
      "stop" : 1627090138852,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1627094981931,
      "stop" : 1627094981931,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1627094981954,
      "stop" : 1627094981954,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1627094982006,
      "stop" : 1627094982006,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1627094981909,
      "stop" : 1627094981909,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1627094982055,
      "stop" : 1627094982055,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1627094981957,
      "stop" : 1627094981957,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1627094981992,
      "stop" : 1627094981992,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1627094982201,
      "stop" : 1627094982201,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1627094981963,
      "stop" : 1627094981963,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1627094981958,
      "stop" : 1627094981958,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1627094702589,
      "stop" : 1627094702589,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1627094982089,
      "stop" : 1627094982090,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1627094982090,
      "stop" : 1627094982090,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fb0423d49fe6bce6",
      "name" : "Controller Teardown: ",
      "source" : "fb0423d49fe6bce6.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1627094981955,
      "stop" : 1627094981955,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1627094982098,
      "stop" : 1627094982098,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1627094981985,
      "stop" : 1627094981985,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1627094981975,
      "stop" : 1627094981975,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1627094981899,
      "stop" : 1627094981899,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1627094982040,
      "stop" : 1627094982040,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1627094981963,
      "stop" : 1627094981964,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "exit_on_fail::0",
    "time" : {
      "start" : 1627094982264,
      "stop" : 1627094982264,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1627094981965,
      "stop" : 1627094981965,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1627094982248,
      "stop" : 1627094982248,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1627094981943,
      "stop" : 1627094981943,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1627094982014,
      "stop" : 1627094982014,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1627094982128,
      "stop" : 1627094982128,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1627094981870,
      "stop" : 1627094981870,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1627094982130,
      "stop" : 1627094982130,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "wpa3_enterprise"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "vlan"
  }, {
    "name" : "tag",
    "value" : "ttls"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "enterprise"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_enterprise_ttls"
  }, {
    "name" : "subSuite",
    "value" : "TestvlanModeEnterpriseTTLSSuiteOne"
  }, {
    "name" : "host",
    "value" : "testing-89-r7ptb"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}]}, 'rf': {}, 'radius': True}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 6,
        "broken" : 1,
        "skipped" : 1,
        "passed" : 7,
        "unknown" : 0,
        "total" : 15
      },
      "items" : [ {
        "uid" : "3653659c6e7bff09",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1627008754803,
          "stop" : 1627008947958,
          "duration" : 193155
        }
      }, {
        "uid" : "4db6f192747dd71c",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1626924088341,
          "stop" : 1626924283835,
          "duration" : 195494
        }
      }, {
        "uid" : "ddfc756f57290702",
        "status" : "passed",
        "time" : {
          "start" : 1626835631198,
          "stop" : 1626835698300,
          "duration" : 67102
        }
      }, {
        "uid" : "8d31e927ad85e301",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1626748987744,
          "stop" : 1626748987745,
          "duration" : 1
        }
      }, {
        "uid" : "fc10a97d4ea02ef",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1626663250783,
          "stop" : 1626663445659,
          "duration" : 194876
        }
      }, {
        "uid" : "bcbae26eb01fd0bb",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1626576564337,
          "stop" : 1626576758923,
          "duration" : 194586
        }
      }, {
        "uid" : "292a983d1a9f0ff0",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1626490599883,
          "stop" : 1626490792971,
          "duration" : 193088
        }
      }, {
        "uid" : "246871d8db02725f",
        "status" : "failed",
        "statusDetails" : "AssertionError: assert False",
        "time" : {
          "start" : 1626404242770,
          "stop" : 1626404436284,
          "duration" : 193514
        }
      }, {
        "uid" : "60313e16d9301df2",
        "status" : "passed",
        "time" : {
          "start" : 1626231360405,
          "stop" : 1626231427216,
          "duration" : 66811
        }
      }, {
        "uid" : "703e1a19ad4abf3b",
        "status" : "passed",
        "time" : {
          "start" : 1625578616936,
          "stop" : 1625578685131,
          "duration" : 68195
        }
      }, {
        "uid" : "1558d35f63fb3d08",
        "status" : "passed",
        "time" : {
          "start" : 1625194518897,
          "stop" : 1625194581235,
          "duration" : 62338
        }
      }, {
        "uid" : "8076942daadbf6c2",
        "status" : "passed",
        "time" : {
          "start" : 1625021202506,
          "stop" : 1625021269090,
          "duration" : 66584
        }
      }, {
        "uid" : "85a94120595fc96d",
        "status" : "passed",
        "time" : {
          "start" : 1624762036820,
          "stop" : 1624762100850,
          "duration" : 64030
        }
      }, {
        "uid" : "988975af809693",
        "status" : "passed",
        "time" : {
          "start" : 1624537659739,
          "stop" : 1624537727910,
          "duration" : 68171
        }
      } ]
    },
    "tags" : [ "wpa3_enterprise", "@pytest.mark.usefixtures('setup_profiles')", "ttls", "vlan", "enterprise", "sanity", "client_connectivity", "twog" ]
  },
  "source" : "e35cf78d4b534e0.json",
  "parameterValues" : [ "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}]}, 'rf': {}, 'radius': True}" ]
}
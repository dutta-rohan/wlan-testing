{"name": "test_wpa_enterprise_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range", "trace": "request = <SubRequest 'setup_profiles' for <Function test_wpa_enterprise_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f23d1d21100>\ntestbed = 'basic-01', setup_vlan = 100, get_equipment_id = [2]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f23d0158430>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-01'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f23d1c9c0d0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', 'mode': 'wifi5', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n>       ssid_info = ap_ssh.get_ssid_info()\n\ne2e/basic/conftest.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f23d014f7f0>\n\n    def get_ssid_info(self):\n        stdout = self.get_vif_state()\n        ssid_info_list = []\n        info = []\n        for i in stdout.splitlines():\n            ssid = str(i).replace(\" \", \"\").split(\".\")\n            # print(ssid)\n            if ssid[0].split(\":\")[0] == \"b'mac\":\n                mac_info_list = ssid[0].split(\":\")\n                mac_info_list.pop(0)\n                info.append(\":\".join(mac_info_list).replace(\"'\", \"\"))\n            if ssid[0].split(\":\")[0] == \"b'security\":\n                security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n                print(ssid[0].split(\":\")[1])\n                if security != \"OPEN\":\n                    if security == \"WPA-PSK\":\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"1\"):\n                            info.append(\"WPA\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"2\"):\n                            info.append(\"WPA2\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"mixed\"):\n                            info.append(\"WPA | WPA2\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA-SAE\":\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"3\"):\n                            info.append(\"WPA3_PERSONAL\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                        if ssid[0].split(\":\")[1].split(\",\")[6].__contains__(\"mixed\"):\n                            info.append(\"WPA3_PERSONAL\")\n                            security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA-EAP\":\n                        info.append(\"EAP-TTLS\")\n                        security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    if security == \"WPA3-EAP\":\n                        info.append(\"EAP-TTLS\")\n                        security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\n                    else:\n>                       security_key = ssid[0].split(\":\")[1].split(\",\")[4].replace('\"', \"\").replace(\"]\", \"\")\nE                       IndexError: list index out of range\n\n../libs/apnos/apnos.py:177: IndexError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa2_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-0-VLAN', 'mode': 'BRIDGE', 'vlan': 100}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'profile_name': 'basic-01-SSID-wpa3_enterprise-1-VLAN', 'mode': 'BRIDGE', 'vlan': 100}]}, 'rf': {}, 'radius': True}"}], "start": 1627094441382, "stop": 1627094441382, "uuid": "955050e2-1e73-486b-9dbc-5f1842e566b1", "historyId": "33b92b2d3e0e1983f154b533d5c98b35", "testCaseId": "931ffb727c0400fdf128af5b3f593462", "fullName": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestvlanModeEnterpriseTTLSSuiteOne#test_wpa_enterprise_5g", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "wpa_enterprise"}, {"name": "tag", "value": "vlan"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "fiveg"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"}, {"name": "suite", "value": "test_enterprise_ttls"}, {"name": "subSuite", "value": "TestvlanModeEnterpriseTTLSSuiteOne"}, {"name": "host", "value": "testing-89-r7ptb"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"}]}
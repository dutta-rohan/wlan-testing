{
  "uid" : "9467eed210bd2b77",
  "name" : "test_wpa3_enterprise_mixed_2g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_enterprise_ttls.TestNATModeEnterpriseTTLSSuiteTwo#test_wpa3_enterprise_mixed_2g",
  "historyId" : "69fa173fe1370965c8a274bda78f5721",
  "time" : {
    "start" : 1627696778103,
    "stop" : 1627696778103,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa_wpa2_enterprise_mixed_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f6069140700>\ntestbed = 'basic-01', setup_vlan = 100, get_equipment_id = [2]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f60683dc430>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-01'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f60690b6070>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP1', 'mode': 'wifi5', ...}], 'cont...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-01-Automation-Radius-Profile-NAT', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = True\n                            creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"open_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n    \n                            creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_personal_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa2_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                lf_dut_data.append(j)\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                lf_dut_data.append(j)\n                            for i in range(len(j[\"appliedRadios\"])):\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GU\", \"is5GHzU\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5GL\", \"is5GHzL\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"5G\", \"is5GHz\")\n                                j[\"appliedRadios\"][i] = j[\"appliedRadios\"][i].replace(\"2G\", \"is2dot4GHz\")\n                            creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = True\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = True\n                            allure.attach(body=str(creates_profile),\n                                          name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            if j[\"appliedRadios\"].__contains__(\"2G\"):\n                                test_cases[\"wwep_2g\"] = False\n                            if j[\"appliedRadios\"].__contains__(\"5G\"):\n                                test_cases[\"wep_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        # ssid_names = []\n        # for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n        #     ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        # ssid_names.sort()\n        ssid_names = []\n        for i in lf_dut_data:\n            ssid_names.append(i[\"ssid_name\"])\n        ssid_names.sort()\n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n        ssid_info = ap_ssh.get_ssid_info()\n        ssid_data = []\n        print(ssid_info)\n>       band_mapping = ap_ssh.get_bssid_band_mapping()\n\ne2e/basic/conftest.py:572: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f6068167160>\n\n    def get_bssid_band_mapping(self):\n        client = self.ssh_cli_connect()\n        cmd = 'iwinfo'\n        if self.mode:\n            cmd = f\"cd ~/cicd-git/ && ./openwrt_ctl.py {self.owrt_args} -t {self.tty} --action \" \\\n                  f\"cmd --value \\\"{cmd}\\\" \"\n        stdin, stdout, stderr = client.exec_command(cmd)\n        data = stdout.read()\n        client.close()\n        allure.attach(name=\"iwinfo Output Msg: \", body=str(data))\n        allure.attach(name=\"iwinfo config Err Msg: \", body=str(stderr))\n        data = str(data).replace(\" \", \"\").split(\"\\\\r\\\\n\")\n        band_info = []\n        for i in data:\n            tmp = []\n            if i.__contains__(\"AccessPoint\"):\n                bssid = i.replace(\"AccessPoint:\", \"\")\n                tmp.append(bssid.casefold())\n            elif i.__contains__(\"MasterChannel\"):\n                if i.split(\":\")[2].__contains__(\"2.4\"):\n                    tmp.append(\"2G\")\n                else:\n                    tmp.append(\"5G\")\n            else:\n                tmp = []\n            if tmp != []:\n                band_info.append(tmp)\n        bssi_band_mapping = {}\n        for i in range(len(band_info)):\n            if (i % 2) == 0:\n>               bssi_band_mapping[band_info[i][0]] = band_info[i+1][0]\nE               IndexError: list index out of range\n\n../libs/apnos/apnos.py:114: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1627696718312,
      "stop" : 1627696778032,
      "duration" : 59720
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 572, in setup_profiles\n    band_mapping = ap_ssh.get_bssid_band_mapping()\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 114, in get_bssid_band_mapping\n    bssi_band_mapping[band_info[i][0]] = band_info[i+1][0]\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9932acc2ea99d08c",
      "name" : "RF Profile Created : wifi5",
      "source" : "9932acc2ea99d08c.attach",
      "type" : "text/plain",
      "size" : 41
    }, {
      "uid" : "2555cb0b9413ff44",
      "name" : "Radius Profile Created",
      "source" : "2555cb0b9413ff44.attach",
      "type" : "text/plain",
      "size" : 176
    }, {
      "uid" : "6e27c47649b3eae7",
      "name" : "SSID Profile Created",
      "source" : "6e27c47649b3eae7.attach",
      "type" : "text/plain",
      "size" : 2847
    }, {
      "uid" : "1fcee1484dd4c5c2",
      "name" : "SSID Profile Created",
      "source" : "1fcee1484dd4c5c2.attach",
      "type" : "text/plain",
      "size" : 2843
    }, {
      "uid" : "92bf0608267bc46a",
      "name" : "SSID Profile Created",
      "source" : "92bf0608267bc46a.attach",
      "type" : "text/plain",
      "size" : 2847
    }, {
      "uid" : "ceb8e606bc4f61de",
      "name" : "SSID Profile Created",
      "source" : "ceb8e606bc4f61de.attach",
      "type" : "text/plain",
      "size" : 2843
    }, {
      "uid" : "d7a835d96f6d6cdf",
      "name" : "Equipment AP Profile Created",
      "source" : "d7a835d96f6d6cdf.attach",
      "type" : "text/plain",
      "size" : 45
    }, {
      "uid" : "bd8668d731dc85d8",
      "name" : "APNOS LIbrary: ",
      "source" : "bd8668d731dc85d8.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "a38827a62d4f27e1",
      "name" : "openwrt_ctl Setup",
      "source" : "a38827a62d4f27e1.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "8fc1fd20fdf37ea2",
      "name" : "vif config Output Msg: ",
      "source" : "8fc1fd20fdf37ea2.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "34a53deaf695ccfc",
      "name" : "vif config Err Msg: ",
      "source" : "34a53deaf695ccfc.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "6f46a33719ca1a79",
      "name" : "get_vif_config_ssids ",
      "source" : "6f46a33719ca1a79.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "293307b4f4e82f24",
      "name" : "vif config Output Msg: ",
      "source" : "293307b4f4e82f24.attach",
      "type" : "text/plain",
      "size" : 7581
    }, {
      "uid" : "e502655c7606a581",
      "name" : "vif config Err Msg: ",
      "source" : "e502655c7606a581.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "8aecd8d62662bab9",
      "name" : "get_vif_config_ssids ",
      "source" : "8aecd8d62662bab9.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "b9753ef8ddb9b7e",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "b9753ef8ddb9b7e.attach",
      "type" : "text/plain",
      "size" : 242
    }, {
      "uid" : "7c2747ad40bfd1c9",
      "name" : "APNOS LIbrary: ",
      "source" : "7c2747ad40bfd1c9.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "174e76014ee17423",
      "name" : "openwrt_ctl Setup",
      "source" : "174e76014ee17423.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "1e2563031d886afb",
      "name" : "vif state Output Msg: ",
      "source" : "1e2563031d886afb.attach",
      "type" : "text/plain",
      "size" : 6349
    }, {
      "uid" : "e20ac823d6487e16",
      "name" : "vif state Err Msg: ",
      "source" : "e20ac823d6487e16.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "c8710aae3940bf16",
      "name" : "get_vif_state_ssids ",
      "source" : "c8710aae3940bf16.attach",
      "type" : "text/plain",
      "size" : 74
    }, {
      "uid" : "40174596fd7db3a2",
      "name" : "vif config Output Msg: ",
      "source" : "40174596fd7db3a2.attach",
      "type" : "text/plain",
      "size" : 7581
    }, {
      "uid" : "993a2388baece73c",
      "name" : "vif config Err Msg: ",
      "source" : "993a2388baece73c.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "109248683ca9eca9",
      "name" : "get_vif_config_ssids ",
      "source" : "109248683ca9eca9.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "199aaed2fb743e19",
      "name" : "vif state Output Msg: ",
      "source" : "199aaed2fb743e19.attach",
      "type" : "text/plain",
      "size" : 8326
    }, {
      "uid" : "753fa99cf9024290",
      "name" : "vif state Err Msg: ",
      "source" : "753fa99cf9024290.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "4c06275037596804",
      "name" : "get_vif_state_ssids ",
      "source" : "4c06275037596804.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "2d903e9cd91327e0",
      "name" : "vif config Output Msg: ",
      "source" : "2d903e9cd91327e0.attach",
      "type" : "text/plain",
      "size" : 7581
    }, {
      "uid" : "c8975352ad5c4bf2",
      "name" : "vif config Err Msg: ",
      "source" : "c8975352ad5c4bf2.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "4a2a4d063492a159",
      "name" : "get_vif_config_ssids ",
      "source" : "4a2a4d063492a159.attach",
      "type" : "text/plain",
      "size" : 100
    }, {
      "uid" : "2bb53fe4339f71c5",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "2bb53fe4339f71c5.attach",
      "type" : "text/plain",
      "size" : 224
    }, {
      "uid" : "f5c66709cf167e53",
      "name" : "AP LOgs: ",
      "source" : "f5c66709cf167e53.attach",
      "type" : "text/plain",
      "size" : 70147
    }, {
      "uid" : "a458a57e9aed1560",
      "name" : "vif state Output Msg: ",
      "source" : "a458a57e9aed1560.attach",
      "type" : "text/plain",
      "size" : 8326
    }, {
      "uid" : "70e20546f7da4e3a",
      "name" : "vif state Err Msg: ",
      "source" : "70e20546f7da4e3a.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "72fe16d87b840d30",
      "name" : "iwinfo Output Msg: ",
      "source" : "72fe16d87b840d30.attach",
      "type" : "text/plain",
      "size" : 3125
    }, {
      "uid" : "61096d63afb423dd",
      "name" : "iwinfo config Err Msg: ",
      "source" : "61096d63afb423dd.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 36,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1627691350878,
      "stop" : 1627691353802,
      "duration" : 2924
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1627691334415,
      "stop" : 1627691336897,
      "duration" : 2482
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "45a21bdc4b3c3525",
      "name" : "APNOS LIbrary: ",
      "source" : "45a21bdc4b3c3525.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "45c184446b9471a4",
      "name" : "openwrt_ctl Setup",
      "source" : "45c184446b9471a4.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "ad18d921b6433af6",
      "name" : "get_active_firmware ",
      "source" : "ad18d921b6433af6.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1627695036899,
      "stop" : 1627695036900,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1627691331715,
      "stop" : 1627691331715,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1627691331912,
      "stop" : 1627691334415,
      "duration" : 2503
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "40813b7603273def",
      "name" : "APNOS LIbrary: ",
      "source" : "40813b7603273def.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "849bf68841198873",
      "name" : "openwrt_ctl Setup",
      "source" : "849bf68841198873.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "59a93cc9f64c3921",
      "name" : "get_active_firmware ",
      "source" : "59a93cc9f64c3921.attach",
      "type" : "text/plain",
      "size" : 34
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1627691331404,
      "stop" : 1627691331714,
      "duration" : 310
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "540b81a7eae6cf09",
      "name" : "Controller Instantiated: ",
      "source" : "540b81a7eae6cf09.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1627691342359,
      "stop" : 1627691342360,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6d801f9ada3ae369",
      "name" : "Test Cases Requires: ",
      "source" : "6d801f9ada3ae369.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1627691342360,
      "stop" : 1627691350878,
      "duration" : 8518
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1627696919996,
      "stop" : 1627696925371,
      "duration" : 5375
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "20b37c0690b46da8",
      "name" : "APNOS LIbrary: ",
      "source" : "20b37c0690b46da8.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "613e4fb00c78c8aa",
      "name" : "openwrt_ctl Setup",
      "source" : "613e4fb00c78c8aa.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "bbcddcf302eeb548",
      "name" : "vif config Output Msg: ",
      "source" : "bbcddcf302eeb548.attach",
      "type" : "text/plain",
      "size" : 10091
    }, {
      "uid" : "f9bfc178217c274d",
      "name" : "vif config Err Msg: ",
      "source" : "f9bfc178217c274d.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "df19e2749e40f6e7",
      "name" : "get_vif_config_ssids ",
      "source" : "df19e2749e40f6e7.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "86b9971600bc3f54",
      "name" : "vif state Output Msg: ",
      "source" : "86b9971600bc3f54.attach",
      "type" : "text/plain",
      "size" : 11285
    }, {
      "uid" : "2eb514fbbdf5a1d9",
      "name" : "vif state Err Msg: ",
      "source" : "2eb514fbbdf5a1d9.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "c0e90fedbd67cf0",
      "name" : "get_vif_state_ssids ",
      "source" : "c0e90fedbd67cf0.attach",
      "type" : "text/plain",
      "size" : 94
    }, {
      "uid" : "6f61129defb58562",
      "name" : "vif_state",
      "source" : "6f61129defb58562.attach",
      "type" : "text/plain",
      "size" : 94
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1627691342358,
      "stop" : 1627691342358,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1627691336897,
      "stop" : 1627691336897,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1627691342358,
      "stop" : 1627691342358,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "45a5589be09c61d6",
      "name" : "VLAN Created: ",
      "source" : "45a5589be09c61d6.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "exit_on_fail",
    "time" : {
      "start" : 1627695036900,
      "stop" : 1627695036900,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1627691336898,
      "stop" : 1627691336898,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1627691329992,
      "stop" : 1627691329992,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1627691329990,
      "stop" : 1627691329991,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "365488f7d844d456",
      "name" : "Testbed Selected : ",
      "source" : "365488f7d844d456.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1627691329992,
      "stop" : 1627691331404,
      "duration" : 1412
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "746eb854b506046f",
      "name" : "added openwrtctl.py to :",
      "source" : "746eb854b506046f.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "25a700d74695ae20",
      "name" : "APNOS LIbrary: ",
      "source" : "25a700d74695ae20.attach",
      "type" : "text/plain",
      "size" : 316
    }, {
      "uid" : "b049c53d11d11150",
      "name" : "openwrt_ctl Setup",
      "source" : "b049c53d11d11150.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1627695036899,
      "stop" : 1627695036899,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1627695036899,
      "stop" : 1627695036899,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1627691331912,
      "stop" : 1627691331912,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1627691329991,
      "stop" : 1627691329991,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "653cf4deadd74390",
      "name" : "Testbed Selected: ",
      "source" : "653cf4deadd74390.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1627695036895,
      "stop" : 1627695036898,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1627691353803,
      "stop" : 1627691353803,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d3593399c9e5bef2",
      "name" : "Radius server Info: ",
      "source" : "d3593399c9e5bef2.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1627691331715,
      "stop" : 1627691331823,
      "duration" : 108
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1627691342358,
      "stop" : 1627691342358,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1627691331912,
      "stop" : 1627691331912,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1627691331823,
      "stop" : 1627691331911,
      "duration" : 88
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1627691331912,
      "stop" : 1627691331912,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1627700708108,
      "stop" : 1627700708108,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1627700708105,
      "stop" : 1627700708105,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1627700708160,
      "stop" : 1627700708160,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1627700708112,
      "stop" : 1627700708112,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1627700708178,
      "stop" : 1627700708178,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1627700708178,
      "stop" : 1627700708179,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4f10e58bf8bcfa7d",
      "name" : "Controller Teardown: ",
      "source" : "4f10e58bf8bcfa7d.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1627700708087,
      "stop" : 1627700708087,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1627700708083,
      "stop" : 1627700708084,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1627697423153,
      "stop" : 1627697423153,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1627700708095,
      "stop" : 1627700708095,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1627700708103,
      "stop" : 1627700708103,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1627700708103,
      "stop" : 1627700708103,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "exit_on_fail::0",
    "time" : {
      "start" : 1627700708276,
      "stop" : 1627700708276,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1627700708104,
      "stop" : 1627700708104,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1627700708199,
      "stop" : 1627700708199,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1627700708269,
      "stop" : 1627700708269,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1627700708183,
      "stop" : 1627700708183,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1627700708107,
      "stop" : 1627700708107,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1627700708106,
      "stop" : 1627700708106,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1627700708130,
      "stop" : 1627700708130,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1627700708243,
      "stop" : 1627700708243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1627700708200,
      "stop" : 1627700708200,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1627700708072,
      "stop" : 1627700708072,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1627700708151,
      "stop" : 1627700708151,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1627700708099,
      "stop" : 1627700708099,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1627700708117,
      "stop" : 1627700708117,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1627700708135,
      "stop" : 1627700708135,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1627700708121,
      "stop" : 1627700708121,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "nat"
  }, {
    "name" : "tag",
    "value" : "ttls"
  }, {
    "name" : "tag",
    "value" : "wpa3_enterprise_mixed"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "enterprise"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_enterprise_ttls"
  }, {
    "name" : "subSuite",
    "value" : "TestNATModeEnterpriseTTLSSuiteTwo"
  }, {
    "name" : "host",
    "value" : "testing-98-dszjn"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.nat_mode.client_connectivity.test_enterprise_ttls"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'NAT', 'ssid_modes': {'wpa_wpa2_enterprise_mixed': [{'ssid_name': 'ssid_wpa_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa3_enterprise_mixed': [{'ssid_name': 'ssid_wpa3_mixed_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_mixed_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': True}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 1,
        "passed" : 20,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "49a8a16cf91298fb",
        "status" : "passed",
        "time" : {
          "start" : 1627611562139,
          "stop" : 1627611630832,
          "duration" : 68693
        }
      }, {
        "uid" : "acec0bb0ab06e2ad",
        "status" : "passed",
        "time" : {
          "start" : 1627524888431,
          "stop" : 1627524968044,
          "duration" : 79613
        }
      }, {
        "uid" : "2025665fedbae0f3",
        "status" : "passed",
        "time" : {
          "start" : 1627438457516,
          "stop" : 1627438526465,
          "duration" : 68949
        }
      }, {
        "uid" : "2cab6fc8571372f0",
        "status" : "passed",
        "time" : {
          "start" : 1627352286609,
          "stop" : 1627352353547,
          "duration" : 66938
        }
      }, {
        "uid" : "936d2cda0c96b685",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1627265455973,
          "stop" : 1627265455974,
          "duration" : 1
        }
      }, {
        "uid" : "846e2cd1cd110624",
        "status" : "passed",
        "time" : {
          "start" : 1627179248396,
          "stop" : 1627179313586,
          "duration" : 65190
        }
      }, {
        "uid" : "cf9d3dc215ac7fd5",
        "status" : "passed",
        "time" : {
          "start" : 1627092994164,
          "stop" : 1627093058017,
          "duration" : 63853
        }
      }, {
        "uid" : "9676a14328ad135e",
        "status" : "passed",
        "time" : {
          "start" : 1627006505403,
          "stop" : 1627006573190,
          "duration" : 67787
        }
      }, {
        "uid" : "f5d4635ab4b5d567",
        "status" : "passed",
        "time" : {
          "start" : 1626921280666,
          "stop" : 1626921406792,
          "duration" : 126126
        }
      }, {
        "uid" : "f8e731db21188521",
        "status" : "passed",
        "time" : {
          "start" : 1626833864616,
          "stop" : 1626833936834,
          "duration" : 72218
        }
      }, {
        "uid" : "74f631e2eff564f6",
        "status" : "passed",
        "time" : {
          "start" : 1626747320732,
          "stop" : 1626747395757,
          "duration" : 75025
        }
      }, {
        "uid" : "83e7ca3ead9e6793",
        "status" : "passed",
        "time" : {
          "start" : 1626661017888,
          "stop" : 1626661085431,
          "duration" : 67543
        }
      }, {
        "uid" : "48f1869003812bca",
        "status" : "passed",
        "time" : {
          "start" : 1626574674962,
          "stop" : 1626574748362,
          "duration" : 73400
        }
      }, {
        "uid" : "393971689e81c7b5",
        "status" : "passed",
        "time" : {
          "start" : 1626488380790,
          "stop" : 1626488447086,
          "duration" : 66296
        }
      }, {
        "uid" : "3432b9c5a81781d2",
        "status" : "passed",
        "time" : {
          "start" : 1626402018183,
          "stop" : 1626402087762,
          "duration" : 69579
        }
      }, {
        "uid" : "c56d9ff5b329a6ca",
        "status" : "passed",
        "time" : {
          "start" : 1626229556714,
          "stop" : 1626229632699,
          "duration" : 75985
        }
      }, {
        "uid" : "1728b1124c97117f",
        "status" : "passed",
        "time" : {
          "start" : 1625576915467,
          "stop" : 1625576984015,
          "duration" : 68548
        }
      }, {
        "uid" : "87ef66ad15f1b23",
        "status" : "passed",
        "time" : {
          "start" : 1625192765725,
          "stop" : 1625192835113,
          "duration" : 69388
        }
      }, {
        "uid" : "d08c335d3fb83dd6",
        "status" : "passed",
        "time" : {
          "start" : 1625019437222,
          "stop" : 1625019505463,
          "duration" : 68241
        }
      }, {
        "uid" : "80a59da762145861",
        "status" : "passed",
        "time" : {
          "start" : 1624760270039,
          "stop" : 1624760340029,
          "duration" : 69990
        }
      } ]
    },
    "tags" : [ "nat", "@pytest.mark.usefixtures('setup_profiles')", "ttls", "enterprise", "sanity", "client_connectivity", "twog", "wpa3_enterprise_mixed" ]
  },
  "source" : "9467eed210bd2b77.json",
  "parameterValues" : [ "{'mode': 'NAT', 'ssid_modes': {'wpa_wpa2_enterprise_mixed': [{'ssid_name': 'ssid_wpa_wpa2_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa_wpa2_enterprise_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}], 'wpa3_enterprise_mixed': [{'ssid_name': 'ssid_wpa3_mixed_eap_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-0-NAT', 'mode': 'NAT', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_mixed_eap_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'basic-01-SSID-wpa3_enterprise_mixed-1-NAT', 'mode': 'NAT', 'vlan': 1}]}, 'rf': {}, 'radius': True}" ]
}
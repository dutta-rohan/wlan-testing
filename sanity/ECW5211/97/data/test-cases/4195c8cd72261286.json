{
  "uid" : "4195c8cd72261286",
  "name" : "test_fms_version_list",
  "fullName" : "test_connectivity.TestFMS#test_fms_version_list",
  "historyId" : "625b39bf0168621f7240138f6e718dbc",
  "time" : {
    "start" : 1637855896092,
    "stop" : 1637855907476,
    "duration" : 11384
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False not in [False]",
  "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7eff96f6f550>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7eff96fbdd30>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_ap_logs = None\n\n    @pytest.mark.get_firmware_list\n    def test_fms_version_list(self, fixtures_ver, get_configuration, get_ap_logs):\n        PASS = []\n        for ap in get_configuration['access_point']:\n            # get the latest branch\n            firmware_list = fixtures_ver.fw_client.get_firmwares(model=ap['model'],\n                                                                 branch=\"\",\n                                                                 commit_id='',\n                                                                 limit='10000',\n                                                                 offset='3000')\n            firmware_list.reverse()\n            release_list_data = []\n            for i in firmware_list:\n                release_list_data.append(str(i['release']))\n            allure.attach(name=\"firmware_list\", body=str(\"\\n\".join(release_list_data)),\n                          attachment_type=allure.attachment_type.JSON)\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                target_revision_branch = ap['version'].split(\"-\")[-3]\n                flag = True\n                for i in release_list_data:\n                    if target_revision_commit == i.split('-')[-1] and target_revision_branch == i.split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + i)\n                        allure.attach(name='target firmware : ' + ap['version'] + \" is available in FMS : \" + i,\n                                      body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n                break\n            except Exception as e:\n                pass\n    \n            if ap['version'].split('-')[1] == \"latest\":\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        version = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            break\n    \n                    if firmware['release'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                        break\n            else:\n                flag = True\n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        branch = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        commit = ap['version'].split('-')[1]\n                        if branch.__contains__('v2.') and commit == firmware['release'].split('-')[-1]:\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            PASS.append(True)\n                            flag = False\n                            break\n                    if ap['version'].split('-')[1] == firmware['release'].split('-')[-1] and ap['version'].split('-')[\n                        0] == \\\n                            firmware['release'].split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release'])\n                        allure.attach(\n                            name='target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release']\n                            , body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n>       assert False not in PASS\nE       assert False not in [False]\n\ntest_connectivity.py:135: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "get_configuration",
    "time" : {
      "start" : 1637855855665,
      "stop" : 1637855855665,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1637855855664,
      "stop" : 1637855855665,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1637855855664,
      "stop" : 1637855855664,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1637855855666,
      "stop" : 1637855855784,
      "duration" : 118
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1637855855812,
      "stop" : 1637855855812,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs",
    "time" : {
      "start" : 1637855893141,
      "stop" : 1637855896091,
      "duration" : 2950
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False not in [False]",
    "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7eff96f6f550>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7eff96fbdd30>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_ap_logs = None\n\n    @pytest.mark.get_firmware_list\n    def test_fms_version_list(self, fixtures_ver, get_configuration, get_ap_logs):\n        PASS = []\n        for ap in get_configuration['access_point']:\n            # get the latest branch\n            firmware_list = fixtures_ver.fw_client.get_firmwares(model=ap['model'],\n                                                                 branch=\"\",\n                                                                 commit_id='',\n                                                                 limit='10000',\n                                                                 offset='3000')\n            firmware_list.reverse()\n            release_list_data = []\n            for i in firmware_list:\n                release_list_data.append(str(i['release']))\n            allure.attach(name=\"firmware_list\", body=str(\"\\n\".join(release_list_data)),\n                          attachment_type=allure.attachment_type.JSON)\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                target_revision_branch = ap['version'].split(\"-\")[-3]\n                flag = True\n                for i in release_list_data:\n                    if target_revision_commit == i.split('-')[-1] and target_revision_branch == i.split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + i)\n                        allure.attach(name='target firmware : ' + ap['version'] + \" is available in FMS : \" + i,\n                                      body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n                break\n            except Exception as e:\n                pass\n    \n            if ap['version'].split('-')[1] == \"latest\":\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        version = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            break\n    \n                    if firmware['release'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                        break\n            else:\n                flag = True\n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        branch = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        commit = ap['version'].split('-')[1]\n                        if branch.__contains__('v2.') and commit == firmware['release'].split('-')[-1]:\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            PASS.append(True)\n                            flag = False\n                            break\n                    if ap['version'].split('-')[1] == firmware['release'].split('-')[-1] and ap['version'].split('-')[\n                        0] == \\\n                            firmware['release'].split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release'])\n                        allure.attach(\n                            name='target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release']\n                            , body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n>       assert False not in PASS\nE       assert False not in [False]\n\ntest_connectivity.py:135: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ad6679f5e793f57b",
      "name" : "firmwares/limit=10000&deviceType=&latestonly=offset=3000",
      "source" : "ad6679f5e793f57b.json",
      "type" : "application/json",
      "size" : 1622950
    }, {
      "uid" : "726d815310d6ca32",
      "name" : "firmware_list",
      "source" : "726d815310d6ca32.json",
      "type" : "application/json",
      "size" : 107300
    }, {
      "uid" : "6f0acf588b40a69f",
      "name" : "target firmware : release-v2.4.0-rc1 is not available in FMS : ",
      "source" : "6f0acf588b40a69f.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1637856065064,
      "stop" : 1637856065064,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1637856065150,
      "stop" : 1637856065150,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1637856065154,
      "stop" : 1637856065154,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1637856064955,
      "stop" : 1637856064955,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1637856064880,
      "stop" : 1637856064880,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs::collect_logs",
    "time" : {
      "start" : 1637855908361,
      "stop" : 1637855918865,
      "duration" : 10504
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2e3bf5178bb2979d",
      "name" : "logread",
      "source" : "2e3bf5178bb2979d.attach",
      "type" : "text/plain",
      "size" : 136
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "get_firmware_list"
  }, {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "uc_firmware"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestFMS"
  }, {
    "name" : "host",
    "value" : "testing-97-2vrc7"
  }, {
    "name" : "thread",
    "value" : "865-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Firmware Management",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 8,
        "unknown" : 0,
        "total" : 9
      },
      "items" : [ {
        "uid" : "91507dc3fcd73fa9",
        "status" : "passed",
        "time" : {
          "start" : 1637787317847,
          "stop" : 1637787329135,
          "duration" : 11288
        }
      }, {
        "uid" : "51bcb769c6339ff1",
        "status" : "passed",
        "time" : {
          "start" : 1637701019982,
          "stop" : 1637701031863,
          "duration" : 11881
        }
      }, {
        "uid" : "25a09d305c27d99e",
        "status" : "passed",
        "time" : {
          "start" : 1637614233126,
          "stop" : 1637614240649,
          "duration" : 7523
        }
      }, {
        "uid" : "ca8d5bff80c03810",
        "status" : "passed",
        "time" : {
          "start" : 1637528519033,
          "stop" : 1637528529950,
          "duration" : 10917
        }
      }, {
        "uid" : "a10d9e81dbc20429",
        "status" : "passed",
        "time" : {
          "start" : 1637441859304,
          "stop" : 1637441871951,
          "duration" : 12647
        }
      }, {
        "uid" : "7b2f8fab89c1b772",
        "status" : "passed",
        "time" : {
          "start" : 1637355961565,
          "stop" : 1637355973417,
          "duration" : 11852
        }
      }, {
        "uid" : "7170db6e0d3c04be",
        "status" : "passed",
        "time" : {
          "start" : 1637269371764,
          "stop" : 1637269378872,
          "duration" : 7108
        }
      }, {
        "uid" : "4a6b94cb5a9f5aea",
        "status" : "passed",
        "time" : {
          "start" : 1636665544891,
          "stop" : 1636665573237,
          "duration" : 28346
        }
      } ]
    },
    "tags" : [ "get_firmware_list", "sanity_55", "test_resources", "sanity", "uc_firmware", "uc_sanity" ]
  },
  "source" : "4195c8cd72261286.json",
  "parameterValues" : [ ]
}
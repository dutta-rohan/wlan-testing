{"name": "test_firmware_upgrade_status_gateway", "status": "broken", "statusDetails": {"message": "NameError: Invalid response code.", "trace": "self = <tests.test_connectivity.TestFMS object at 0x7fab2b09cbe0>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7fab2b18faf0>\nget_ap_logs = None\n\n    @pytest.mark.test_firmware_gw\n    def test_firmware_upgrade_status_gateway(self, get_apnos, get_configuration, setup_controller, get_ap_logs):\n        status = []\n        for ap in get_configuration['access_point']:\n            ap_ssh = get_apnos(ap, pwd=\"../libs/apnos/\", sdk=\"2.x\")\n            ap_version = ap_ssh.get_ap_version_ucentral()\n            current_version_ap = str(ap_version).split()\n>           data = setup_controller.get_device_by_serial_number(serial_number=ap['serial'])\n\ntest_connectivity.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/controller/controller_2x/controller.py:173: in get_device_by_serial_number\n    self.check_response(\"GET\", resp, self.make_headers(), \"\", uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fab2b18faf0>\ncmd = 'GET', response = <Response [404]>\nheaders = {'Authorization': 'Bearer 96a2542f587149623a1fc71a9346f0b04140ed914ea247574db54fe64979cb36', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://gw-9b75e8fc.cicd.lab.wlan.tip.build:16002/api/v1/device/68215fda456d'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:153: NameError"}, "start": 1637356334018, "stop": 1637356337356, "uuid": "dae9c628-4bca-414c-a401-3d6b01cc11ac", "historyId": "9317dff433bd6cfcbbbf4023245d7067", "testCaseId": "9083a4c43940d88d440139b6c4f5411e", "fullName": "test_connectivity.TestFMS#test_firmware_upgrade_status_gateway", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "uc_firmware"}, {"name": "tag", "value": "test_firmware_gw"}, {"name": "tag", "value": "test_resources"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "sanity_55"}, {"name": "suite", "value": "test_connectivity"}, {"name": "subSuite", "value": "TestFMS"}, {"name": "host", "value": "testing-81-rprx7"}, {"name": "thread", "value": "382-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_connectivity"}], "links": [{"type": "test_case", "name": "Firmware Management"}]}
{"name": "test_open_ssid_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "NameError: Invalid response code.", "trace": "fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fef6bc5cbe0>\n\n    @pytest.fixture(scope=\"session\")\n    def get_sdk_version(fixtures_ver):\n>       version = fixtures_ver.get_sdk_version()\n\nconftest.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_2x.py:355: in get_sdk_version\n    version = self.controller_obj.get_sdk_version()\n../libs/controller/controller_2x/controller.py:182: in get_sdk_version\n    self.check_response(\"GET\", resp, self.make_headers(), \"\", uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fef6bc5c9d0>\ncmd = 'GET', response = <Response [403]>\nheaders = {'Authorization': 'Bearer d085436adcbde2d505800ff009750d165e8ff2d16fe95de0f8d3ed3638c30631', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://gw-8d7b7494.cicd.lab.wlan.tip.build:16002/api/v1/system/?command=info'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:154: NameError"}, "description": "Client Connectivity open ssid 5G\n           pytest -m \"client_connectivity and bridge and general and open and fiveg\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_open_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something'}], 'wpa': [{'ssid_name': 'ssid_wpa_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something'}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa2_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}"}], "start": 1639140224974, "stop": 1639140224974, "uuid": "f2173bf2-8b6d-4ec8-a2a8-4f304fee126c", "historyId": "dab1ee8ba71488c10d1777aabc0d133a", "testCaseId": "60ab90bc514b5ab1824c9ed64385bfe7", "fullName": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteA#test_open_ssid_5g", "labels": [{"name": "subSuite", "value": "Bridge Mode Client Connectivity : Suite-A"}, {"name": "feature", "value": "BRIDGE MODE CLIENT CONNECTIVITY"}, {"name": "suite", "value": "sanity"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "sudo"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "suiteA"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "open"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"}, {"name": "host", "value": "testing-130-9s574"}, {"name": "thread", "value": "14-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-2801", "name": "JIRA LINK"}]}
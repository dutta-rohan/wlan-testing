{
  "uid" : "3787680c2591e459",
  "name" : "test_firmware_upgrade_request",
  "fullName" : "test_connectivity.TestFMS#test_firmware_upgrade_request",
  "historyId" : "12d337a2c9ca27419cbc831bf70f6bf7",
  "time" : {
    "start" : 1636490744579,
    "stop" : 1636490744579,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fdd9ae5cb80>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP5', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\n\n    @pytest.fixture(scope=\"session\")\n    def firmware_upgrade(fixtures_ver, get_apnos, get_configuration):\n>       upgrade_status = fixtures_ver.setup_firmware(get_apnos, get_configuration)\n\nconftest.py:655: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <fixtures_2x.Fixtures_2x object at 0x7fdd9ae5cb80>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP5', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nrequest = ''\n\n    def setup_firmware(self, get_apnos, get_configuration, request=\"\"):\n        # Query AP Firmware\n        upgrade_status = []\n        for ap in get_configuration['access_point']:\n    \n            ap_ssh = get_apnos(ap, pwd=\"../libs/apnos/\", sdk=\"2.x\")\n            # If specified as URL\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                ap_version = ap_ssh.get_ap_version_ucentral()\n                current_version_commit = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                if target_revision_commit in current_version_commit:\n                    continue\n                self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(ap['version']))\n    \n                items = list(range(0, 300))\n                l = len(items)\n                ap_version = ap_ssh.get_ap_version_ucentral()\n                current_version_commit = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                if target_revision_commit in current_version_commit:\n                    upgrade_status.append([ap['serial'], target_revision_commit, current_version_commit])\n                    print(\"Firmware Upgraded to :\", ap_version)\n                else:\n                    print(\"firmware upgraded failed: \", target_revision)\n                    upgrade_status.append([ap['serial'], target_revision_commit, current_version_commit])\n                break\n            except Exception as e:\n                print(\"URL does not exist on Internet\")\n            # else Specified as \"branch-commit_id\" / \"branch-latest\"\n            firmware_url = \"\"\n            ap_version = ap_ssh.get_ap_version_ucentral()\n            response = self.fw_client.get_latest_fw(model=ap[\"model\"])\n            # if the target version specified is \"branch-latest\"\n            if ap['version'].split('-')[1] == \"latest\":\n                # get the latest branch\n                firmware_list = self.fw_client.get_firmwares(model=ap['model'], branch=\"\", commit_id='')\n                firmware_list.reverse()\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware))\n                            target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\n    \n                            # check the current AP Revision before upgrade\n                            ap_version = ap_ssh.get_ap_version_ucentral()\n                            current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                            # print and report the firmware versions before upgrade\n                            allure.attach(name=\"Before Firmware Upgrade Request: \",\n                                          body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                            print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n    \n                            # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                            if current_version == target_revision:\n                                upgrade_status.append([ap['serial'], target_revision, current_version, 'skip'])\n                                print(\"Skipping Upgrade! AP is already in target version\")\n                                allure.attach(name=\"Skipping Upgrade because AP is already in the target Version\",\n                                              body=\"\")\n                                break\n    \n                            self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(firmware['uri']))\n                            # wait for 300 seconds after firmware upgrade\n                            print(\"waiting for 300 Sec for Firmware Upgrade\")\n                            time.sleep(300)\n    \n                            # check the current AP Revision again\n                            ap_version = ap_ssh.get_ap_version_ucentral()\n                            current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                            # print and report the Firmware versions after upgrade\n                            allure.attach(name=\"After Firmware Upgrade Request: \",\n                                          body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                            print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n                            if current_version == target_revision:\n                                upgrade_status.append([ap['serial'], target_revision, current_version])\n                                print(\"firmware upgraded successfully: \", target_revision)\n                            else:\n                                upgrade_status.append([ap['serial'], target_revision, current_version])\n                                print(\"firmware upgraded failed: \", target_revision)\n                            break\n                    if firmware['image'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware))\n    \n                        target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\n    \n                        # check the current AP Revision before upgrade\n                        ap_version = ap_ssh.get_ap_version_ucentral()\n>                       current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\nE                       IndexError: list index out of range\n\nfixtures_2x.py:155: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_apnos",
    "time" : {
      "start" : 1636490351434,
      "stop" : 1636490351434,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1636490351265,
      "stop" : 1636490351391,
      "duration" : 126
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1636490351264,
      "stop" : 1636490351264,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "firmware_upgrade",
    "time" : {
      "start" : 1636490744580,
      "stop" : 1636490875685,
      "duration" : 131105
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/conftest.py\", line 655, in firmware_upgrade\n    upgrade_status = fixtures_ver.setup_firmware(get_apnos, get_configuration)\n  File \"/wlan-testing/tests/fixtures_2x.py\", line 155, in setup_firmware\n    current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "fd7dc9619c374efd",
      "name" : "firmwares/limit=10000&deviceType=cig_wf194c&latestonly=offset=3000",
      "source" : "fd7dc9619c374efd.json",
      "type" : "application/json",
      "size" : 86973
    }, {
      "uid" : "1efd587f87cfbab5",
      "name" : "Target firmware : ",
      "source" : "1efd587f87cfbab5.attach",
      "type" : "text/plain",
      "size" : 559
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1636490351265,
      "stop" : 1636490351265,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs",
    "time" : {
      "start" : 1636490876743,
      "stop" : 1636490942809,
      "duration" : 66066
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1636490351264,
      "stop" : 1636490351265,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1636494105131,
      "stop" : 1636494105131,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1636494105224,
      "stop" : 1636494105224,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1636494105424,
      "stop" : 1636494105424,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1636494105335,
      "stop" : 1636494105335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs::collect_logs",
    "time" : {
      "start" : 1636491008758,
      "stop" : 1636491138859,
      "duration" : 130101
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "aacdcde1f8ec283b",
      "name" : "logread",
      "source" : "aacdcde1f8ec283b.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1636494105349,
      "stop" : 1636494105349,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "firmware_upgrade"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "uc_firmware"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestFMS"
  }, {
    "name" : "host",
    "value" : "testing-322-kfgxq"
  }, {
    "name" : "thread",
    "value" : "7-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Firmware Management",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 17,
        "skipped" : 0,
        "passed" : 32,
        "unknown" : 0,
        "total" : 49
      },
      "items" : [ {
        "uid" : "94a08e45b0e32120",
        "status" : "broken",
        "statusDetails" : "IndexError: list index out of range",
        "time" : {
          "start" : 1636317961629,
          "stop" : 1636317961629,
          "duration" : 0
        }
      }, {
        "uid" : "1fbd7d796e7c5767",
        "status" : "broken",
        "statusDetails" : "IndexError: list index out of range",
        "time" : {
          "start" : 1636231477123,
          "stop" : 1636231477123,
          "duration" : 0
        }
      }, {
        "uid" : "a7e929465ba03926",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))",
        "time" : {
          "start" : 1636145095860,
          "stop" : 1636145095860,
          "duration" : 0
        }
      }, {
        "uid" : "22eab95ec5acad58",
        "status" : "broken",
        "statusDetails" : "IndexError: list index out of range",
        "time" : {
          "start" : 1636058714882,
          "stop" : 1636058714882,
          "duration" : 0
        }
      }, {
        "uid" : "a99c6387b73ca8e8",
        "status" : "passed",
        "time" : {
          "start" : 1635971993702,
          "stop" : 1635971993703,
          "duration" : 1
        }
      }, {
        "uid" : "1929e58ba705843d",
        "status" : "broken",
        "statusDetails" : "IndexError: list index out of range",
        "time" : {
          "start" : 1635937777432,
          "stop" : 1635937777432,
          "duration" : 0
        }
      }, {
        "uid" : "2993ae27a556313",
        "status" : "passed",
        "time" : {
          "start" : 1635885606442,
          "stop" : 1635885606443,
          "duration" : 1
        }
      }, {
        "uid" : "22fef193a3c6b096",
        "status" : "passed",
        "time" : {
          "start" : 1635799060709,
          "stop" : 1635799060710,
          "duration" : 1
        }
      }, {
        "uid" : "59a6791c6b434b48",
        "status" : "passed",
        "time" : {
          "start" : 1635753017265,
          "stop" : 1635753017266,
          "duration" : 1
        }
      }, {
        "uid" : "bdbd4cba74eac2a0",
        "status" : "passed",
        "time" : {
          "start" : 1635712513768,
          "stop" : 1635712513768,
          "duration" : 0
        }
      }, {
        "uid" : "fa5747812f13541d",
        "status" : "passed",
        "time" : {
          "start" : 1635662808413,
          "stop" : 1635662808413,
          "duration" : 0
        }
      }, {
        "uid" : "35f1c1c0308b599f",
        "status" : "passed",
        "time" : {
          "start" : 1635626110986,
          "stop" : 1635626110987,
          "duration" : 1
        }
      }, {
        "uid" : "48849e3a06daa3bd",
        "status" : "passed",
        "time" : {
          "start" : 1635606030695,
          "stop" : 1635606030696,
          "duration" : 1
        }
      }, {
        "uid" : "84dec83b4cbc27d0",
        "status" : "passed",
        "time" : {
          "start" : 1635282618270,
          "stop" : 1635282618270,
          "duration" : 0
        }
      }, {
        "uid" : "a53948f2dc0ba2ba",
        "status" : "passed",
        "time" : {
          "start" : 1634944638642,
          "stop" : 1634944638642,
          "duration" : 0
        }
      }, {
        "uid" : "e043c9100a8241f8",
        "status" : "passed",
        "time" : {
          "start" : 1634850415947,
          "stop" : 1634850415947,
          "duration" : 0
        }
      }, {
        "uid" : "9d9f8a9b22980835",
        "status" : "passed",
        "time" : {
          "start" : 1634743226793,
          "stop" : 1634743226793,
          "duration" : 0
        }
      }, {
        "uid" : "dd1698bcb2702c8c",
        "status" : "passed",
        "time" : {
          "start" : 1634738511920,
          "stop" : 1634738511920,
          "duration" : 0
        }
      }, {
        "uid" : "68ed1fef36b25038",
        "status" : "passed",
        "time" : {
          "start" : 1634677504461,
          "stop" : 1634677504461,
          "duration" : 0
        }
      }, {
        "uid" : "d44b84bb4093e855",
        "status" : "broken",
        "statusDetails" : "IndexError: list index out of range",
        "time" : {
          "start" : 1634590919695,
          "stop" : 1634590919695,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ "sanity_55", "test_resources", "sanity", "firmware_upgrade", "uc_firmware", "uc_sanity" ]
  },
  "source" : "3787680c2591e459.json",
  "parameterValues" : [ ]
}
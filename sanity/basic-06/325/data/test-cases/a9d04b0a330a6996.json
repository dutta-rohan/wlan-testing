{
  "uid" : "a9d04b0a330a6996",
  "name" : "test_firmware_upgrade_status_gateway",
  "fullName" : "test_connectivity.TestFMS#test_firmware_upgrade_status_gateway",
  "historyId" : "9317dff433bd6cfcbbbf4023245d7067",
  "time" : {
    "start" : 1637429380385,
    "stop" : 1637429383452,
    "duration" : 3067
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False not in [False]",
  "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7f7c32608370>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7f7c326f6af0>\nget_ap_logs = None\n\n    @pytest.mark.test_firmware_gw\n    def test_firmware_upgrade_status_gateway(self, get_apnos, get_configuration, setup_controller, get_ap_logs):\n        status = []\n        for ap in get_configuration['access_point']:\n            ap_ssh = get_apnos(ap, pwd=\"../libs/apnos/\", sdk=\"2.x\")\n            ap_version = ap_ssh.get_ap_version_ucentral()\n            current_version_ap = str(ap_version).split()\n            data = setup_controller.get_device_by_serial_number(serial_number=ap['serial'])\n            allure.attach(name=str(data['firmware']) + str(current_version_ap), body=\"\")\n            status.append(current_version_ap == data['firmware'].split())\n>       assert False not in status\nE       assert False not in [False]\n\ntest_connectivity.py:158: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "get_ap_logs",
    "time" : {
      "start" : 1637429377395,
      "stop" : 1637429380385,
      "duration" : 2990
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False not in [False]",
    "statusTrace" : "self = <tests.test_connectivity.TestFMS object at 0x7f7c32608370>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7f7c326f6af0>\nget_ap_logs = None\n\n    @pytest.mark.test_firmware_gw\n    def test_firmware_upgrade_status_gateway(self, get_apnos, get_configuration, setup_controller, get_ap_logs):\n        status = []\n        for ap in get_configuration['access_point']:\n            ap_ssh = get_apnos(ap, pwd=\"../libs/apnos/\", sdk=\"2.x\")\n            ap_version = ap_ssh.get_ap_version_ucentral()\n            current_version_ap = str(ap_version).split()\n            data = setup_controller.get_device_by_serial_number(serial_number=ap['serial'])\n            allure.attach(name=str(data['firmware']) + str(current_version_ap), body=\"\")\n            status.append(current_version_ap == data['firmware'].split())\n>       assert False not in status\nE       assert False not in [False]\n\ntest_connectivity.py:158: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "43bdea17578fff6a",
      "name" : "OpenWrt 21.02-SNAPSHOT r16273+84-378769b555 / TIP-devel-460785c['OpenWrt', '21.02-SNAPSHOT', 'r16273+89-378769b555', '/', 'TIP-devel-d58d87a']",
      "source" : "43bdea17578fff6a.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_ap_logs::collect_logs",
    "time" : {
      "start" : 1637429384240,
      "stop" : 1637429394786,
      "duration" : 10546
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "48df33e02a5000b",
      "name" : "logread",
      "source" : "48df33e02a5000b.attach",
      "type" : "text/plain",
      "size" : 136
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "test_firmware_gw"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "uc_firmware"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestFMS"
  }, {
    "name" : "host",
    "value" : "testing-325-gl7wq"
  }, {
    "name" : "thread",
    "value" : "7-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Firmware Management",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 10,
        "skipped" : 0,
        "passed" : 48,
        "unknown" : 0,
        "total" : 59
      },
      "items" : [ {
        "uid" : "cd589ce952f030ba",
        "status" : "passed",
        "time" : {
          "start" : 1636490574053,
          "stop" : 1636490576996,
          "duration" : 2943
        }
      }, {
        "uid" : "30eb64291b7235c9",
        "status" : "passed",
        "time" : {
          "start" : 1636317605814,
          "stop" : 1636317609386,
          "duration" : 3572
        }
      }, {
        "uid" : "4642ccf98bb70236",
        "status" : "passed",
        "time" : {
          "start" : 1636231505338,
          "stop" : 1636231508826,
          "duration" : 3488
        }
      }, {
        "uid" : "3273bb15f5e87bad",
        "status" : "passed",
        "time" : {
          "start" : 1636144759466,
          "stop" : 1636144762940,
          "duration" : 3474
        }
      }, {
        "uid" : "f1cd8738119c6ecf",
        "status" : "passed",
        "time" : {
          "start" : 1636058367915,
          "stop" : 1636058371466,
          "duration" : 3551
        }
      }, {
        "uid" : "7b3bf92b67dcccb4",
        "status" : "passed",
        "time" : {
          "start" : 1635972019769,
          "stop" : 1635972023248,
          "duration" : 3479
        }
      }, {
        "uid" : "53847873a9e47de0",
        "status" : "passed",
        "time" : {
          "start" : 1635937447528,
          "stop" : 1635937451116,
          "duration" : 3588
        }
      }, {
        "uid" : "8021bf553e2f09c8",
        "status" : "passed",
        "time" : {
          "start" : 1635885606639,
          "stop" : 1635885610021,
          "duration" : 3382
        }
      }, {
        "uid" : "fc447f7cb49a45f0",
        "status" : "passed",
        "time" : {
          "start" : 1635850661190,
          "stop" : 1635850664868,
          "duration" : 3678
        }
      }, {
        "uid" : "2dc8320fe0297a68",
        "status" : "passed",
        "time" : {
          "start" : 1635799078029,
          "stop" : 1635799081362,
          "duration" : 3333
        }
      }, {
        "uid" : "8e446eeb91638061",
        "status" : "passed",
        "time" : {
          "start" : 1635753071186,
          "stop" : 1635753074417,
          "duration" : 3231
        }
      }, {
        "uid" : "1fd8b1fb58c9995e",
        "status" : "passed",
        "time" : {
          "start" : 1635712539548,
          "stop" : 1635712542837,
          "duration" : 3289
        }
      }, {
        "uid" : "950e01a07dcce4c0",
        "status" : "passed",
        "time" : {
          "start" : 1635662784697,
          "stop" : 1635662787897,
          "duration" : 3200
        }
      }, {
        "uid" : "47a82b79be8829a3",
        "status" : "passed",
        "time" : {
          "start" : 1635626149922,
          "stop" : 1635626153220,
          "duration" : 3298
        }
      }, {
        "uid" : "6968d368deb4e5de",
        "status" : "passed",
        "time" : {
          "start" : 1635606054346,
          "stop" : 1635606057728,
          "duration" : 3382
        }
      }, {
        "uid" : "b2a4bd7a44d0662b",
        "status" : "passed",
        "time" : {
          "start" : 1635539846925,
          "stop" : 1635539850240,
          "duration" : 3315
        }
      }, {
        "uid" : "405b63ea891b39d6",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.ConnectionError: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))",
        "time" : {
          "start" : 1635520947660,
          "stop" : 1635520955907,
          "duration" : 8247
        }
      }, {
        "uid" : "a105f1993702d3ed",
        "status" : "broken",
        "statusDetails" : "NameError: Invalid response code.",
        "time" : {
          "start" : 1635436039927,
          "stop" : 1635436106288,
          "duration" : 66361
        }
      }, {
        "uid" : "1412f0e22404e901",
        "status" : "passed",
        "time" : {
          "start" : 1635282318540,
          "stop" : 1635282321963,
          "duration" : 3423
        }
      }, {
        "uid" : "e95604225bcbf14",
        "status" : "passed",
        "time" : {
          "start" : 1635225388770,
          "stop" : 1635225391970,
          "duration" : 3200
        }
      } ]
    },
    "tags" : [ "sanity_55", "test_resources", "test_firmware_gw", "sanity", "uc_firmware", "uc_sanity" ]
  },
  "source" : "a9d04b0a330a6996.json",
  "parameterValues" : [ ]
}
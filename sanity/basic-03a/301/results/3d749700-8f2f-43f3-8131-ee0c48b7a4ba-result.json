{"name": "test_wpa2_enterprise_2g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "request = <SubRequest 'setup_profiles' for <Function test_wpa_enterprise_2g[setup_profiles0]>>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7f44a5be05b0>\ntestbed = 'basic-03a', get_equipment_ref = ['706dec0a8a79']\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7f44a5be0340>\nreset_scenario_lf = ''\ninstantiate_profile = <class 'controller.controller_2x.controller.UProfileUtility'>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-03a'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f44a5ba8880>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP6', 'mode': 'wifi5', ...}], 'cont...hy4'], '2.4G-Station-Name': 'sta00', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'sta10', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver, reset_scenario_lf,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info):\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n>           lf_tools.add_vlan(vlan_ids=vlan_list)\n\ne2e/basic/conftest.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lanforge.lf_tools.ChamberView object at 0x7f44a5ba8880>\nvlan_ids = [100]\n\n    def add_vlan(self, vlan_ids=[]):\n        data = self.staConnect.json_get(\"/port/all\")\n        flag = 0\n        for vlans in vlan_ids:\n>           for i in data[\"interfaces\"]:\nE           TypeError: 'NoneType' object is not subscriptable\n\n../libs/lanforge/lf_tools.py:155: TypeError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'VLAN', 'ssid_modes': {'wpa_enterprise': [{'ssid_name': 'ssid_wpa_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100}, {'ssid_name': 'ssid_wpa_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100}], 'wpa2_enterprise': [{'ssid_name': 'ssid_wpa2_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100}, {'ssid_name': 'ssid_wpa2_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100}], 'wpa3_enterprise': [{'ssid_name': 'ssid_wpa3_eap_2g', 'appliedRadios': ['2G'], 'vlan': 100}, {'ssid_name': 'ssid_wpa3_eap_5g', 'appliedRadios': ['5G'], 'vlan': 100}]}, 'rf': {}, 'radius': True}"}], "start": 1635570743505, "stop": 1635570743505, "uuid": "7a430b33-8b45-48fa-8cec-932b7c78e4c9", "historyId": "41ea3e97ee3692a9a6eec34388a17aea", "testCaseId": "cdc464f456d778987311bc652c8c6147", "fullName": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls.TestVLANModeEnterpriseTTLSSuiteOne#test_wpa2_enterprise_2g", "labels": [{"name": "tag", "value": "wpa2_enterprise"}, {"name": "tag", "value": "enterprise"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "ttls"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "vlan"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "sanity_light"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity"}, {"name": "suite", "value": "test_enterprise_ttls"}, {"name": "subSuite", "value": "TestVLANModeEnterpriseTTLSSuiteOne"}, {"name": "host", "value": "testing-301-tj46b"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.vlan_mode.client_connectivity.test_enterprise_ttls"}]}
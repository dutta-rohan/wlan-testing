{"name": "test_wpa2_personal_ssid_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteA object at 0x7f8b567cf970>\nget_vif_state = ['ssid_wpa_eap_2g', 'ssid_wpa_eap_5g', 'ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', 'ssid_wpa3_eap_2g', 'ssid_wpa3_eap_5g', ...]\nget_ap_logs = None\nupdate_report = <testrails.reporting.Reporting object at 0x7f8b54ac1e80>\ntest_cases = [], station_names_fiveg = ['wlan100'], get_lf_logs = None\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f8b54ad2b20>\n\n    @pytest.mark.sanity_light\n    @pytest.mark.wpa2_personal\n    @pytest.mark.fiveg\n    @allure.story('wpa2_personal 5 GHZ Band')\n    def test_wpa2_personal_ssid_5g(self, get_vif_state, get_ap_logs,  update_report, test_cases,\n                                   station_names_fiveg, get_lf_logs,\n                                   lf_test):\n        \"\"\"Client Connectivity wpa2_personal ssid 5G\n           pytest -m \"client_connectivity and bridge and general and wpa2_personal and fiveg\"\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa2\"\n        mode = \"BRIDGE\"\n        band = \"fiveg\"\n        vlan = 1\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes, result = lf_test.Client_Connectivity(ssid=ssid_name, security=security,\n                                                     passkey=security_key, mode=mode, band=band,\n                                                     station_name=station_names_fiveg, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/bridge_mode/client_connectivity/test_general_security_modes.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lanforge.lf_tests.RunTest object at 0x7f8b54ad2b20>\nssid = 'ssid_wpa2_5g_br', passkey = 'something', security = 'wpa2'\nextra_securities = [], station_name = ['wlan100'], mode = 'BRIDGE', vlan_id = 1\nband = 'fiveg'\n\n    def Client_Connectivity(self, ssid=\"[BLANK]\", passkey=\"[BLANK]\", security=\"open\", extra_securities=[],\n                            station_name=[], mode=\"BRIDGE\", vlan_id=1, band=\"twog\"):\n        \"\"\"SINGLE CLIENT CONNECTIVITY using test_connect2.py\"\"\"\n        self.staConnect = StaConnect2(self.lanforge_ip, self.lanforge_port, debug_=self.debug)\n        self.staConnect.sta_mode = 0\n        self.staConnect.upstream_resource = 1\n        if mode == \"BRIDGE\":\n            self.staConnect.upstream_port = self.upstream_port\n        elif mode == \"NAT\":\n            self.staConnect.upstream_port = self.upstream_port\n        else:\n            self.staConnect.upstream_port = self.upstream_port + \".\" + str(vlan_id)\n        if band == \"twog\":\n            self.staConnect.radio = self.twog_radios[0]\n            self.staConnect.sta_prefix = self.twog_prefix\n        if band == \"fiveg\":\n            self.staConnect.radio = self.fiveg_radios[0]\n            self.staConnect.sta_prefix = self.fiveg_prefix\n        self.staConnect.resource = 1\n        self.staConnect.dut_ssid = ssid\n        self.staConnect.dut_passwd = passkey\n        self.staConnect.dut_security = security\n        self.staConnect.station_names = station_name\n        self.staConnect.runtime_secs = 40\n        self.staConnect.bringup_time_sec = 80\n        self.staConnect.cleanup_on_exit = True\n        # self.staConnect.cleanup()\n        self.staConnect.setup(extra_securities=extra_securities)\n        self.staConnect.start()\n        print(\"napping %f sec\" % self.staConnect.runtime_secs)\n        time.sleep(self.staConnect.runtime_secs)\n        for sta_name in self.staConnect.station_names:\n            try:\n                station_data_str = \"\"\n                sta_url = self.staConnect.get_station_url(sta_name)\n                station_info = self.staConnect.json_get(sta_url)\n                for i in station_info[\"interface\"]:\n                    try:\n                        station_data_str = station_data_str + i + \"  :  \" + str(station_info[\"interface\"][i]) + \"\\n\"\n                    except Exception as e:\n                        print(e)\n                allure.attach(name=str(sta_name), body=str(station_data_str))\n            except Exception as e:\n                print(e)\n        self.staConnect.stop()\n        run_results = self.staConnect.get_result_list()\n        if not self.staConnect.passes():\n            if self.debug:\n                for result in run_results:\n                    print(\"test result: \" + result)\n                pytest.exit(\"Test Failed: Debug True\")\n        self.staConnect.cleanup()\n        supplicqant = \"/home/lanforge/wifi/wpa_supplicant_log_\" + self.staConnect.radio.split(\".\")[2] + \".txt\"\n        obj = SCP_File(ip=self.lanforge_ip, port=self.lanforge_ssh_port, username=\"root\", password=\"lanforge\",\n                       remote_path=supplicqant,\n                       local_path=\".\")\n        obj.pull_file()\n        allure.attach.file(source=\"wpa_supplicant_log_\" + self.staConnect.radio.split(\".\")[2] + \".txt\",\n                           name=\"supplicant_log\")\n        for result in run_results:\n            print(\"test result: \" + result)\n        result = True\n        print(\"Client Connectivity :\", self.staConnect.passes)\n        endp_data = []\n        for i in self.staConnect.resulting_endpoints:\n>           endp_data.append(self.staConnect.resulting_endpoints[i][\"endpoint\"])\nE           TypeError: 'NoneType' object is not subscriptable\n\n../libs/lanforge/lf_tests.py:147: TypeError"}, "description": "Client Connectivity wpa2_personal ssid 5G\n           pytest -m \"client_connectivity and bridge and general and wpa2_personal and fiveg\"\n        ", "attachments": [{"name": "supplicant_log", "source": "d36ac725-89bb-4b88-a9d3-48ea8e7b4068-attachment.attach"}, {"name": "log", "source": "db760428-e878-4df0-8d6a-cdc1b1ac89a3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'none'}, {'ssid_name': 'ssid_open_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'none'}], 'wpa': [{'ssid_name': 'ssid_wpa_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk'}, {'ssid_name': 'ssid_wpa_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk'}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1639462894370, "stop": 1639463045996, "uuid": "4ff420fe-e642-4335-b7f5-e083f699ad87", "historyId": "92de83726af0ae8915affc1f4b2a758f", "testCaseId": "cd93f654f2eddf817bed39e62a0aff44", "fullName": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteA#test_wpa2_personal_ssid_5g", "labels": [{"name": "feature", "value": "BRIDGE MODE CLIENT CONNECTIVITY"}, {"name": "story", "value": "wpa2_personal 5 GHZ Band"}, {"name": "subSuite", "value": "Bridge Mode Client Connectivity : Suite-A"}, {"name": "suite", "value": "sanity"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "sudo"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "sanity_light"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "suiteA"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"}, {"name": "host", "value": "testing-142-pk9nk"}, {"name": "thread", "value": "14-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"}]}
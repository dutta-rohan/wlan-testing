{"name": "test_open_ssid_5g[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: 'NoneType' object is not subscriptable", "trace": "self = <tests.e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteA object at 0x7f8b4c3940d0>\nget_vif_state = ['ssid_wpa_eap_2g', 'ssid_wpa_eap_5g', 'ssid_wpa2_eap_2g', 'ssid_wpa2_eap_5g', 'ssid_wpa3_eap_2g', 'ssid_wpa3_eap_5g', ...]\nget_ap_logs = None\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f8b54ad2b20>, test_cases = []\nstation_names_fiveg = ['wlan100'], get_lf_logs = None\nupdate_report = <testrails.reporting.Reporting object at 0x7f8b54ac1e80>\n\n    @pytest.mark.open\n    @pytest.mark.fiveg\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-2801\", name=\"JIRA LINK\")\n    def test_open_ssid_5g(self, get_vif_state, get_ap_logs,  lf_test, test_cases, station_names_fiveg, get_lf_logs,\n                          update_report):\n        \"\"\"Client Connectivity open ssid 5G\n           pytest -m \"client_connectivity and bridge and general and open and fiveg\"\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"open\"][1]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = \"[BLANK]\"\n        security = \"open\"\n        mode = \"BRIDGE\"\n        band = \"fiveg\"\n        vlan = 1\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n>       passes, result = lf_test.Client_Connectivity(ssid=ssid_name, security=security,\n                                                     passkey=security_key, mode=mode, band=band,\n                                                     station_name=station_names_fiveg, vlan_id=vlan)\n\ne2e/basic/validation_of_operating_modes/bridge_mode/client_connectivity/test_general_security_modes.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:110: in Client_Connectivity\n    self.staConnect.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sta_connect2.StaConnect2 object at 0x7f8b4c3b4eb0>\n\n    def start(self):\n        if self.station_profile is None:\n            self._fail(\"Incorrect setup\")\n        pprint.pprint(self.station_profile)\n        if self.station_profile.up is None:\n            self._fail(\"Incorrect station profile, missing profile.up\")\n        if not self.station_profile.up:\n            print(\"\\nBringing ports up...\")\n            data = {\"shelf\": 1,\n                    \"resource\": self.resource,\n                    \"port\": \"ALL\",\n                    \"probe_flags\": 1}\n            self.json_post(\"/cli-json/nc_show_ports\", data)\n            self.station_profile.admin_up()\n            LFUtils.waitUntilPortsAdminUp(self.resource, self.lfclient_url, self.station_names)\n    \n        if self.influx_db:\n            grapher = RecordInflux(_influx_host=self.influx_host,\n                                   _influx_db=self.influx_db,\n                                   _influx_user=self.influx_user,\n                                   _influx_passwd=self.influx_passwd,\n                                   _longevity=1,\n                                   _devices=self.station_names,\n                                   _monitor_interval=1,\n                                   _target_kpi=['bps rx'])\n    \n        # station_info = self.jsonGet(self.mgr_url, \"%s?fields=port,ip,ap\" % (self.getStaUrl()))\n        duration = 0\n        maxTime = self.bringup_time_sec\n        ip = \"0.0.0.0\"\n        ap = \"\"\n        print(\"Waiting for %s stations to associate to AP: \" % len(self.station_names), end=\"\")\n        connected_stations = {}\n        while (len(connected_stations.keys()) < len(self.station_names)) and (duration < maxTime):\n            duration += 3\n            time.sleep(3)\n            print(\".\", end=\"\")\n            for sta_name in self.station_names:\n                sta_url = self.get_station_url(sta_name)\n                station_info = self.json_get(sta_url + \"?fields=port,ip,ap\")\n    \n                # LFUtils.debug_printer.pprint(station_info)\n                if (station_info is not None) and (\"interface\" in station_info):\n                    if \"ip\" in station_info[\"interface\"]:\n                        ip = station_info[\"interface\"][\"ip\"]\n                    if \"ap\" in station_info[\"interface\"]:\n                        ap = station_info[\"interface\"][\"ap\"]\n    \n                if (ap == \"Not-Associated\") or (ap == \"\"):\n                    if self.debug:\n                        print(\" -%s,\" % sta_name, end=\"\")\n                else:\n                    if ip == \"0.0.0.0\":\n                        if self.debug:\n                            print(\" %s (0.0.0.0)\" % sta_name, end=\"\")\n                    else:\n                        connected_stations[sta_name] = sta_url\n            data = {\n                \"shelf\": 1,\n                \"resource\": self.resource,\n                \"port\": \"ALL\",\n                \"probe_flags\": 1\n            }\n            self.json_post(\"/cli-json/nc_show_ports\", data)\n            if self.influx_db:\n                grapher.getdata()\n        LFUtils.wait_until_ports_appear()\n    \n        for sta_name in self.station_names:\n            sta_url = self.get_station_url(sta_name)\n            station_info = self.json_get(sta_url)  # + \"?fields=port,ip,ap\")\n            if station_info is None:\n                print(\"unable to query %s\" % sta_url)\n            self.resulting_stations[sta_url] = station_info\n            try:\n                ap = station_info[\"interface\"][\"ap\"]\n            except Exception as e:\n                print(e)\n                ap = \"NULL\"\n>           ip = station_info[\"interface\"][\"ip\"]\nE           TypeError: 'NoneType' object is not subscriptable\n\n../lanforge/lanforge-scripts/py-scripts/sta_connect2.py:295: TypeError"}, "description": "Client Connectivity open ssid 5G\n           pytest -m \"client_connectivity and bridge and general and open and fiveg\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'ssid_open_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'none'}, {'ssid_name': 'ssid_open_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'none'}], 'wpa': [{'ssid_name': 'ssid_wpa_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk'}, {'ssid_name': 'ssid_wpa_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk'}], 'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g_br', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g_br', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1639462344848, "stop": 1639462450523, "uuid": "1b289945-c8e2-4f23-8460-811ddbeb4a0f", "historyId": "dab1ee8ba71488c10d1777aabc0d133a", "testCaseId": "60ab90bc514b5ab1824c9ed64385bfe7", "fullName": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestBridgeModeConnectivitySuiteA#test_open_ssid_5g", "labels": [{"name": "feature", "value": "BRIDGE MODE CLIENT CONNECTIVITY"}, {"name": "subSuite", "value": "Bridge Mode Client Connectivity : Suite-A"}, {"name": "suite", "value": "sanity"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "ucentral"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "sudo"}, {"name": "tag", "value": "open"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "general"}, {"name": "tag", "value": "client_connectivity"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "suiteA"}, {"name": "parentSuite", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"}, {"name": "host", "value": "testing-142-pk9nk"}, {"name": "thread", "value": "14-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-2801", "name": "JIRA LINK"}]}
{"name": "test_fms_version_list", "status": "failed", "statusDetails": {"message": "AssertionError: assert False not in [False]", "trace": "self = <tests.test_connectivity.TestFMS object at 0x7f58f5758610>\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7f58f56ebbe0>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nget_ap_logs = None\n\n    @pytest.mark.get_firmware_list\n    def test_fms_version_list(self, fixtures_ver, get_configuration, get_ap_logs):\n        PASS = []\n        for ap in get_configuration['access_point']:\n            # get the latest branch\n            firmware_list = fixtures_ver.fw_client.get_firmwares(model=ap['model'],\n                                                                 branch=\"\",\n                                                                 commit_id='',\n                                                                 limit='10000',\n                                                                 offset='3000')\n            firmware_list.reverse()\n            release_list_data = []\n            for i in firmware_list:\n                release_list_data.append(str(i['release']))\n            allure.attach(name=\"firmware_list\", body=str(\"\\n\".join(release_list_data)),\n                          attachment_type=allure.attachment_type.JSON)\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                target_revision_branch = ap['version'].split(\"-\")[-3]\n                flag = True\n                for i in release_list_data:\n                    if target_revision_commit == i.split('-')[-1] and target_revision_branch == i.split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + i)\n                        allure.attach(name='target firmware : ' + ap['version'] + \" is available in FMS : \" + i,\n                                      body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n                break\n            except Exception as e:\n                pass\n    \n            if ap['version'].split('-')[1] == \"latest\":\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        version = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            break\n    \n                    if firmware['release'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                        break\n            else:\n                flag = True\n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        branch = firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1]\n                        commit = ap['version'].split('-')[1]\n                        if branch.__contains__('v2.') and commit == firmware['release'].split('-')[-1]:\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware['release']))\n                            PASS.append(True)\n                            flag = False\n                            break\n                    if ap['version'].split('-')[1] == firmware['release'].split('-')[-1] and ap['version'].split('-')[\n                        0] == \\\n                            firmware['release'].split('-')[-2]:\n                        print('target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release'])\n                        allure.attach(\n                            name='target firmware : ' + ap['version'] + \" is available in FMS : \" + firmware['release']\n                            , body=\"\")\n                        PASS.append(True)\n                        flag = False\n    \n                if flag:\n                    print('target firmware : ' + ap['version'] + \" is not available in FMS : \")\n                    allure.attach(name='target firmware : ' + ap['version'] + \" is not available in FMS : \",\n                                  body=\"\")\n                    PASS.append(False)\n>       assert False not in PASS\nE       assert False not in [False]\n\ntest_connectivity.py:254: AssertionError"}, "attachments": [{"name": "firmwares/limit=10000&deviceType=tp-link_ec420-g1&latestonly=offset=3000", "source": "de17d095-efe9-4c5e-a9c4-b8935082db59-attachment.json", "type": "application/json"}, {"name": "firmware_list", "source": "c206d4a1-1d8e-465d-a17d-c7a43d82bf6d-attachment.json", "type": "application/json"}, {"name": "target firmware : release-v2.4.0-rc2 is not available in FMS : ", "source": "d22db218-a47c-42d0-830f-a80f7367fd44-attachment.attach"}], "start": 1639489920226, "stop": 1639489920501, "uuid": "9e0e768c-990d-409c-ad22-b515f31d9311", "historyId": "625b39bf0168621f7240138f6e718dbc", "testCaseId": "8176af354bbe816e185be2ed00d0a08c", "fullName": "test_connectivity.TestFMS#test_fms_version_list", "labels": [{"name": "tag", "value": "test_resources"}, {"name": "tag", "value": "sanity_55"}, {"name": "tag", "value": "uc_sanity"}, {"name": "tag", "value": "get_firmware_list"}, {"name": "tag", "value": "uc_firmware"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_connectivity"}, {"name": "subSuite", "value": "TestFMS"}, {"name": "host", "value": "testing-146-6gsm7"}, {"name": "thread", "value": "14-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_connectivity"}], "links": [{"type": "test_case", "name": "Firmware Management"}]}
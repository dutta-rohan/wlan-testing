{
  "uid" : "b3aa56703e087b6",
  "name" : "test_firmware_upgrade_request",
  "fullName" : "test_connectivity.TestFMS#test_firmware_upgrade_request",
  "historyId" : "12d337a2c9ca27419cbc831bf70f6bf7",
  "time" : {
    "start" : 1639489931926,
    "stop" : 1639489931926,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "TypeError: string indices must be integers",
  "statusTrace" : "fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7f58f56ebbe0>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\n\n    @pytest.fixture(scope=\"session\")\n    def firmware_upgrade(fixtures_ver, get_apnos, get_configuration):\n>       upgrade_status = fixtures_ver.setup_firmware(get_apnos, get_configuration)\n\nconftest.py:681: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <fixtures_2x.Fixtures_2x object at 0x7f58f56ebbe0>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\nrequest = ''\n\n    def setup_firmware(self, get_apnos, get_configuration, request=\"\"):\n        # Query AP Firmware\n        upgrade_status = []\n        for ap in get_configuration['access_point']:\n    \n            ap_ssh = get_apnos(ap, pwd=\"../libs/apnos/\", sdk=\"2.x\")\n            # If specified as URL\n            try:\n                response = requests.get(ap['version'])\n                print(\"URL is valid and exists on the internet\")\n                allure.attach(name=\"firmware url: \", body=str(ap['version']))\n                target_revision_commit = ap['version'].split(\"-\")[-2]\n                ap_version = ap_ssh.get_ap_version_ucentral()\n                current_version_commit = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                if target_revision_commit in current_version_commit:\n                    continue\n                self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(ap['version']))\n    \n                items = list(range(0, 300))\n                l = len(items)\n                ap_version = ap_ssh.get_ap_version_ucentral()\n                current_version_commit = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                if target_revision_commit in current_version_commit:\n                    upgrade_status.append([ap['serial'], target_revision_commit, current_version_commit])\n                    print(\"Firmware Upgraded to :\", ap_version)\n                else:\n                    print(\"firmware upgraded failed: \", target_revision)\n                    upgrade_status.append([ap['serial'], target_revision_commit, current_version_commit])\n                break\n            except Exception as e:\n                print(\"URL does not exist on Internet\")\n            # else Specified as \"branch-commit_id\" / \"branch-latest\"\n            firmware_url = \"\"\n            ap_version = ap_ssh.get_ap_version_ucentral()\n            response = self.fw_client.get_latest_fw(model=ap[\"model\"])\n            # if the target version specified is \"branch-latest\"\n            if ap['version'].split('-')[1] == \"latest\":\n                # get the latest branch\n                firmware_list = self.fw_client.get_firmwares(model=ap['model'], branch=\"\", commit_id='')\n                firmware_list.reverse()\n    \n                for firmware in firmware_list:\n                    if ap['version'].split('-')[0] == 'release':\n                        if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                            print(\"Target Firmware: \\n\", firmware)\n                            allure.attach(name=\"Target firmware : \", body=str(firmware))\n                            target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\n    \n                            # check the current AP Revision before upgrade\n                            ap_version = ap_ssh.get_ap_version_ucentral()\n                            current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                            # print and report the firmware versions before upgrade\n                            allure.attach(name=\"Before Firmware Upgrade Request: \",\n                                          body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                            print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n    \n                            # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                            if current_version == target_revision:\n                                upgrade_status.append([ap['serial'], target_revision, current_version, 'skip'])\n                                print(\"Skipping Upgrade! AP is already in target version\")\n                                allure.attach(name=\"Skipping Upgrade because AP is already in the target Version\",\n                                              body=\"\")\n                                break\n    \n                            self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(firmware['uri']))\n                            # wait for 300 seconds after firmware upgrade\n                            print(\"waiting for 300 Sec for Firmware Upgrade\")\n                            time.sleep(300)\n    \n                            # check the current AP Revision again\n                            ap_version = ap_ssh.get_ap_version_ucentral()\n                            current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                            # print and report the Firmware versions after upgrade\n                            allure.attach(name=\"After Firmware Upgrade Request: \",\n                                          body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                            print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n                            if current_version == target_revision:\n                                upgrade_status.append([ap['serial'], target_revision, current_version])\n                                print(\"firmware upgraded successfully: \", target_revision)\n                            else:\n                                upgrade_status.append([ap['serial'], target_revision, current_version])\n                                print(\"firmware upgraded failed: \", target_revision)\n                            break\n                    if firmware['image'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                        print(\"Target Firmware: \\n\", firmware)\n                        allure.attach(name=\"Target firmware : \", body=str(firmware))\n    \n                        target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\n    \n                        # check the current AP Revision before upgrade\n                        ap_version = ap_ssh.get_ap_version_ucentral()\n                        current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                        # print and report the firmware versions before upgrade\n                        allure.attach(name=\"Before Firmware Upgrade Request: \",\n                                      body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                        print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n    \n                        # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                        if current_version == target_revision:\n                            upgrade_status.append([ap['serial'], target_revision, current_version, 'skip'])\n                            print(\"Skipping Upgrade! AP is already in target version\")\n                            allure.attach(name=\"Skipping Upgrade because AP is already in the target Version\", body=\"\")\n                            break\n    \n                        self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(firmware['uri']))\n                        # wait for 300 seconds after firmware upgrade\n                        print(\"waiting for 300 Sec for Firmware Upgrade\")\n                        time.sleep(300)\n    \n                        # check the current AP Revision again\n                        ap_version = ap_ssh.get_ap_version_ucentral()\n                        current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                        # print and report the Firmware versions after upgrade\n                        allure.attach(name=\"After Firmware Upgrade Request: \",\n                                      body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                        print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n                        if current_version == target_revision:\n                            upgrade_status.append([ap['serial'], target_revision, current_version])\n                            print(\"firmware upgraded successfully: \", target_revision)\n                        else:\n                            upgrade_status.append([ap['serial'], target_revision, current_version])\n                            print(\"firmware upgraded failed: \", target_revision)\n                        break\n            # if branch-commit is specified\n            else:\n                firmware_list = self.fw_client.get_firmwares(model=ap['model'], branch=\"\", commit_id='')\n                fw_list = []\n                # getting the list of firmwares in fw_list that has the commit id specified as an input\n                for firmware in firmware_list:\n                    if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[-1] == ap['version'].split('-')[\n                        1]:\n                        fw_list.append(firmware)\n    \n                # If there is only 1 commit ID in fw_list\n                if len(fw_list) == 1:\n    \n                    print(\"Target Firmware: \\n\", fw_list[0])\n                    allure.attach(name=\"Target firmware : \", body=str(fw_list[0]))\n    \n                    url = fw_list[0]['uri']\n                    target_revision = fw_list[0]['revision'].split(\"/\")[1].replace(\" \", \"\")\n    \n                    # check the current AP Revision before upgrade\n                    ap_version = ap_ssh.get_ap_version_ucentral()\n                    current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n    \n                    # print and report the firmware versions before upgrade\n                    allure.attach(name=\"Before Firmware Upgrade Request: \",\n                                  body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                    print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n    \n                    # if AP is already in target Version then skip upgrade unless force upgrade is specified\n                    if current_version == target_revision:\n                        upgrade_status.append([ap['serial'], target_revision, current_version, 'skip'])\n                        print(\"Skipping Upgrade! AP is already in target version\")\n                        allure.attach(name=\"Skipping Upgrade because AP is already in the target Version\", body=\"\")\n                        break\n    \n                    # upgrade the firmware in another condition\n                    else:\n                        self.fw_client.upgrade_firmware(serial=ap['serial'], url=str(url))\n    \n                        # wait for 300 seconds after firmware upgrade\n                        print(\"waiting for 300 Sec for Firmware Upgrade\")\n                        time.sleep(300)\n    \n                        # check the current AP Revision again\n                        ap_version = ap_ssh.get_ap_version_ucentral()\n                        current_version = str(ap_version).split(\"/\")[1].replace(\" \", \"\").splitlines()[0]\n                        # print and report the Firmware versions after upgrade\n                        allure.attach(name=\"After Firmware Upgrade Request: \",\n                                      body=\"current revision: \" + current_version + \"\\ntarget revision: \" + target_revision)\n                        print(\"current revision: \", current_version, \"\\ntarget revision: \", target_revision)\n                        if current_version == target_revision:\n                            upgrade_status.append([ap['serial'], target_revision, current_version])\n                            print(\"firmware upgraded successfully: \", target_revision)\n                        else:\n                            upgrade_status.append([ap['serial'], target_revision, current_version])\n                            print(\"firmware upgraded failed: \", target_revision)\n                        break\n    \n                # if there are 1+ firmware images in fw_list then check for branch\n                else:\n                    target_fw = \"\"\n                    for firmware in fw_list:\n                        if ap['version'].split('-')[0] == 'release':\n                            if firmware['revision'].split(\"/\")[1].replace(\" \", \"\").split('-')[1].__contains__('v2.'):\n                                target_fw = firmware\n                                break\n                        if firmware['image'].split(\"-\")[-2] == ap['version'].split('-')[0]:\n                            target_fw = firmware\n                            break\n                    firmware = target_fw\n                    print(\"Target Firmware: \\n\", firmware)\n                    allure.attach(name=\"Target firmware : \", body=str(firmware))\n    \n>                   target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\nE                   TypeError: string indices must be integers\n\nfixtures_2x.py:261: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_apnos",
    "time" : {
      "start" : 1639489872494,
      "stop" : 1639489872494,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1639489872413,
      "stop" : 1639489872414,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_ap_connection_status",
    "time" : {
      "start" : 1639489912844,
      "stop" : 1639489916905,
      "duration" : 4061
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1639489872413,
      "stop" : 1639489872413,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs",
    "time" : {
      "start" : 1639489936137,
      "stop" : 1639489939118,
      "duration" : 2981
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "firmware_upgrade",
    "time" : {
      "start" : 1639489931927,
      "stop" : 1639489935302,
      "duration" : 3375
    },
    "status" : "broken",
    "statusMessage" : "TypeError: string indices must be integers\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/conftest.py\", line 681, in firmware_upgrade\n    upgrade_status = fixtures_ver.setup_firmware(get_apnos, get_configuration)\n  File \"/wlan-testing/tests/fixtures_2x.py\", line 261, in setup_firmware\n    target_revision = firmware['revision'].split(\"/\")[1].replace(\" \", \"\")\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "95b0f573dbd72c6d",
      "name" : "firmwares/limit=10000&deviceType=tp-link_ec420-g1&latestonly=offset=3000",
      "source" : "95b0f573dbd72c6d.json",
      "type" : "application/json",
      "size" : 41199
    }, {
      "uid" : "703ff286e80e0fda",
      "name" : "Target firmware : ",
      "source" : "703ff286e80e0fda.attach",
      "type" : "application/octet-stream",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1639489872414,
      "stop" : 1639489872414,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1639489872414,
      "stop" : 1639489872459,
      "duration" : 45
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1639496418520,
      "stop" : 1639496418521,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1639496418921,
      "stop" : 1639496418921,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_ap_connection_status::0",
    "time" : {
      "start" : 1639496418459,
      "stop" : 1639496418460,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1639496418925,
      "stop" : 1639496418932,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_ap_logs::collect_logs",
    "time" : {
      "start" : 1639489942098,
      "stop" : 1639489952631,
      "duration" : 10533
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "23a4e31cd7002f11",
      "name" : "logread",
      "source" : "23a4e31cd7002f11.attach",
      "type" : "text/plain",
      "size" : 136
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1639496418827,
      "stop" : 1639496418827,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1639496418615,
      "stop" : 1639496418616,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "firmware_upgrade"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "tag",
    "value" : "uc_firmware"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestFMS"
  }, {
    "name" : "host",
    "value" : "testing-146-6gsm7"
  }, {
    "name" : "thread",
    "value" : "14-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Firmware Management",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 7,
        "unknown" : 0,
        "total" : 8
      },
      "items" : [ {
        "uid" : "e557f4fc14b783df",
        "status" : "passed",
        "time" : {
          "start" : 1639461307010,
          "stop" : 1639461307010,
          "duration" : 0
        }
      }, {
        "uid" : "626515f1ffd03988",
        "status" : "passed",
        "time" : {
          "start" : 1639412864572,
          "stop" : 1639412864573,
          "duration" : 1
        }
      }, {
        "uid" : "51c71668258a98d0",
        "status" : "passed",
        "time" : {
          "start" : 1639343916750,
          "stop" : 1639343916750,
          "duration" : 0
        }
      }, {
        "uid" : "b477ff975f912c73",
        "status" : "passed",
        "time" : {
          "start" : 1639256842785,
          "stop" : 1639256842785,
          "duration" : 0
        }
      }, {
        "uid" : "b3c8fc73ea3162bd",
        "status" : "passed",
        "time" : {
          "start" : 1639138282814,
          "stop" : 1639138282814,
          "duration" : 0
        }
      }, {
        "uid" : "b3a91fd9d567301c",
        "status" : "passed",
        "time" : {
          "start" : 1639084309102,
          "stop" : 1639084309102,
          "duration" : 0
        }
      }, {
        "uid" : "60e2d6889fbd0e50",
        "status" : "passed",
        "time" : {
          "start" : 1638804477236,
          "stop" : 1638804477237,
          "duration" : 1
        }
      } ]
    },
    "tags" : [ "test_resources", "sanity_55", "sanity", "firmware_upgrade", "uc_firmware", "uc_sanity" ]
  },
  "source" : "b3aa56703e087b6.json",
  "parameterValues" : [ ]
}
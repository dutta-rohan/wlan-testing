{"name": "test_firmware_upgrade_status_AP", "status": "broken", "statusDetails": {"message": "NameError: Invalid response code.", "trace": "fixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7fe4defd0c10>\nget_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\n\n    @pytest.fixture(scope=\"session\")\n    def firmware_upgrade(fixtures_ver, get_apnos, get_configuration):\n>       upgrade_status = fixtures_ver.setup_firmware(get_apnos, get_configuration)\n\nconftest.py:664: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_2x.py:97: in setup_firmware\n    response = self.fw_client.get_latest_fw(model=ap[\"model\"])\n../libs/controller/controller_2x/controller.py:244: in get_latest_fw\n    device_type = self.ap_model_lookup(model=model)\n../libs/controller/controller_2x/controller.py:227: in ap_model_lookup\n    devices = self.get_device_set()\n../libs/controller/controller_2x/controller.py:255: in get_device_set\n    response = self.sdk_client.request(service=\"fms\", command=\"firmwares/\", method=\"GET\", params=\"deviceSet=true\",\n../libs/controller/controller_2x/controller.py:88: in request\n    self.check_response(method, resp, self.make_headers(), payload, uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\ncmd = 'GET', response = <Response [403]>\nheaders = {'Authorization': 'Bearer a9d1d301106da884a752219fc63d7fec4a9d85e838d189b732554e9fb88f38e2', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://fms-81178859.cicd.lab.wlan.tip.build:16004/api/v1/firmwares/'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:154: NameError"}, "start": 1639256527012, "stop": 1639256527012, "uuid": "85542100-91aa-4470-91e5-af8a28a23903", "historyId": "c25c9c60f60777da99e4fc073b3bb5b8", "testCaseId": "972527930ae62e185e4abf93342c898b", "fullName": "test_connectivity.TestFMS#test_firmware_upgrade_status_AP", "labels": [{"name": "tag", "value": "uc_firmware"}, {"name": "tag", "value": "test_firmware_ap"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "test_resources"}, {"name": "tag", "value": "sanity_55"}, {"name": "tag", "value": "uc_sanity"}, {"name": "suite", "value": "test_connectivity"}, {"name": "subSuite", "value": "TestFMS"}, {"name": "host", "value": "testing-134-vdb7r"}, {"name": "thread", "value": "18-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_connectivity"}], "links": [{"type": "test_case", "name": "Firmware Management"}]}
{"name": "test_controller_connectivity", "status": "broken", "statusDetails": {"message": "NameError: Invalid response code.", "trace": "self = <tests.test_connectivity.TestResources object at 0x7fe4defd0880>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\n\n    @pytest.mark.test_cloud_controller\n    @pytest.mark.uc_sanity\n    @allure.testcase(name=\"test_controller_connectivity\", url=\"\")\n    def test_controller_connectivity(self, setup_controller, get_configuration):\n        \"\"\"Test case to verify cloud Controller Connectivity\"\"\"\n    \n        login_response_json = setup_controller.login_resp.json()\n        response_code = setup_controller.login_resp.status_code\n        request_url = setup_controller.login_resp.request.url\n        print(\"Login_Request_URL: \", str(request_url))\n        allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n        print(\"response_code: \", response_code)\n        allure.attach(name=\"Login Response Code: \", body=str(response_code))\n        print(\"login_response_json: \", login_response_json)\n        allure.attach(name=\"Login Response JSON: \", body=str(setup_controller.login_resp.json()))\n        if response_code != 200:\n            pytest.exit(\n                \"exiting from pytest, login response is no 200: \" + str(setup_controller.login_resp.status_code))\n    \n        gw_system_info = setup_controller.get_system_gw()\n        request_url = gw_system_info.request.url\n        allure.attach(name=\"get_system_gw_request: \", body=str(request_url))\n        gw_system_status = gw_system_info.status_code\n        gw_system_status_json = gw_system_info.json()\n        print(\"gw_status_check response from gateway: \", gw_system_status)\n        allure.attach(name=\"gw_status_check response from gateway: \", body=str(gw_system_status) +\n                                                                           str(gw_system_status_json))\n        if gw_system_status != 200:\n            allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n            pytest.exit(\"gw_status_check response from gateway: \" + str(gw_system_status))\n    \n>       fms_system_info = setup_controller.get_system_fms()\n\ntest_connectivity.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/controller/controller_2x/controller.py:197: in get_system_fms\n    self.check_response(\"GET\", resp, self.make_headers(), \"\", uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\ncmd = 'GET', response = <Response [403]>\nheaders = {'Authorization': 'Bearer a9d1d301106da884a752219fc63d7fec4a9d85e838d189b732554e9fb88f38e2', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://fms-81178859.cicd.lab.wlan.tip.build:16004/api/v1/system/?command=info'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:154: NameError"}, "description": "Test case to verify cloud Controller Connectivity", "attachments": [{"name": "Login_Request_URL: ", "source": "12a1f81d-1ad5-4c32-be61-8ccdeb18f3a1-attachment.attach"}, {"name": "Login Response Code: ", "source": "30d615e7-c97d-42be-a217-711f8077910e-attachment.attach"}, {"name": "Login Response JSON: ", "source": "b522fac2-d3c5-4d75-9ead-4e05412dde2b-attachment.attach"}, {"name": "get_system_gw_request: ", "source": "e18f0cf3-a6d8-4b53-bd79-b14b0cad35a3-attachment.attach"}, {"name": "gw_status_check response from gateway: ", "source": "b3fe5157-b468-4724-b5af-7a1f1b05e355-attachment.attach"}], "start": 1639256497384, "stop": 1639256497428, "uuid": "cb18e0d1-038c-40e9-aaf0-c76e29892c5a", "historyId": "29ddc2cc8da971f63eac960bf88db5ea", "testCaseId": "ddf09b31e4c32be1cdfceb0712bd475e", "fullName": "test_connectivity.TestResources#test_controller_connectivity", "labels": [{"name": "tag", "value": "test_cloud_controller"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "test_resources"}, {"name": "tag", "value": "sanity_55"}, {"name": "tag", "value": "uc_sanity"}, {"name": "suite", "value": "test_connectivity"}, {"name": "subSuite", "value": "TestResources"}, {"name": "host", "value": "testing-134-vdb7r"}, {"name": "thread", "value": "18-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_connectivity"}], "links": [{"type": "test_case", "name": "test_controller_connectivity"}, {"type": "test_case", "name": "Test Resources"}]}
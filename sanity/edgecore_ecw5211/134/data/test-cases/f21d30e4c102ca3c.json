{
  "uid" : "f21d30e4c102ca3c",
  "name" : "test_controller_connectivity",
  "fullName" : "test_connectivity.TestResources#test_controller_connectivity",
  "historyId" : "29ddc2cc8da971f63eac960bf88db5ea",
  "time" : {
    "start" : 1639256497384,
    "stop" : 1639256497428,
    "duration" : 44
  },
  "description" : "Test case to verify cloud Controller Connectivity",
  "descriptionHtml" : "<p>Test case to verify cloud Controller Connectivity</p>\n",
  "status" : "broken",
  "statusMessage" : "NameError: Invalid response code.",
  "statusTrace" : "self = <tests.test_connectivity.TestResources object at 0x7fe4defd0880>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\n\n    @pytest.mark.test_cloud_controller\n    @pytest.mark.uc_sanity\n    @allure.testcase(name=\"test_controller_connectivity\", url=\"\")\n    def test_controller_connectivity(self, setup_controller, get_configuration):\n        \"\"\"Test case to verify cloud Controller Connectivity\"\"\"\n    \n        login_response_json = setup_controller.login_resp.json()\n        response_code = setup_controller.login_resp.status_code\n        request_url = setup_controller.login_resp.request.url\n        print(\"Login_Request_URL: \", str(request_url))\n        allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n        print(\"response_code: \", response_code)\n        allure.attach(name=\"Login Response Code: \", body=str(response_code))\n        print(\"login_response_json: \", login_response_json)\n        allure.attach(name=\"Login Response JSON: \", body=str(setup_controller.login_resp.json()))\n        if response_code != 200:\n            pytest.exit(\n                \"exiting from pytest, login response is no 200: \" + str(setup_controller.login_resp.status_code))\n    \n        gw_system_info = setup_controller.get_system_gw()\n        request_url = gw_system_info.request.url\n        allure.attach(name=\"get_system_gw_request: \", body=str(request_url))\n        gw_system_status = gw_system_info.status_code\n        gw_system_status_json = gw_system_info.json()\n        print(\"gw_status_check response from gateway: \", gw_system_status)\n        allure.attach(name=\"gw_status_check response from gateway: \", body=str(gw_system_status) +\n                                                                           str(gw_system_status_json))\n        if gw_system_status != 200:\n            allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n            pytest.exit(\"gw_status_check response from gateway: \" + str(gw_system_status))\n    \n>       fms_system_info = setup_controller.get_system_fms()\n\ntest_connectivity.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/controller/controller_2x/controller.py:197: in get_system_fms\n    self.check_response(\"GET\", resp, self.make_headers(), \"\", uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\ncmd = 'GET', response = <Response [403]>\nheaders = {'Authorization': 'Bearer a9d1d301106da884a752219fc63d7fec4a9d85e838d189b732554e9fb88f38e2', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://fms-81178859.cicd.lab.wlan.tip.build:16004/api/v1/system/?command=info'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:154: NameError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "add_env_properties",
    "time" : {
      "start" : 1639256464136,
      "stop" : 1639256497382,
      "duration" : 33246
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1639256464012,
      "stop" : 1639256464012,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1639256497382,
      "stop" : 1639256497382,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_sdk_version",
    "time" : {
      "start" : 1639256464062,
      "stop" : 1639256464135,
      "duration" : 73
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver",
    "time" : {
      "start" : 1639256464012,
      "stop" : 1639256464062,
      "duration" : 50
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1639256464011,
      "stop" : 1639256464011,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1639256464136,
      "stop" : 1639256464136,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1639256464011,
      "stop" : 1639256464011,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Test case to verify cloud Controller Connectivity",
    "status" : "broken",
    "statusMessage" : "NameError: Invalid response code.",
    "statusTrace" : "self = <tests.test_connectivity.TestResources object at 0x7fe4defd0880>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\nget_configuration = {'access_point': [{'Backup Location': '', 'Backup Password': '', 'Backup Type': 'File System', 'Backup User': '', ...}...hy4'], '2.4G-Station-Name': 'wlan0', '5G-Radio': ['1.1.wiphy5'], '5G-Station-Name': 'wlan1', ...}, 'name': 'lanforge'}}\n\n    @pytest.mark.test_cloud_controller\n    @pytest.mark.uc_sanity\n    @allure.testcase(name=\"test_controller_connectivity\", url=\"\")\n    def test_controller_connectivity(self, setup_controller, get_configuration):\n        \"\"\"Test case to verify cloud Controller Connectivity\"\"\"\n    \n        login_response_json = setup_controller.login_resp.json()\n        response_code = setup_controller.login_resp.status_code\n        request_url = setup_controller.login_resp.request.url\n        print(\"Login_Request_URL: \", str(request_url))\n        allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n        print(\"response_code: \", response_code)\n        allure.attach(name=\"Login Response Code: \", body=str(response_code))\n        print(\"login_response_json: \", login_response_json)\n        allure.attach(name=\"Login Response JSON: \", body=str(setup_controller.login_resp.json()))\n        if response_code != 200:\n            pytest.exit(\n                \"exiting from pytest, login response is no 200: \" + str(setup_controller.login_resp.status_code))\n    \n        gw_system_info = setup_controller.get_system_gw()\n        request_url = gw_system_info.request.url\n        allure.attach(name=\"get_system_gw_request: \", body=str(request_url))\n        gw_system_status = gw_system_info.status_code\n        gw_system_status_json = gw_system_info.json()\n        print(\"gw_status_check response from gateway: \", gw_system_status)\n        allure.attach(name=\"gw_status_check response from gateway: \", body=str(gw_system_status) +\n                                                                           str(gw_system_status_json))\n        if gw_system_status != 200:\n            allure.attach(name=\"Login_Request_URL: \", body=str(request_url))\n            pytest.exit(\"gw_status_check response from gateway: \" + str(gw_system_status))\n    \n>       fms_system_info = setup_controller.get_system_fms()\n\ntest_connectivity.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/controller/controller_2x/controller.py:197: in get_system_fms\n    self.check_response(\"GET\", resp, self.make_headers(), \"\", uri)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <controller.controller_2x.controller.Controller object at 0x7fe4defd0a60>\ncmd = 'GET', response = <Response [403]>\nheaders = {'Authorization': 'Bearer a9d1d301106da884a752219fc63d7fec4a9d85e838d189b732554e9fb88f38e2', 'Connection': 'keep-alive', 'Keep-Alive': 'timeout=10, max=1000'}\ndata_str = ''\nurl = 'https://fms-81178859.cicd.lab.wlan.tip.build:16004/api/v1/system/?command=info'\n\n    def check_response(self, cmd, response, headers, data_str, url):\n        if response.status_code >= 400:\n            if response.status_code >= 400:\n                print(\"check-response: ERROR, url: \", url)\n            else:\n                print(\"check-response: url: \", url)\n            print(\"Command: \", cmd)\n            print(\"response-status: \", response.status_code)\n            print(\"response-headers: \", response.headers)\n            print(\"response-content: \", response.content)\n            print(\"headers: \", headers)\n            print(\"data-str: \", data_str)\n    \n        if response.status_code >= 400:\n            # if True:\n>           raise NameError(\"Invalid response code.\")\nE           NameError: Invalid response code.\n\n../libs/controller/controller_2x/controller.py:154: NameError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bf251b6604a713ed",
      "name" : "Login_Request_URL: ",
      "source" : "bf251b6604a713ed.attach",
      "type" : "text/plain",
      "size" : 64
    }, {
      "uid" : "eb1dfee9ba3a72ea",
      "name" : "Login Response Code: ",
      "source" : "eb1dfee9ba3a72ea.attach",
      "type" : "text/plain",
      "size" : 3
    }, {
      "uid" : "3e48164f1f0dfcd3",
      "name" : "Login Response JSON: ",
      "source" : "3e48164f1f0dfcd3.attach",
      "type" : "text/plain",
      "size" : 453
    }, {
      "uid" : "474a6efe3b9cdfa7",
      "name" : "get_system_gw_request: ",
      "source" : "474a6efe3b9cdfa7.attach",
      "type" : "text/plain",
      "size" : 77
    }, {
      "uid" : "63b60d048ba49710",
      "name" : "gw_status_check response from gateway: ",
      "source" : "63b60d048ba49710.attach",
      "type" : "text/plain",
      "size" : 325
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1639262985627,
      "stop" : 1639262985627,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1639262985301,
      "stop" : 1639262985301,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::disconnect",
    "time" : {
      "start" : 1639262985301,
      "stop" : 1639262985328,
      "duration" : 27
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_sdk_version::0",
    "time" : {
      "start" : 1639262985350,
      "stop" : 1639262985350,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "fixtures_ver::0",
    "time" : {
      "start" : 1639262985420,
      "stop" : 1639262985420,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1639262985725,
      "stop" : 1639262985725,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1639262985347,
      "stop" : 1639262985347,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1639262985717,
      "stop" : 1639262985717,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "test_cloud_controller"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "test_resources"
  }, {
    "name" : "tag",
    "value" : "sanity_55"
  }, {
    "name" : "tag",
    "value" : "uc_sanity"
  }, {
    "name" : "suite",
    "value" : "test_connectivity"
  }, {
    "name" : "subSuite",
    "value" : "TestResources"
  }, {
    "name" : "host",
    "value" : "testing-134-vdb7r"
  }, {
    "name" : "thread",
    "value" : "18-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_connectivity"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "test_controller_connectivity",
    "type" : "test_case"
  }, {
    "name" : "Test Resources",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "3ae1a31c0cdd3f91",
        "status" : "passed",
        "time" : {
          "start" : 1639138309427,
          "stop" : 1639138309491,
          "duration" : 64
        }
      }, {
        "uid" : "1a52ce355f77f990",
        "status" : "passed",
        "time" : {
          "start" : 1638858588008,
          "stop" : 1638858588058,
          "duration" : 50
        }
      } ]
    },
    "tags" : [ "test_resources", "sanity_55", "sanity", "uc_sanity", "test_cloud_controller" ]
  },
  "source" : "f21d30e4c102ca3c.json",
  "parameterValues" : [ ]
}
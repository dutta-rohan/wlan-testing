{"name": "test_active_version_cloud", "status": "broken", "statusDetails": {"message": "socket.timeout: timed out", "trace": "testbed = 'basic-02', get_apnos = <class 'apnos.apnos.APNOS'>\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\n\n    @pytest.fixture(scope=\"session\")\n    def instantiate_access_point(testbed, get_apnos, get_configuration):\n        \"\"\"setup the access point connectivity\"\"\"\n        for access_point_info in get_configuration['access_point']:\n            if access_point_info[\"jumphost\"]:\n                allure.attach(name=\"added openwrtctl.py to :\",\n                              body=access_point_info['ip'] + \":\" + str(access_point_info[\"port\"]))\n>               get_apnos(access_point_info, pwd=\"../libs/apnos/\")\n\nconftest.py:219: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/apnos/apnos.py:34: in __init__\n    client = self.ssh_cli_connect()\n../libs/apnos/apnos.py:65: in ssh_cli_connect\n    client.connect(self.ip, username=self.username, password=self.password,\n/usr/local/lib/python3.8/site-packages/paramiko/client.py:349: in connect\n    retry_on_signal(lambda: sock.connect(addr))\n/usr/local/lib/python3.8/site-packages/paramiko/util.py:283: in retry_on_signal\n    return function()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   retry_on_signal(lambda: sock.connect(addr))\nE   socket.timeout: timed out\n\n/usr/local/lib/python3.8/site-packages/paramiko/client.py:349: timeout"}, "start": 1626926363376, "stop": 1626926363376, "uuid": "7273fd84-670b-462f-a0aa-26e4a225e36b", "historyId": "571c8b261e41217ee0a5ac4685592fb5", "testCaseId": "94f7ec2a40912008a0b4e49048f1cf05", "fullName": "e2e.basic.test_firmware.TestFirmware#test_active_version_cloud", "labels": [{"name": "tag", "value": "sanity_light"}, {"name": "tag", "value": "firmware_cloud"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "firmware"}, {"name": "tag", "value": "check_active_firmware_cloud"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_test_run')"}, {"name": "parentSuite", "value": "e2e.basic"}, {"name": "suite", "value": "test_firmware"}, {"name": "subSuite", "value": "TestFirmware"}, {"name": "host", "value": "testing-87-sfgqw"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.test_firmware"}], "links": [{"type": "test_case", "url": "firmware upgrade from Cloud", "name": "firmware upgrade from Cloud"}]}
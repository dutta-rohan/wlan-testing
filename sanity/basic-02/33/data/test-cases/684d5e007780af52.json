{
  "uid" : "684d5e007780af52",
  "name" : "test_wpa3_personal_ssid_2g[setup_profiles0]",
  "fullName" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes.TestbridgeModeConnectivitySuiteB#test_wpa3_personal_ssid_2g",
  "historyId" : "cd2b457447fe06067af33ce7c4507a0a",
  "time" : {
    "start" : 1624586222036,
    "stop" : 1624586222036,
    "duration" : 0
  },
  "description" : "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and bridge and general and wpa3_personal and twog\"\n        ",
  "descriptionHtml" : "<p>Client Connectivity open ssid 2.4G\npytest -m &quot;client_connectivity and bridge and general and wpa3_personal and twog&quot;</p>\n",
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa3_personal_ssid_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f885eac0e20>\ntestbed = 'basic-02', setup_vlan = 100, get_equipment_id = [3]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f885c59eb80>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f885e8369d0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n>       ssid_info = ap_ssh.get_ssid_info()\n\ne2e/basic/conftest.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f885c7be7f0>\n\n    def get_ssid_info(self):\n        stdout = self.get_vif_state()\n        ssid_info_list = []\n        info = []\n        for i in stdout.splitlines():\n            ssid = str(i).replace(\" \", \"\").split(\".\")\n            # print(ssid)\n            if ssid[0].split(\":\")[0] == \"b'mac\":\n                mac_info_list = ssid[0].split(\":\")\n                mac_info_list.pop(0)\n                info.append(\":\".join(mac_info_list).replace(\"'\", \"\"))\n            if ssid[0].split(\":\")[0] == \"b'security\":\n>               security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\nE               IndexError: list index out of range\n\n../libs/apnos/apnos.py:150: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_equipment_id",
    "time" : {
      "start" : 1624581125913,
      "stop" : 1624581125994,
      "duration" : 81
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud",
    "time" : {
      "start" : 1624581125994,
      "stop" : 1624581126085,
      "duration" : 91
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware",
    "time" : {
      "start" : 1624581126085,
      "stop" : 1624581126085,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags",
    "time" : {
      "start" : 1624581139180,
      "stop" : 1624581139180,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1624584681652,
      "stop" : 1624584681652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware",
    "time" : {
      "start" : 1624581126085,
      "stop" : 1624581129234,
      "duration" : 3149
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b311981db77f8f28",
      "name" : "APNOS LIbrary: ",
      "source" : "b311981db77f8f28.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "239e4d80ae529758",
      "name" : "openwrt_ctl Setup",
      "source" : "239e4d80ae529758.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "1e77bed90dcd59e0",
      "name" : "get_active_firmware ",
      "source" : "1e77bed90dcd59e0.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1624581123697,
      "stop" : 1624581123697,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "62a98469bd85909a",
      "name" : "Testbed Selected: ",
      "source" : "62a98469bd85909a.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_markers",
    "time" : {
      "start" : 1624581139181,
      "stop" : 1624581139185,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6b358fd1bb1f389c",
      "name" : "Test Cases Requires: ",
      "source" : "6b358fd1bb1f389c.attach",
      "type" : "text/plain",
      "size" : 378
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1624584681652,
      "stop" : 1624584681653,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_profiles",
    "time" : {
      "start" : 1624586222038,
      "stop" : 1624586278200,
      "duration" : 56162
    },
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/basic/conftest.py\", line 573, in setup_profiles\n    ssid_info = ap_ssh.get_ssid_info()\n  File \"/wlan-testing/tests/../libs/apnos/apnos.py\", line 150, in get_ssid_info\n    security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\n",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "c6a356a207fb9918",
      "name" : "RF Profile Created : wifi6",
      "source" : "c6a356a207fb9918.attach",
      "type" : "text/plain",
      "size" : 44
    }, {
      "uid" : "fe7dd6b967080066",
      "name" : "SSID Profile Created",
      "source" : "fe7dd6b967080066.attach",
      "type" : "text/plain",
      "size" : 2819
    }, {
      "uid" : "1cb6f9060ddb0d25",
      "name" : "SSID Profile Created",
      "source" : "1cb6f9060ddb0d25.attach",
      "type" : "text/plain",
      "size" : 2837
    }, {
      "uid" : "1049aab74e9d73d0",
      "name" : "SSID Profile Created",
      "source" : "1049aab74e9d73d0.attach",
      "type" : "text/plain",
      "size" : 2828
    }, {
      "uid" : "95632a7e4fc255fc",
      "name" : "SSID Profile Created",
      "source" : "95632a7e4fc255fc.attach",
      "type" : "text/plain",
      "size" : 2846
    }, {
      "uid" : "533906819e914163",
      "name" : "SSID Profile Created",
      "source" : "533906819e914163.attach",
      "type" : "text/plain",
      "size" : 2831
    }, {
      "uid" : "4fe793c484f8625",
      "name" : "SSID Profile Created",
      "source" : "4fe793c484f8625.attach",
      "type" : "text/plain",
      "size" : 2849
    }, {
      "uid" : "d9abb3eb1ea36d3e",
      "name" : "Equipment AP Profile Created",
      "source" : "d9abb3eb1ea36d3e.attach",
      "type" : "text/plain",
      "size" : 48
    }, {
      "uid" : "509094c0953f953b",
      "name" : "APNOS LIbrary: ",
      "source" : "509094c0953f953b.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "3f93a9b00d62cff5",
      "name" : "openwrt_ctl Setup",
      "source" : "3f93a9b00d62cff5.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "ae9d1930c28afbe0",
      "name" : "vif config Output Msg: ",
      "source" : "ae9d1930c28afbe0.attach",
      "type" : "text/plain",
      "size" : 63
    }, {
      "uid" : "f88822726237c643",
      "name" : "vif config Err Msg: ",
      "source" : "f88822726237c643.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "ea2402cbfa1d3231",
      "name" : "get_vif_config_ssids ",
      "source" : "ea2402cbfa1d3231.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "d53d5948decf2c5a",
      "name" : "vif config Output Msg: ",
      "source" : "d53d5948decf2c5a.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "4e336d6e6deba77a",
      "name" : "vif config Err Msg: ",
      "source" : "4e336d6e6deba77a.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "85f0503f305c62f6",
      "name" : "get_vif_config_ssids ",
      "source" : "85f0503f305c62f6.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "705e44d7bf0a3e2e",
      "name" : "SSID Profiles in VIF Config and Controller: ",
      "source" : "705e44d7bf0a3e2e.attach",
      "type" : "text/plain",
      "size" : 290
    }, {
      "uid" : "13716c8b4e39dd2a",
      "name" : "APNOS LIbrary: ",
      "source" : "13716c8b4e39dd2a.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "d1ba75c59bcbbdfc",
      "name" : "openwrt_ctl Setup",
      "source" : "d1ba75c59bcbbdfc.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "b499d6c1ec6b33e3",
      "name" : "vif state Output Msg: ",
      "source" : "b499d6c1ec6b33e3.attach",
      "type" : "text/plain",
      "size" : 62
    }, {
      "uid" : "7ec8112795c3958b",
      "name" : "vif state Err Msg: ",
      "source" : "7ec8112795c3958b.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "fb0f13e9d8c5409c",
      "name" : "get_vif_state_ssids ",
      "source" : "fb0f13e9d8c5409c.attach",
      "type" : "text/plain",
      "size" : 2
    }, {
      "uid" : "9787a94c739cea3e",
      "name" : "vif config Output Msg: ",
      "source" : "9787a94c739cea3e.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "7f344ee76c39ca40",
      "name" : "vif config Err Msg: ",
      "source" : "7f344ee76c39ca40.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "53a4b7ac414f695c",
      "name" : "get_vif_config_ssids ",
      "source" : "53a4b7ac414f695c.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "eabe85c1395b61d7",
      "name" : "vif state Output Msg: ",
      "source" : "eabe85c1395b61d7.attach",
      "type" : "text/plain",
      "size" : 11482
    }, {
      "uid" : "5d1ed416cc9f9496",
      "name" : "vif state Err Msg: ",
      "source" : "5d1ed416cc9f9496.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "312342df8019d432",
      "name" : "get_vif_state_ssids ",
      "source" : "312342df8019d432.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "60f4920662478777",
      "name" : "vif config Output Msg: ",
      "source" : "60f4920662478777.attach",
      "type" : "text/plain",
      "size" : 10212
    }, {
      "uid" : "ce045bab24e15fd6",
      "name" : "vif config Err Msg: ",
      "source" : "ce045bab24e15fd6.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "922a7fe81549af7e",
      "name" : "get_vif_config_ssids ",
      "source" : "922a7fe81549af7e.attach",
      "type" : "text/plain",
      "size" : 124
    }, {
      "uid" : "6df3ff9668821c45",
      "name" : "SSID Profiles in VIF Config and VIF State: ",
      "source" : "6df3ff9668821c45.attach",
      "type" : "text/plain",
      "size" : 272
    }, {
      "uid" : "a30e6e23f97169e3",
      "name" : "AP LOgs: ",
      "source" : "a30e6e23f97169e3.attach",
      "type" : "text/plain",
      "size" : 68734
    }, {
      "uid" : "7f61b2b71e2ac0b6",
      "name" : "vif state Output Msg: ",
      "source" : "7f61b2b71e2ac0b6.attach",
      "type" : "text/plain",
      "size" : 12194
    }, {
      "uid" : "6817e873d799851f",
      "name" : "vif state Err Msg: ",
      "source" : "6817e873d799851f.attach",
      "type" : "text/plain",
      "size" : 109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 35,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "instantiate_access_point",
    "time" : {
      "start" : 1624581123697,
      "stop" : 1624581125568,
      "duration" : 1871
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "24069d1c850c1c6a",
      "name" : "added openwrtctl.py to :",
      "source" : "24069d1c850c1c6a.attach",
      "type" : "text/plain",
      "size" : 14
    }, {
      "uid" : "c7ae8b65d324aab0",
      "name" : "APNOS LIbrary: ",
      "source" : "c7ae8b65d324aab0.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "f75e93b284150e7c",
      "name" : "openwrt_ctl Setup",
      "source" : "f75e93b284150e7c.attach",
      "type" : "text/plain",
      "size" : 9
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1624581123696,
      "stop" : 1624581123696,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9b65aef754d74456",
      "name" : "Testbed Selected : ",
      "source" : "9b65aef754d74456.attach",
      "type" : "text/plain",
      "size" : 8
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "radius_info",
    "time" : {
      "start" : 1624581142745,
      "stop" : 1624581142746,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "73f50b35c2819db",
      "name" : "Radius server Info: ",
      "source" : "73f50b35c2819db.attach",
      "type" : "text/plain",
      "size" : 126
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_controller",
    "time" : {
      "start" : 1624581125568,
      "stop" : 1624581125912,
      "duration" : 344
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "37bdb198f462d1",
      "name" : "Controller Instantiated: ",
      "source" : "37bdb198f462d1.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_lanforge_data",
    "time" : {
      "start" : 1624584681652,
      "stop" : 1624584681652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1624581139185,
      "stop" : 1624581139590,
      "duration" : 405
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile",
    "time" : {
      "start" : 1624581139180,
      "stop" : 1624581139180,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report",
    "time" : {
      "start" : 1624581132375,
      "stop" : 1624581132375,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1624584681652,
      "stop" : 1624584681652,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases",
    "time" : {
      "start" : 1624581132375,
      "stop" : 1624581132375,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_lanforge_chamberview_dut",
    "time" : {
      "start" : 1624581139591,
      "stop" : 1624581142745,
      "duration" : 3154
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware",
    "time" : {
      "start" : 1624581126085,
      "stop" : 1624581126085,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos",
    "time" : {
      "start" : 1624581123697,
      "stop" : 1624581123697,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware",
    "time" : {
      "start" : 1624581126085,
      "stop" : 1624581126085,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan",
    "time" : {
      "start" : 1624581139180,
      "stop" : 1624581139180,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d51fa100b38b65b0",
      "name" : "VLAN Created: ",
      "source" : "d51fa100b38b65b0.attach",
      "type" : "text/plain",
      "size" : 5
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "instantiate_firmware",
    "time" : {
      "start" : 1624581125912,
      "stop" : 1624581125912,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state",
    "time" : {
      "start" : 1624586337693,
      "stop" : 1624586343843,
      "duration" : 6150
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "171472ab3261e35a",
      "name" : "APNOS LIbrary: ",
      "source" : "171472ab3261e35a.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "16cdd7698870bc7e",
      "name" : "openwrt_ctl Setup",
      "source" : "16cdd7698870bc7e.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "46c625c5f9653054",
      "name" : "vif config Output Msg: ",
      "source" : "46c625c5f9653054.attach",
      "type" : "text/plain",
      "size" : 11145
    }, {
      "uid" : "609b46f352532c51",
      "name" : "vif config Err Msg: ",
      "source" : "609b46f352532c51.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "832ebbbcc18b063c",
      "name" : "get_vif_config_ssids ",
      "source" : "832ebbbcc18b063c.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "b1686ec32414cce7",
      "name" : "vif state Output Msg: ",
      "source" : "b1686ec32414cce7.attach",
      "type" : "text/plain",
      "size" : 12263
    }, {
      "uid" : "5f039d37c361ee6",
      "name" : "vif state Err Msg: ",
      "source" : "5f039d37c361ee6.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "a21f1de348518de4",
      "name" : "get_vif_state_ssids ",
      "source" : "a21f1de348518de4.attach",
      "type" : "text/plain",
      "size" : 118
    }, {
      "uid" : "9729c47f60bc25a3",
      "name" : "vif_state",
      "source" : "9729c47f60bc25a3.attach",
      "type" : "text/plain",
      "size" : 118
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "setup_test_run",
    "time" : {
      "start" : 1624581129234,
      "stop" : 1624581132375,
      "duration" : 3141
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2662b43cfb53090e",
      "name" : "APNOS LIbrary: ",
      "source" : "2662b43cfb53090e.attach",
      "type" : "text/plain",
      "size" : 313
    }, {
      "uid" : "6e38d575fbdc87e6",
      "name" : "openwrt_ctl Setup",
      "source" : "6e38d575fbdc87e6.attach",
      "type" : "text/plain",
      "size" : 9
    }, {
      "uid" : "11268108cf03465f",
      "name" : "get_active_firmware ",
      "source" : "11268108cf03465f.attach",
      "type" : "text/plain",
      "size" : 33
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "description" : "Client Connectivity open ssid 2.4G\n           pytest -m \"client_connectivity and bridge and general and wpa3_personal and twog\"\n        ",
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range",
    "statusTrace" : "request = <SubRequest 'setup_profiles' for <Function test_wpa3_personal_ssid_2g[setup_profiles0]>>\nsetup_controller = <controller.controller.Controller object at 0x7f885eac0e20>\ntestbed = 'basic-02', setup_vlan = 100, get_equipment_id = [3]\ninstantiate_profile = <controller.controller.ProfileUtility object at 0x7f885c59eb80>\nget_markers = {'fiveg': True, 'open': True, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-02'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f885e8369d0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.100', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP2', 'mode': 'wifi6', ...}], 'cont... '2.4G-Station-Name': 'wlan0', '5G-Radio': ['wiphy0', 'wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.10.72', 'name': 'basic-02-Automation-Radius-Profile-BRIDGE', 'password': 'password', 'pk_password': 'whatever', ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\n\n    @allure.feature(\"CLIENT CONNECTIVITY SETUP\")\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, setup_vlan, get_equipment_id,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos):\n        instantiate_profile = instantiate_profile(sdk_client=setup_controller)\n        vlan_id, mode = 0, 0\n        instantiate_profile.cleanup_objects()\n        parameter = dict(request.param)\n        print(parameter)\n        test_cases = {}\n        profile_data = {}\n        if parameter['mode'] not in [\"BRIDGE\", \"NAT\", \"VLAN\"]:\n            print(\"Invalid Mode: \", parameter['mode'])\n            allure.attach(body=parameter['mode'], name=\"Invalid Mode: \")\n            yield test_cases\n    \n        if parameter['mode'] == \"NAT\":\n            mode = \"NAT\"\n            vlan_id = 1\n        if parameter['mode'] == \"BRIDGE\":\n            mode = \"BRIDGE\"\n            vlan_id = 1\n        if parameter['mode'] == \"VLAN\":\n            mode = \"BRIDGE\"\n            vlan_id = setup_vlan\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Equipment-AP-\" + parameter['mode'])\n    \n        profile_data[\"equipment_ap\"] = {\"profile_name\": testbed + \"-Equipment-AP-\" + parameter['mode']}\n        profile_data[\"ssid\"] = {}\n        for i in parameter[\"ssid_modes\"]:\n            profile_data[\"ssid\"][i] = []\n            for j in range(len(parameter[\"ssid_modes\"][i])):\n                profile_name = testbed + \"-SSID-\" + i + \"-\" + str(j) + \"-\" + parameter['mode']\n                data = parameter[\"ssid_modes\"][i][j]\n                data[\"profile_name\"] = profile_name\n                if \"mode\" not in dict(data).keys():\n                    data[\"mode\"] = mode\n                if \"vlan\" not in dict(data).keys():\n                    data[\"vlan\"] = vlan_id\n                instantiate_profile.delete_profile_by_name(profile_name=profile_name)\n                profile_data[\"ssid\"][i].append(data)\n        #         print(profile_name)\n        # print(profile_data)\n    \n        instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n        time.sleep(10)\n        \"\"\"\n          Setting up rf profile\n        \"\"\"\n        rf_profile_data = {\n            \"name\": \"RF-Profile-\" + testbed + \"-\" + parameter['mode'] + \"-\" +\n                    get_configuration['access_point'][0]['mode']\n        }\n    \n        for i in parameter[\"rf\"]:\n            rf_profile_data[i] = parameter['rf'][i]\n        # print(rf_profile_data)\n    \n        try:\n            instantiate_profile.delete_profile_by_name(profile_name=rf_profile_data['name'])\n            instantiate_profile.set_rf_profile(profile_data=rf_profile_data,\n                                               mode=get_configuration['access_point'][0]['mode'])\n            allure.attach(body=str(rf_profile_data),\n                          name=\"RF Profile Created : \" + get_configuration['access_point'][0]['mode'])\n        except Exception as e:\n            print(e)\n            allure.attach(body=str(e), name=\"Exception \")\n    \n        # Radius Profile Creation\n        if parameter[\"radius\"]:\n            radius_info = radius_info\n            radius_info[\"name\"] = testbed + \"-Automation-Radius-Profile-\" + mode\n            instantiate_profile.delete_profile_by_name(profile_name=testbed + \"-Automation-Radius-Profile-\" + mode)\n            try:\n                instantiate_profile.create_radius_profile(radius_info=radius_info)\n                allure.attach(body=str(radius_info),\n                              name=\"Radius Profile Created\")\n                test_cases['radius_profile'] = True\n            except Exception as e:\n                print(e)\n                test_cases['radius_profile'] = False\n    \n        # SSID Profile Creation\n        lf_dut_data = []\n        for mode in profile_data['ssid']:\n            if mode == \"open\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_open_ssid_profile(profile_data=j)\n                                test_cases[\"open_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"open_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_personal_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_personal_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_personal_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_personal_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_personal_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_personal_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n    \n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n    \n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa2_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa2_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa2_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa2_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wpa_wpa2_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa_wpa2_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa_wpa2_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n            if mode == \"wpa3_enterprise_mixed\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wpa3_enterprise_mixed_ssid_profile(\n                                    profile_data=j)\n                                test_cases[\"wpa3_enterprise_mixed_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_mixed_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n    \n            if mode == \"wep\":\n                for j in profile_data[\"ssid\"][mode]:\n                    # print(j)\n                    if mode in get_markers.keys() and get_markers[mode]:\n                        try:\n                            if \"twog\" in get_markers.keys() and get_markers[\"twog\"] and \"is2dot4GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_2g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_2g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n                        try:\n                            if \"fiveg\" in get_markers.keys() and get_markers[\"fiveg\"] and \"is5GHz\" in list(\n                                    j[\"appliedRadios\"]):\n                                lf_dut_data.append(j)\n                                creates_profile = instantiate_profile.create_wep_ssid_profile(profile_data=j)\n                                test_cases[\"wpa3_enterprise_5g\"] = True\n                                allure.attach(body=str(creates_profile),\n                                              name=\"SSID Profile Created\")\n                        except Exception as e:\n                            print(e)\n                            test_cases[\"wpa3_enterprise_5g\"] = False\n                            allure.attach(body=str(e),\n                                          name=\"SSID Profile Creation Failed\")\n        # Equipment AP Profile Creation\n        try:\n            instantiate_profile.set_ap_profile(profile_data=profile_data['equipment_ap'])\n            test_cases[\"equipment_ap\"] = True\n            allure.attach(body=str(profile_data['equipment_ap']),\n                          name=\"Equipment AP Profile Created\")\n        except Exception as e:\n            print(e)\n            test_cases[\"equipment_ap\"] = False\n            allure.attach(body=str(e),\n                          name=\"Equipment AP Profile Creation Failed\")\n    \n        # Push the Equipment AP Profile to AP\n        try:\n            for i in get_equipment_id:\n                instantiate_profile.push_profile_old_method(equipment_id=i)\n        except Exception as e:\n            print(e)\n            print(\"failed to create AP Profile\")\n    \n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n        ssid_names = []\n        for i in instantiate_profile.profile_creation_ids[\"ssid\"]:\n            ssid_names.append(instantiate_profile.get_ssid_name_by_profile_id(profile_id=i))\n        ssid_names.sort()\n    \n        # This loop will check the VIF Config with cloud profile\n        vif_config = []\n        test_cases['vifc'] = False\n        for i in range(0, 18):\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(ssid_names)\n            if ssid_names == vif_config:\n                test_cases['vifc'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"SSID Pushed from Controller: \" + str(ssid_names)),\n                      name=\"SSID Profiles in VIF Config and Controller: \")\n        ap_ssh = get_apnos(get_configuration['access_point'][0], pwd=\"../libs/apnos/\")\n    \n        # This loop will check the VIF Config with VIF State\n        test_cases['vifs'] = False\n        for i in range(0, 18):\n            vif_state = list(ap_ssh.get_vif_state_ssids())\n            vif_state.sort()\n            vif_config = list(ap_ssh.get_vif_config_ssids())\n            vif_config.sort()\n            print(vif_config)\n            print(vif_state)\n            if vif_state == vif_config:\n                test_cases['vifs'] = True\n                break\n            time.sleep(10)\n        allure.attach(body=str(\"VIF Config: \" + str(vif_config) + \"\\n\" + \"VIF State: \" + str(vif_state)),\n                      name=\"SSID Profiles in VIF Config and VIF State: \")\n    \n        ap_logs = ap_ssh.logread()\n        allure.attach(body=ap_logs, name=\"AP LOgs: \")\n>       ssid_info = ap_ssh.get_ssid_info()\n\ne2e/basic/conftest.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f885c7be7f0>\n\n    def get_ssid_info(self):\n        stdout = self.get_vif_state()\n        ssid_info_list = []\n        info = []\n        for i in stdout.splitlines():\n            ssid = str(i).replace(\" \", \"\").split(\".\")\n            # print(ssid)\n            if ssid[0].split(\":\")[0] == \"b'mac\":\n                mac_info_list = ssid[0].split(\":\")\n                mac_info_list.pop(0)\n                info.append(\":\".join(mac_info_list).replace(\"'\", \"\"))\n            if ssid[0].split(\":\")[0] == \"b'security\":\n>               security = ssid[0].split(\":\")[1].split(\",\")[2].replace(\"]\", \"\").replace('\"', \"\").replace(\"'\", \"\")\nE               IndexError: list index out of range\n\n../libs/apnos/apnos.py:150: IndexError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2a320733100ff85a",
      "name" : "log",
      "source" : "2a320733100ff85a.txt",
      "type" : "text/plain",
      "size" : 1319
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_equipment_id::0",
    "time" : {
      "start" : 1624590477505,
      "stop" : 1624590477505,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "check_ap_firmware_cloud::0",
    "time" : {
      "start" : 1624590477485,
      "stop" : 1624590477485,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upload_firmware::0",
    "time" : {
      "start" : 1624590477463,
      "stop" : 1624590477463,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_security_flags::0",
    "time" : {
      "start" : 1624590477432,
      "stop" : 1624590477432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1624590477575,
      "stop" : 1624590477575,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "upgrade_firmware::0",
    "time" : {
      "start" : 1624590477456,
      "stop" : 1624590477456,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1624590477629,
      "stop" : 1624590477629,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_markers::0",
    "time" : {
      "start" : 1624590477421,
      "stop" : 1624590477421,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1624590477445,
      "stop" : 1624590477445,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_access_point::0",
    "time" : {
      "start" : 1624590477550,
      "stop" : 1624590477550,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1624590477670,
      "stop" : 1624590477670,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "radius_info::0",
    "time" : {
      "start" : 1624590477399,
      "stop" : 1624590477399,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::1",
    "time" : {
      "start" : 1624590477542,
      "stop" : 1624590477542,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_controller::teardown_controller",
    "time" : {
      "start" : 1624590477542,
      "stop" : 1624590477544,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "150ccf61916d9cde",
      "name" : "Controller Teardown: ",
      "source" : "150ccf61916d9cde.attach",
      "type" : "text/plain",
      "size" : 182
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "get_lanforge_data::0",
    "time" : {
      "start" : 1624590477449,
      "stop" : 1624590477449,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools::0",
    "time" : {
      "start" : 1624590477415,
      "stop" : 1624590477415,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_profile::0",
    "time" : {
      "start" : 1624590477437,
      "stop" : 1624590477437,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "update_report::0",
    "time" : {
      "start" : 1624590477444,
      "stop" : 1624590477444,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1624590477448,
      "stop" : 1624590477448,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "test_cases::0",
    "time" : {
      "start" : 1624590477445,
      "stop" : 1624590477445,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_latest_firmware::0",
    "time" : {
      "start" : 1624590477479,
      "stop" : 1624590477479,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_apnos::0",
    "time" : {
      "start" : 1624590477574,
      "stop" : 1624590477574,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "should_upgrade_firmware::0",
    "time" : {
      "start" : 1624590477469,
      "stop" : 1624590477469,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_vlan::0",
    "time" : {
      "start" : 1624590477443,
      "stop" : 1624590477443,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "instantiate_firmware::0",
    "time" : {
      "start" : 1624590477516,
      "stop" : 1624590477516,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_vif_state::0",
    "time" : {
      "start" : 1624586768236,
      "stop" : 1624586768236,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_test_run::0",
    "time" : {
      "start" : 1624590477450,
      "stop" : 1624590477450,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "BRIDGE MODE CLIENT CONNECTIVITY"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "open 2.4 GHZ Band"
  }, {
    "name" : "tag",
    "value" : "wpa3_personal"
  }, {
    "name" : "tag",
    "value" : "suiteB"
  }, {
    "name" : "tag",
    "value" : "client_connectivity"
  }, {
    "name" : "tag",
    "value" : "general"
  }, {
    "name" : "tag",
    "value" : "bridge"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "tag",
    "value" : "sanity"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity"
  }, {
    "name" : "suite",
    "value" : "test_general_security_modes"
  }, {
    "name" : "subSuite",
    "value" : "TestbridgeModeConnectivitySuiteB"
  }, {
    "name" : "host",
    "value" : "testing-33-gtxdp"
  }, {
    "name" : "thread",
    "value" : "6-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.basic.validation_of_operating_modes.bridge_mode.client_connectivity.test_general_security_modes"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 2,
        "passed" : 1,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "b73281e333425212",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1624567536849,
          "stop" : 1624567536849,
          "duration" : 0
        }
      }, {
        "uid" : "ac3590ab4a03db3e",
        "status" : "skipped",
        "statusDetails" : "XFAIL reason: SSID NOT AVAILABLE IN VIF STATE\n\n_pytest.outcomes.XFailed: SSID NOT AVAILABLE IN VIF STATE",
        "time" : {
          "start" : 1624568290927,
          "stop" : 1624568290927,
          "duration" : 0
        }
      }, {
        "uid" : "c2a761260df32ace",
        "status" : "passed",
        "time" : {
          "start" : 1624544724958,
          "stop" : 1624544827548,
          "duration" : 102590
        }
      } ]
    },
    "tags" : [ "general", "@pytest.mark.usefixtures('setup_profiles')", "suiteB", "sanity", "client_connectivity", "bridge", "wpa3_personal", "twog" ]
  },
  "source" : "684d5e007780af52.json",
  "parameterValues" : [ "{'mode': 'BRIDGE', 'ssid_modes': {'wpa3_personal': [{'ssid_name': 'ssid_wpa3_p_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa3_personal_mixed': [{'ssid_name': 'ssid_wpa3_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa3_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa3_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa_wpa2_personal_mixed': [{'ssid_name': 'ssid_wpa_wpa2_p_m_2g', 'appliedRadios': ['is2dot4GHz'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa_wpa2_p_m_5g', 'appliedRadios': ['is5GHzU', 'is5GHz', 'is5GHzL'], 'security_key': 'something', 'profile_name': 'basic-02-SSID-wpa_wpa2_personal_mixed-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}, 'rf': {}, 'radius': False}" ]
}
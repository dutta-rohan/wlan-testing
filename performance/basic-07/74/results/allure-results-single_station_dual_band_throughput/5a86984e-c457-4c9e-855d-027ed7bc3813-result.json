{"name": "test_client_wpa2_personal_bridge[setup_profiles0]", "status": "broken", "statusDetails": {"message": "TypeError: a bytes-like object is required, not 'str'", "trace": "self = <apnos.apnos.APNOS object at 0x7f0f03b44a00>\n\n    def get_ucentral_status(self):\n        try:\n            client = self.ssh_cli_connect()\n            cmd = \"ubus call ucentral status\"\n            if self.mode:\n                cmd = f\"cd ~/cicd-git/ && ./openwrt_ctl.py {self.owrt_args} -t {self.tty} --action \" \\\n                      f\"cmd --value \\\"{cmd}\\\" \"\n            stdin, stdout, stderr = client.exec_command(cmd)\n            output = stdout.read()\n            print(output)\n            if 'latest' not in str(output):\n                print(\"ubus call ucentral status: command has invalid output\", str(output))\n                connected, latest, active = \"Error\", \"Error1\", \"Error2\"\n                return connected, latest, active\n            else:\n                connected = False\n                if \"connected\" in output.decode('utf-8').splitlines()[2]:\n                    connected = True\n                # connected = output.decode('utf-8').splitlines()[2]\n>               latest = output.decode('utf-8').splitlines()[3].split(\":\")[1].replace(\" \", \"\").replace(\",\", \"\")\nE               IndexError: list index out of range\n\n../libs/apnos/apnos.py:336: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'setup_profiles' for <Function test_client_wpa2_personal_bridge[setup_profiles0]>>\nsetup_controller = <controller.controller_2x.controller.Controller object at 0x7f0f03c91310>\ntestbed = 'basic-07', get_equipment_ref = ['903cb36ae223']\nfixtures_ver = <fixtures_2x.Fixtures_2x object at 0x7f0f03c91b20>\nreset_scenario_lf = ''\ninstantiate_profile = <class 'controller.controller_2x.controller.UProfileUtility'>\nget_markers = {'fiveg': True, 'open': False, 'radius': False, 'twog': True, ...}\ncreate_lanforge_chamberview_dut = 'basic-07'\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f0f03c91dc0>\nget_security_flags = ['open', 'wpa', 'wep', 'wpa2_personal', 'wpa3_personal', 'wpa3_personal_mixed', ...]\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'sta10', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'sta00', ...}, 'name': 'lanforge'}}\nradius_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1812, ...}\nget_apnos = <class 'apnos.apnos.APNOS'>\nradius_accounting_info = {'ip': '10.10.1.221', 'password': 'password', 'pk_password': 'whatever', 'port': 1813, ...}\n\n    @pytest.fixture(scope=\"class\")\n    def setup_profiles(request, setup_controller, testbed, get_equipment_ref, fixtures_ver, reset_scenario_lf,\n                       instantiate_profile, get_markers, create_lanforge_chamberview_dut, lf_tools,\n                       get_security_flags, get_configuration, radius_info, get_apnos, radius_accounting_info):\n        param = dict(request.param)\n    \n        # VLAN Setup\n        if request.param[\"mode\"] == \"VLAN\":\n    \n            vlan_list = list()\n            refactored_vlan_list = list()\n            ssid_modes = request.param[\"ssid_modes\"].keys()\n            for mode in ssid_modes:\n                for ssid in range(len(request.param[\"ssid_modes\"][mode])):\n                    if \"vlan\" in request.param[\"ssid_modes\"][mode][ssid]:\n                        vlan_list.append(request.param[\"ssid_modes\"][mode][ssid][\"vlan\"])\n                    else:\n                        pass\n            if vlan_list:\n                [refactored_vlan_list.append(x) for x in vlan_list if x not in refactored_vlan_list]\n                vlan_list = refactored_vlan_list\n                for i in range(len(vlan_list)):\n                    if vlan_list[i] > 4095 or vlan_list[i] < 1:\n                        vlan_list.pop(i)\n        if request.param[\"mode\"] == \"VLAN\":\n            lf_tools.add_vlan(vlan_ids=vlan_list)\n    \n        # call this, if 1.x\n>       return_var = fixtures_ver.setup_profiles(request, param, setup_controller, testbed, get_equipment_ref,\n                                                 instantiate_profile,\n                                                 get_markers, create_lanforge_chamberview_dut, lf_tools,\n                                                 get_security_flags, get_configuration, radius_info, get_apnos,\n                                                 radius_accounting_info)\n\ne2e/basic/conftest.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nfixtures_2x.py:559: in setup_profiles\n    connected, latest, active = ap_ssh.get_ucentral_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apnos.apnos.APNOS object at 0x7f0f03b44a00>\n\n    def get_ucentral_status(self):\n        try:\n            client = self.ssh_cli_connect()\n            cmd = \"ubus call ucentral status\"\n            if self.mode:\n                cmd = f\"cd ~/cicd-git/ && ./openwrt_ctl.py {self.owrt_args} -t {self.tty} --action \" \\\n                      f\"cmd --value \\\"{cmd}\\\" \"\n            stdin, stdout, stderr = client.exec_command(cmd)\n            output = stdout.read()\n            print(output)\n            if 'latest' not in str(output):\n                print(\"ubus call ucentral status: command has invalid output\", str(output))\n                connected, latest, active = \"Error\", \"Error1\", \"Error2\"\n                return connected, latest, active\n            else:\n                connected = False\n                if \"connected\" in output.decode('utf-8').splitlines()[2]:\n                    connected = True\n                # connected = output.decode('utf-8').splitlines()[2]\n                latest = output.decode('utf-8').splitlines()[3].split(\":\")[1].replace(\" \", \"\").replace(\",\", \"\")\n                active = output.decode('utf-8').splitlines()[4].split(\":\")[1].replace(\" \", \"\").replace(\",\", \"\")\n            client.close()\n        except Exception as e:\n>           if output.__contains__('\"connected\":'):\nE           TypeError: a bytes-like object is required, not 'str'\n\n../libs/apnos/apnos.py:340: TypeError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_personal_dual_band', 'appliedRadios': ['2G', '5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1635503258528, "stop": 1635503258528, "uuid": "271995f1-fdb7-4631-9d49-5c3a4c1303ed", "historyId": "0ac0c1a9b732ee40047490a6e2755c8b", "testCaseId": "29662ebde328b5a9a808271dbbdcfbb4", "fullName": "e2e.basic.performance_tests.dual_band_performance_test.wpa2_personal.test_bridge_mode.TestDualbandPerformanceBRIDGE#test_client_wpa2_personal_bridge", "labels": [{"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "performance"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "wifi6"}, {"name": "tag", "value": "sss"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "single_station_dual_band_throughput"}, {"name": "tag", "value": "dual_band_test"}, {"name": "tag", "value": "wifi5"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.dual_band_performance_test.wpa2_personal"}, {"name": "suite", "value": "test_bridge_mode"}, {"name": "subSuite", "value": "TestDualbandPerformanceBRIDGE"}, {"name": "host", "value": "perf-1398344923-tp2vn"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.dual_band_performance_test.wpa2_personal.test_bridge_mode"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-3918", "name": "WIFI-3918"}]}
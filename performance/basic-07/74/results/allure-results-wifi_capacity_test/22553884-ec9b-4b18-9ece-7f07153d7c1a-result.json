{"name": "test_client_wpa2_BRIDGE_tcp_dl[setup_profiles0]", "status": "broken", "statusDetails": {"message": "IndexError: list index out of range", "trace": "self = <tests.e2e.basic.performance_tests.wifi_capacity_test.wpa2_personal.test_bridge_mode.TestWifiCapacityBRIDGEModeDualBand object at 0x7f613daf7eb0>\nget_vif_state = ['ssid_wpa2_dual_band', 'ssid_wpa2_dual_band', 'ssid_wpa2_dual_band']\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7f613d930cd0>\nsetup_profiles = {'wpa_2g': True}\nlf_test = <lanforge.lf_tests.RunTest object at 0x7f613d930280>\nstation_names_twog = ['sta1000'], create_lanforge_chamberview_dut = 'basic-07'\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'sta10', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'sta00', ...}, 'name': 'lanforge'}}\n\n    @allure.testcase(url=\"https://telecominfraproject.atlassian.net/browse/WIFI-3926\", name=\"WIFI-3926\")\n    @pytest.mark.tcp_download\n    def test_client_wpa2_BRIDGE_tcp_dl(self, get_vif_state, lf_tools, setup_profiles,\n                                       lf_test, station_names_twog, create_lanforge_chamberview_dut,\n                                       get_configuration):\n        \"\"\" Wifi Capacity Test BRIDGE mode\n            pytest -m \"wifi_capacity_test and BRIDGE and wpa2_personal and twog\"\n        \"\"\"\n        lf_tools.reset_scenario()\n        profile_data = setup_params_general_dual_band[\"ssid_modes\"][\"wpa2_personal\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        mode = \"BRIDGE\"\n        vlan = 1\n        get_vif_state.append(ssid_name)\n        if ssid_name not in get_vif_state:\n            allure.attach(name=\"retest,vif state ssid not available:\", body=str(get_vif_state))\n            pytest.xfail(\"SSID NOT AVAILABLE IN VIF STATE\")\n        lf_tools.add_stations(band=\"2G\", num_stations=\"max\", dut=lf_tools.dut_name, ssid_name=ssid_name)\n        lf_tools.add_stations(band=\"5G\", num_stations=\"max\", dut=lf_tools.dut_name, ssid_name=ssid_name)\n        # lf_tools.add_stations(band=\"ax\", num_stations=\"max\", dut=lf_tools.dut_name, ssid_name=ssid_name)\n        lf_tools.Chamber_View()\n        influx_tags = [\"tcp\", \"download\", \"2.4G-5G Combined\"]\n>       wct_obj = lf_test.wifi_capacity(instance_name=\"test_client_wpa2_BRIDGE_tcp_dl\", mode=mode, vlan_id=vlan,\n                                        download_rate=\"1Gbps\", batch_size=\"1,5,10,20,40,64,128,256\",\n                                        influx_tags=influx_tags,\n                                        upload_rate=\"0\", protocol=\"TCP-IPv4\", duration=\"60000\")\n\ne2e/basic/performance_tests/wifi_capacity_test/wpa2_personal/test_bridge_mode.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:274: in wifi_capacity\n    wificapacity_obj.run()\n../lanforge/lanforge-scripts/py-scripts/lf_wifi_capacity_test.py:478: in run\n    self.create_and_run_test(self.load_old_cfg, self.test_name, self.instance_name,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lf_wifi_capacity_test.WiFiCapacityTest object at 0x7f613d895910>\nload_old_cfg = False, test_name = 'WiFi Capacity'\ninstance_name = 'W86OIXBA31NU', config_name = 'wifi_config', sets = []\npull_report = True, lf_host = '10.28.3.32', lf_user = 'lanforge'\nlf_password = 'lanforge'\ncv_cmds = [\"cv click 'W86OIXBA31NU' 'Interleave Sort'\"]\nlocal_lf_report_dir = '../reports/', ssh_port = 22, graph_groups_file = None\n\n    def create_and_run_test(self, load_old_cfg, test_name, instance_name, config_name, sets,\n                            pull_report, lf_host, lf_user, lf_password, cv_cmds, local_lf_report_dir=\"\", ssh_port=22,\n                            graph_groups_file=None):\n        load_old = \"false\"\n        if load_old_cfg:\n            load_old = \"true\"\n    \n        start_try = 0\n        while True:\n            response = self.create_test(test_name, instance_name, load_old)\n            if response[0][\"LAST\"][\"response\"] == \"OK\":\n                break\n            else:\n                print(\"Could not create test, try: %i/60:\\n\" % (start_try))\n                pprint(response)\n                start_try += 1\n                if start_try > 60:\n                    print(\"ERROR:  Could not start within 60 tries, aborting.\")\n                    exit(1)\n                time.sleep(1)\n    \n        self.load_test_config(config_name, instance_name)\n        self.auto_save_report(instance_name)\n    \n        for kv in sets:\n            cmd = \"cv set '%s' '%s' '%s'\" % (instance_name, kv[0], kv[1])\n            print(\"Running CV set command: \", cmd)\n            self.run_cv_cmd(cmd)\n    \n        for cmd in cv_cmds:\n            print(\"Running CV command: \", cmd)\n            self.run_cv_cmd(cmd)\n    \n        response = self.start_test(instance_name)\n        if response[0][\"LAST\"][\"response\"].__contains__(\"Could not find instance:\"):\n            print(\"ERROR:  start_test failed: \", response[0][\"LAST\"][\"response\"], \"\\n\");\n            # pprint(response)\n            exit(1)\n    \n        not_running = 0\n        while True:\n            cmd = \"cv get_and_close_dialog\"\n            dialog = self.run_cv_cmd(cmd)\n            try:\n                if dialog[0][\"LAST\"][\"response\"] != \"NO-DIALOG\":\n                    print(\"Popup Dialog:\\n\")\n                    print(dialog[0][\"LAST\"][\"response\"])\n            except Exception as e:\n                print(e)\n    \n            check = self.get_report_location(instance_name)\n>           location = json.dumps(check[0][\"LAST\"][\"response\"])\nE           IndexError: list index out of range\n\n../lanforge/lanforge-scripts/py-json/cv_test_manager.py:368: IndexError"}, "description": " Wifi Capacity Test BRIDGE mode\n            pytest -m \"wifi_capacity_test and BRIDGE and wpa2_personal and twog\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_dual_band', 'appliedRadios': ['5G', '2G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1635503723845, "stop": 1635504416382, "uuid": "4bfef101-97e2-45b9-b376-2138683ace6c", "historyId": "fea58fb717f1d844bc9ba089f478c8bc", "testCaseId": "8a3c76ecb23198fbbbfd220f23d26b31", "fullName": "e2e.basic.performance_tests.wifi_capacity_test.wpa2_personal.test_bridge_mode.TestWifiCapacityBRIDGEModeDualBand#test_client_wpa2_BRIDGE_tcp_dl", "labels": [{"name": "feature", "value": "BRIDGE MODE CLIENT CONNECTIVITY"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "dual_band"}, {"name": "tag", "value": "performance"}, {"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "tcp_download"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "tag", "value": "wifi_capacity_test"}, {"name": "tag", "value": "bridge"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.wifi_capacity_test.wpa2_personal"}, {"name": "suite", "value": "test_bridge_mode"}, {"name": "subSuite", "value": "TestWifiCapacityBRIDGEModeDualBand"}, {"name": "host", "value": "perf-1398344923-mkzjp"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.wifi_capacity_test.wpa2_personal.test_bridge_mode"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-3926", "name": "WIFI-3926"}]}
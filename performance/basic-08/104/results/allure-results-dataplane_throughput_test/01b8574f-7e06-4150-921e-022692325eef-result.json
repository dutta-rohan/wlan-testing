{"name": "test_tcp_upd_wpa2_personal_bridge_2g_band_ax_station[setup_profiles0]", "status": "broken", "statusDetails": {"message": "ConnectionResetError: [Errno 104] Connection reset by peer", "trace": "self = <tests.e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security.test_bridge_mode.TestDataplaneThroughputBRIDGE object at 0x7fd79cbb06a0>\nget_vif_state = ['ssid_wpa2_2g', 'ssid_wpa2_5g']\nlf_tools = <lanforge.lf_tools.ChamberView object at 0x7fd79e3e38e0>\nlf_test = <lanforge.lf_tests.RunTest object at 0x7fd79e3f64f0>\nstation_names_ax = ['ax00'], create_lanforge_chamberview_dut = 'basic-08'\nget_configuration = {'access_point': [{'ip': '10.28.3.103', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP5', 'mode': 'wifi6', ...}], 'cont...tation-Name': 'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\n\n    @pytest.mark.wpa2_personal\n    @pytest.mark.twog\n    def test_tcp_upd_wpa2_personal_bridge_2g_band_ax_station(self, get_vif_state, lf_tools,\n                                                  lf_test, station_names_ax, create_lanforge_chamberview_dut,\n                                                  get_configuration):\n        \"\"\"Dataplane THroughput BRIDGE Mode\n           pytest -m \"dataplane_throughput_test and BRIDGE and wpa2_personal and twog\"\n        \"\"\"\n        profile_data = setup_params_general[\"ssid_modes\"][\"wpa2_personal\"][0]\n        ssid_name = profile_data[\"ssid_name\"]\n        security_key = profile_data[\"security_key\"]\n        security = \"wpa2\"\n        mode = \"BRIDGE\"\n        band = \"ax\"\n        vlan = 1\n        dut_name = create_lanforge_chamberview_dut\n    \n>       station = lf_test.Client_Connect(ssid=ssid_name, security=security,\n                                         passkey=security_key, mode=mode, band=band,\n                                         station_name=station_names_ax, vlan_id=vlan)\n\ne2e/basic/performance_tests/dataplane_throughput_test/wpa2_security/test_bridge_mode.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tests.py:312: in Client_Connect\n    self.client_connect.wait_for_ip(station_name)\n../lanforge/lanforge-scripts/py-json/realm.py:651: in wait_for_ip\n    response = super().json_get(\"/port/%s/%s/%s?fields=alias,ip,port+type,ipv6+address\" %\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:276: in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:276: in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:248: in get\n    myresponses.append(request.urlopen(myrequest))\n/usr/local/lib/python3.8/urllib/request.py:222: in urlopen\n    return opener.open(url, data, timeout)\n/usr/local/lib/python3.8/urllib/request.py:525: in open\n    response = self._open(req, data)\n/usr/local/lib/python3.8/urllib/request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n/usr/local/lib/python3.8/urllib/request.py:502: in _call_chain\n    result = func(*args)\n/usr/local/lib/python3.8/urllib/request.py:1383: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n/usr/local/lib/python3.8/urllib/request.py:1358: in do_open\n    r = h.getresponse()\n/usr/local/lib/python3.8/http/client.py:1348: in getresponse\n    response.begin()\n/usr/local/lib/python3.8/http/client.py:316: in begin\n    version, status, reason = self._read_status()\n/usr/local/lib/python3.8/http/client.py:277: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x7fd79c9f0520>\nb = <memory at 0x7fd79e517c40>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               ConnectionResetError: [Errno 104] Connection reset by peer\n\n/usr/local/lib/python3.8/socket.py:669: ConnectionResetError"}, "description": "Dataplane THroughput BRIDGE Mode\n           pytest -m \"dataplane_throughput_test and BRIDGE and wpa2_personal and twog\"\n        ", "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something', 'security': 'psk2'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something', 'security': 'psk2'}]}, 'rf': {}, 'radius': False}"}], "start": 1635766851125, "stop": 1635767509351, "uuid": "73f63c2e-a779-445c-be03-8c780498adf6", "historyId": "d21029216011c82b57ab168353588ab1", "testCaseId": "9806b3fbc4edbc839669ddc1f667ba8c", "fullName": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security.test_bridge_mode.TestDataplaneThroughputBRIDGE#test_tcp_upd_wpa2_personal_bridge_2g_band_ax_station", "labels": [{"name": "feature", "value": "BRIDGE MODE Dataplane Throughput Test"}, {"name": "suite", "value": "performance"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "performance"}, {"name": "tag", "value": "dataplane_throughput_test"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "parentSuite", "value": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security"}, {"name": "subSuite", "value": "TestDataplaneThroughputBRIDGE"}, {"name": "host", "value": "perf-1407641489-254dq"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.basic.performance_tests.dataplane_throughput_test.wpa2_security.test_bridge_mode"}]}
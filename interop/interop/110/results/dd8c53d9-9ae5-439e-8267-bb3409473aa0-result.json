{"name": "test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "request = <FixtureRequest for <Function test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]>>\nprofileDownloadURL = 'https://onboard.almondlabs.net/ttls/AmeriBand-Profile.mobileconfig'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"030213f3-4482-42e9-9371-582775a3eb17\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f41ec055cd0>)\nget_APToMobileDevice_data = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def downloadInstallOpenRoamingProfile(request, profileDownloadURL, setup_perfectoMobile, get_APToMobileDevice_data):\n        print(\"\\n-------------------------------------\")\n        print(\"Download Open Roaming Profile\")\n        print(\"-------------------------------------\")\n    \n        OpenRoamingWifiName = \"\"\n    \n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n        connData = get_APToMobileDevice_data\n        currentResult = True\n        contexts = driver.contexts\n        #print(\"Printing Context\")\n        #print(contexts)\n    \n        driver.switch_to.context('WEBVIEW_1')\n    \n        print(\"Launching Safari with OpenRoaming Profile\")\n        report.step_start(\"Open Roaming Download Page\")\n        driver.get(profileDownloadURL)\n    \n        try:\n            print(\"Accept Popup\")\n            report.step_start(\"Accept Popup\")\n            driver.switch_to.context('NATIVE_APP')\n            WebDriverWait(driver, 40).until(EC.alert_is_present(), 'Time out confirmation popup to appear')\n            alert = driver.switch_to.alert\n            alert.accept()\n            print(\"Alert Accepted\")\n        except TimeoutException:\n            print(\"no alert\")\n    \n        #Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            print(\"Click on downloaded Profile\")\n            report.step_start(\"Click on downloaded Profile\")\n            downloadprofile = driver.find_element_by_xpath(\"//XCUIElementTypeStaticText[@label='Profile Downloaded']\")\n            downloadprofile.click()\n        except NoSuchElementException:\n            print(\"Exception: Click Download Profile Button not showing up in settings\")\n    \n        try:\n            print(\"Install 1st Confirmation\")\n            report.step_start(\"Install 1st Confirmation\")\n            install1stConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install']\")\n            install1stConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 1st Confirmation\")\n    \n        # //*[@label=\"The profile is not signed.\"]\n        try:\n            print(\"Install 2nd Confirmation\")\n            report.step_start(\"Install 2nd Confirmation\")\n            install2ndConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install'] \")\n            install2ndConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 2nd Confirmation\")\n    \n        try:\n            print(\"Install 3rd Confirmation\")\n            report.step_start(\"Install 3rd Confirmation\")\n            install3rdConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install']\")\n            install3rdConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 3rd Confirmation\")\n    \n        try:\n            print(\"Verify Profile Installed\")\n            report.step_start(\"Verify Profile Installed\")\n>           elelSearch2 = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Profile Installed']\")))\n\n../libs/perfecto_libs/iOS_lib.py:628: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"030213f3-4482-42e9-9371-582775a3eb17\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f41ec055d30>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE           at sun.reflect.GeneratedConstructorAccessor501.newInstance (None:-1)\nE           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance (DelegatingConstructorAccessorImpl.java:45)\nE           at java.lang.reflect.Constructor.newInstance (Constructor.java:423)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException (W3CHttpResponseCodec.java:187)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:122)\nE           at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode (W3CHttpResponseCodec.java:49)\nE           at org.openqa.selenium.remote.HttpCommandExecutor.execute (HttpCommandExecutor.java:158)\nE           at io.appium.java_client.remote.AppiumCommandExecutor.execute (AppiumCommandExecutor.java:239)\nE           at org.openqa.selenium.remote.RemoteWebDriver.execute (RemoteWebDriver.java:552)\nE           at io.appium.java_client.DefaultGenericMobileDriver.execute (DefaultGenericMobileDriver.java:41)\nE           at io.appium.java_client.AppiumDriver.execute (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.execute (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:323)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:61)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath (RemoteWebDriver.java:428)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath (DefaultGenericMobileDriver.java:151)\nE           at io.appium.java_client.AppiumDriver.findElementByXPath (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElementByXPath (IOSDriver.java:1)\nE           at org.openqa.selenium.By$ByXPath.findElement (By.java:353)\nE           at org.openqa.selenium.remote.RemoteWebDriver.findElement (RemoteWebDriver.java:315)\nE           at io.appium.java_client.DefaultGenericMobileDriver.findElement (DefaultGenericMobileDriver.java:57)\nE           at io.appium.java_client.AppiumDriver.findElement (AppiumDriver.java:1)\nE           at io.appium.java_client.ios.IOSDriver.findElement (IOSDriver.java:1)\nE           at com.perfectomobile.selenium.server.appium.AppiumIOSDriverWrapper$2.call (AppiumIOSDriverWrapper.java:94)\nE           at com.nexperience.function.execute.ExecuteCallableCommand.process (ExecuteCallableCommand.java:30)\nE           at com.nexperience.engine.script.command.AbstractScriptCommand.doExecute (AbstractScriptCommand.java:173)\nE           at com.nexperience.engine.script.command.ScriptCommandBase.execute (ScriptCommandBase.java:105)\nE           at com.nexperience.engine.script.tcl.event.CommandTclEvent.processEvent (CommandTclEvent.java:43)\nE           at com.nexperience.engine.script.tcl.event.MaseTclEvent.processEvent (MaseTclEvent.java:56)\nE           at tcl.lang.Notifier.serviceEvent (Notifier.java:457)\nE           at tcl.lang.Notifier.doOneEvent (Notifier.java:610)\nE           at tcl.lang.Notifier.processTclEvents (Notifier.java:786)\nE           at com.nexperience.engine.script.tcl.event.TclEventProcessor.start (TclEventProcessor.java:80)\nE           at com.nexperience.engine.script.tcl.TclInterpreter.startEventProcessing (TclInterpreter.java:552)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:85)\nE           at com.nexperience.engine.script.execution.step.StepExecutionEventProcessor.callImpl (StepExecutionEventProcessor.java:21)\nE           at com.nexperience.util.thread.WrappedCallable.call (WrappedCallable.java:31)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:266)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)\nE           at java.lang.Thread.run (Thread.java:748)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.e2e.interOp.iOS.OpenRoamingPassPoint.test_OpenRoaming_BridgeMode.TestOpenRoamingBridge object at 0x7f41ef4cb5b0>\npasspoint_profile_info = {'access_network': {'Access Network Type': 'Free Public Network', 'Authentication Type': 'Acceptance of Terms & Condit...e': 'Disabled'}, 'allowed_ssids': [21637, 21638, 21639, 21640], 'hessid': None, 'interworking_hs2dot0': 'Enabled', ...}\npush_ap_profile = {'equipment_ap': {'sdk': True}, 'passpoint_profile_download': {'vif_config': True, 'vif_state': True}, 'ssid_wpa2_eap_passpoint_2g': {'vif_config': True, 'vif_state': True}}\nrequest = <FixtureRequest for <Function test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]>>\nget_APToMobileDevice_data = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\nsetup_perfectoMobile_iOS = (<appium.webdriver.webdriver.WebDriver (session=\"030213f3-4482-42e9-9371-582775a3eb17\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f41ec055cd0>)\n\n    @pytest.mark.wpa2_eap\n    @pytest.mark.twog\n    @pytest.mark.parametrize(\n        'push_ap_profile',\n        [{\"ssid_names\": [\"ssid_wpa2_eap_passpoint_2g\", \"passpoint_profile_download\"]}],\n        indirect=True,\n        scope=\"function\"\n    )\n    @pytest.mark.usefixtures(\"push_ap_profile\")\n    def test_OpenRoaming_2g_WPA2_EAP_BRIDGE(self, passpoint_profile_info, push_ap_profile, request, get_APToMobileDevice_data, setup_perfectoMobile_iOS):\n    \n        result = push_ap_profile['ssid_wpa2_eap_passpoint_2g']['vif_config']\n        if result:\n            allure.attach(name=\"Config push to AP for ssid_wpa2_eap_passpoint_2g successful \", body=\"\")\n        else:\n            allure.attach(name=\"Config push to AP for ssid_wpa2_eap_passpoint_2g failed\", body=\"\")\n        assert result\n        result = push_ap_profile['ssid_wpa2_eap_passpoint_2g']['vif_state']\n        if result:\n            allure.attach(name=\"Config apply to AP for ssid_wpa2_eap_passpoint_2g successful \", body=\"\")\n        else:\n            allure.attach(name=\"Config apply to AP for ssid_wpa2_eap_passpoint_2g failed\", body=\"\")\n        assert result\n    \n        print(\"SSID to download profile :: \", setup_params_eap[\"ssid_modes\"][\"open\"][0][\"ssid_name\"])\n        print(\"SSID to validate connectivity :: \", setup_params_eap[\"ssid_modes\"][\"wpa2_eap\"][0][\"ssid_name\"])\n        print(\"Profile download URL :: \", passpoint_profile_info[\"profile_download_url_ios\"])\n        print(\"Profile name to remove :: \", passpoint_profile_info[\"profile_name_on_device\"])\n    \n        report = setup_perfectoMobile_iOS[1]\n        driver = setup_perfectoMobile_iOS[0]\n        connData = get_APToMobileDevice_data\n    \n        downloadProfileSSID = setup_params_eap[\"ssid_modes\"][\"open\"][0][\"ssid_name\"]\n        downloadProfileSSIDPass = \"\"\n        #profileDownloadURL = passpoint_profile_info[\"profile_download_url_ios\"]\n        profileDownloadURL = \"https://onboard.almondlabs.net/ttls/AmeriBand-Profile.mobileconfig\"\n        profileName = passpoint_profile_info[\"profile_name_on_device\"]\n        profileNameSSID = setup_params_eap[\"ssid_modes\"][\"wpa2_eap\"][1][\"ssid_name\"]\n    \n        #Delete Profile Under Settings\n        deleteOpenRoamingInstalledProfile(request, profileName, setup_perfectoMobile_iOS, connData)\n    \n        #Set Wifi/AP Mode\n        set_APconnMobileDevice_iOS(request, downloadProfileSSID, downloadProfileSSIDPass, setup_perfectoMobile_iOS, connData)\n    \n        #Install Profile\n>       downloadInstallOpenRoamingProfile(request, profileDownloadURL, setup_perfectoMobile_iOS, connData)\n\ne2e/interOp/iOS/OpenRoamingPassPoint/test_OpenRoaming_BridgeMode.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <FixtureRequest for <Function test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]>>\nprofileDownloadURL = 'https://onboard.almondlabs.net/ttls/AmeriBand-Profile.mobileconfig'\nsetup_perfectoMobile = (<appium.webdriver.webdriver.WebDriver (session=\"030213f3-4482-42e9-9371-582775a3eb17\")>, <perfecto.client.PerfectoReportiumClient.PerfectoReportiumClient object at 0x7f41ec055cd0>)\nget_APToMobileDevice_data = {'BtnRunSpeedTest': \"//*[text()='RUN SPEED TEST']\", 'UploadMbps': \"//*[@id='knowledge-verticals-internetspeedtest__upl...[@class='spiqle']\", 'appPackage-android': 'com.android.settings', 'bundleId-iOS-Safari': 'com.apple.mobilesafari', ...}\n\n    def downloadInstallOpenRoamingProfile(request, profileDownloadURL, setup_perfectoMobile, get_APToMobileDevice_data):\n        print(\"\\n-------------------------------------\")\n        print(\"Download Open Roaming Profile\")\n        print(\"-------------------------------------\")\n    \n        OpenRoamingWifiName = \"\"\n    \n        report = setup_perfectoMobile[1]\n        driver = setup_perfectoMobile[0]\n        connData = get_APToMobileDevice_data\n        currentResult = True\n        contexts = driver.contexts\n        #print(\"Printing Context\")\n        #print(contexts)\n    \n        driver.switch_to.context('WEBVIEW_1')\n    \n        print(\"Launching Safari with OpenRoaming Profile\")\n        report.step_start(\"Open Roaming Download Page\")\n        driver.get(profileDownloadURL)\n    \n        try:\n            print(\"Accept Popup\")\n            report.step_start(\"Accept Popup\")\n            driver.switch_to.context('NATIVE_APP')\n            WebDriverWait(driver, 40).until(EC.alert_is_present(), 'Time out confirmation popup to appear')\n            alert = driver.switch_to.alert\n            alert.accept()\n            print(\"Alert Accepted\")\n        except TimeoutException:\n            print(\"no alert\")\n    \n        #Open Settings Application\n        openApp(connData[\"bundleId-iOS-Settings\"], setup_perfectoMobile)\n    \n        try:\n            print(\"Click on downloaded Profile\")\n            report.step_start(\"Click on downloaded Profile\")\n            downloadprofile = driver.find_element_by_xpath(\"//XCUIElementTypeStaticText[@label='Profile Downloaded']\")\n            downloadprofile.click()\n        except NoSuchElementException:\n            print(\"Exception: Click Download Profile Button not showing up in settings\")\n    \n        try:\n            print(\"Install 1st Confirmation\")\n            report.step_start(\"Install 1st Confirmation\")\n            install1stConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install']\")\n            install1stConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 1st Confirmation\")\n    \n        # //*[@label=\"The profile is not signed.\"]\n        try:\n            print(\"Install 2nd Confirmation\")\n            report.step_start(\"Install 2nd Confirmation\")\n            install2ndConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install'] \")\n            install2ndConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 2nd Confirmation\")\n    \n        try:\n            print(\"Install 3rd Confirmation\")\n            report.step_start(\"Install 3rd Confirmation\")\n            install3rdConf = driver.find_element_by_xpath(\"//XCUIElementTypeButton[@label='Install']\")\n            install3rdConf.click()\n        except NoSuchElementException:\n            print(\"Exception: Install 3rd Confirmation\")\n    \n        try:\n            print(\"Verify Profile Installed\")\n            report.step_start(\"Verify Profile Installed\")\n            elelSearch2 = WebDriverWait(driver, 30).until(EC.presence_of_element_located((MobileBy.XPATH, \"//*[@label='Profile Installed']\")))\n            elelSearch2.click()\n        except Exception as e:\n            print(\"Profile Installed Message Error\")\n            request.config.cache.set(key=\"SelectingWifiFailed\", value=str(e))\n>           assert False\nE           AssertionError\n\n../libs/perfecto_libs/iOS_lib.py:633: AssertionError"}, "attachments": [{"name": "Config push to AP for ssid_wpa2_eap_passpoint_2g successful ", "source": "edc5204b-1b5c-4b9a-a9ea-9b0174e5cb1c-attachment.attach"}, {"name": "Config apply to AP for ssid_wpa2_eap_passpoint_2g successful ", "source": "b9314cd3-ca6b-4c1e-9cea-eb3ded5b7b38-attachment.attach"}, {"name": "log", "source": "9cbdd65a-3dc7-46b7-a3dd-fa24a0612a3d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "push_ap_profile", "value": "{'ssid_names': ['passpoint_profile_download', 'ssid_wpa2_eap_passpoint_2g']}"}, {"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'passpoint_profile_download', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-open-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_eap': [{'ssid_name': 'ssid_wpa2_eap_passpoint_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-wpa2_eap-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_eap_passpoint_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'interop-SSID-wpa2_eap-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_only_eap': [{'ssid_name': 'ssid_wpa2_only_eap_passpoint_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-wpa2_only_eap-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_only_eap_passpoint_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'interop-SSID-wpa2_only_eap-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}}"}], "start": 1627959378029, "stop": 1627959547219, "uuid": "66157ba0-9ef8-4498-8dd8-f217035e2faf", "historyId": "f10713e83fde7dc0a8c85549caec105c", "testCaseId": "9f74bebe7031058f8d4919148c141d96", "fullName": "e2e.interOp.iOS.OpenRoamingPassPoint.test_OpenRoaming_BridgeMode.TestOpenRoamingBridge#test_OpenRoaming_2g_WPA2_EAP_BRIDGE", "labels": [{"name": "feature", "value": "BRIDGE MODE EAP PASSPOINT SETUP"}, {"name": "tag", "value": "ios"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "@pytest.mark.usefixtures('push_ap_profile')"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "interop"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "openRoaming"}, {"name": "tag", "value": "wpa2_eap"}, {"name": "tag", "value": "interop_ios"}, {"name": "parentSuite", "value": "e2e.interOp.iOS.OpenRoamingPassPoint"}, {"name": "suite", "value": "test_OpenRoaming_BridgeMode"}, {"name": "subSuite", "value": "TestOpenRoamingBridge"}, {"name": "host", "value": "interop-ci-110-ios-5l72x"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.iOS.OpenRoamingPassPoint.test_OpenRoaming_BridgeMode"}]}
{"name": "test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: I/O error on POST request for \"http://X.X.X.X:8080/nexperience/perfectomobile/wd/hub/session\": Connect to X.X.X.X:8080 [/X.X.X.X] failed: Connection refused (Connection refused); nested exception is org.apache.http.conn.HttpHostConnectException: Connect to X.X.X.X:8080 [/X.X.X.X] failed: Connection refused (Connection refused)", "trace": "request = <SubRequest 'setup_perfectoMobile_iOS' for <Function test_OpenRoaming_2g_WPA2_EAP_BRIDGE[push_ap_profile0-setup_profiles0]>>\n\n    @pytest.fixture(scope=\"function\")\n    def setup_perfectoMobile_iOS(request):\n        from appium import webdriver\n        driver = None\n        reporting_client = None\n    \n        warnings.simplefilter(\"ignore\", ResourceWarning)\n        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    \n        capabilities = {\n                'platformName': request.config.getini(\"platformName-iOS\"),\n                'model': request.config.getini(\"model-iOS\"),\n                'browserName': 'safari',\n                #'automationName' : 'Appium',\n                'securityToken' : request.config.getini(\"securityToken\"),\n                'useAppiumForWeb' : 'false',\n                'autoAcceptAlerts' : 'true',\n                #'bundleId' : request.config.getini(\"bundleId-iOS\"),\n                'useAppiumForHybrid' : 'false',\n        }\n    \n>       driver = webdriver.Remote('https://'+request.config.getini(\"perfectoURL\")+'.perfectomobile.com/nexperience/perfectomobile/wd/hub', capabilities)\n\ne2e/interOp/conftest.py:884: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/site-packages/appium/webdriver/webdriver.py:156: in __init__\n    super().__init__(\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\n/usr/local/lib/python3.8/site-packages/appium/webdriver/webdriver.py:226: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, parameters)\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f322c7a9520>\nresponse = {'status': 500, 'value': '{\"status\":33,\"value\":{\"message\":\"I/O error on POST request for \\\\\"http://X.X.X.X:8080/nexper....conn.HttpHostConnectException: Connect to X.X.X.X:8080 [/X.X.X.X] failed: Connection refused (Connection refused)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: I/O error on POST request for \"http://X.X.X.X:8080/nexperience/perfectomobile/wd/hub/session\": Connect to X.X.X.X:8080 [/X.X.X.X] failed: Connection refused (Connection refused); nested exception is org.apache.http.conn.HttpHostConnectException: Connect to X.X.X.X:8080 [/X.X.X.X] failed: Connection refused (Connection refused)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: SessionNotCreatedException"}, "parameters": [{"name": "push_ap_profile", "value": "{'ssid_names': ['passpoint_profile_download', 'ssid_wpa2_eap_passpoint_2g']}"}, {"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'open': [{'ssid_name': 'passpoint_profile_download', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-open-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_eap': [{'ssid_name': 'ssid_wpa2_eap_passpoint_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-wpa2_eap-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_eap_passpoint_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'interop-SSID-wpa2_eap-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}], 'wpa2_only_eap': [{'ssid_name': 'ssid_wpa2_only_eap_passpoint_2g', 'appliedRadios': ['is2dot4GHz'], 'profile_name': 'interop-SSID-wpa2_only_eap-0-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}, {'ssid_name': 'ssid_wpa2_only_eap_passpoint_5g', 'appliedRadios': ['is5GHz'], 'profile_name': 'interop-SSID-wpa2_only_eap-1-BRIDGE', 'mode': 'BRIDGE', 'vlan': 1}]}}"}], "start": 1629609538931, "stop": 1629609538931, "uuid": "156190d2-6d0b-4769-9a2d-b7cf20c87d6b", "historyId": "f10713e83fde7dc0a8c85549caec105c", "testCaseId": "9f74bebe7031058f8d4919148c141d96", "fullName": "e2e.interOp.iOS.OpenRoamingPassPoint.test_OpenRoaming_BridgeMode.TestOpenRoamingBridge#test_OpenRoaming_2g_WPA2_EAP_BRIDGE", "labels": [{"name": "feature", "value": "BRIDGE MODE EAP PASSPOINT SETUP"}, {"name": "tag", "value": "openRoaming"}, {"name": "tag", "value": "ios"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "wpa2_eap"}, {"name": "tag", "value": "twog"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "interop_ios"}, {"name": "tag", "value": "@pytest.mark.usefixtures('push_ap_profile')"}, {"name": "tag", "value": "interop"}, {"name": "parentSuite", "value": "e2e.interOp.iOS.OpenRoamingPassPoint"}, {"name": "suite", "value": "test_OpenRoaming_BridgeMode"}, {"name": "subSuite", "value": "TestOpenRoamingBridge"}, {"name": "host", "value": "interop-ci-168-ios-dmf6f"}, {"name": "thread", "value": "6-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.interOp.iOS.OpenRoamingPassPoint.test_OpenRoaming_BridgeMode"}]}
{"name": "test_nss2_wpa2_personal_5g_10db_60degree[setup_profiles0]", "status": "broken", "statusDetails": {"message": "OSError: [Errno 113] No route to host", "trace": "get_configuration = {'access_point': [{'ip': '10.28.3.102', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi6', ...}], 'cont...'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3', '1.1.wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\ntestbed = 'advanced-02'\n\n    @pytest.fixture(scope=\"session\")\n    def lf_tools(get_configuration, testbed):\n>       lf_tools_obj = ChamberView(lanforge_data=get_configuration['traffic_generator']['details'],\n                                   access_point_data=get_configuration['access_point'],\n                                   testbed=testbed)\n\ne2e/advanced/conftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tools.py:110: in __init__\n    self.CreateDut = DUT(lfmgr=self.lanforge_ip,\n../lanforge/lanforge-scripts/py-scripts/create_chamberview_dut.py:91: in __init__\n    self.cv_test = cvtest(lfmgr, port)\n../lanforge/lanforge-scripts/py-json/cv_test_manager.py:91: in __init__\n    super().__init__(lfclient_host=lfclient_host,\n../lanforge/lanforge-scripts/py-json/realm.py:112: in __init__\n    self.check_connect()\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:363: in check_connect\n    response = self.json_get(\"/\", debug_=self.debug)\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:276: in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:276: in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:248: in get\n    myresponses.append(request.urlopen(myrequest))\n/usr/local/lib/python3.8/urllib/request.py:222: in urlopen\n    return opener.open(url, data, timeout)\n/usr/local/lib/python3.8/urllib/request.py:525: in open\n    response = self._open(req, data)\n/usr/local/lib/python3.8/urllib/request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n/usr/local/lib/python3.8/urllib/request.py:502: in _call_chain\n    result = func(*args)\n/usr/local/lib/python3.8/urllib/request.py:1383: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n/usr/local/lib/python3.8/urllib/request.py:1358: in do_open\n    r = h.getresponse()\n/usr/local/lib/python3.8/http/client.py:1348: in getresponse\n    response.begin()\n/usr/local/lib/python3.8/http/client.py:316: in begin\n    version, status, reason = self._read_status()\n/usr/local/lib/python3.8/http/client.py:277: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <socket.SocketIO object at 0x7fd6284c2100>\nb = <memory at 0x7fd628533ac0>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               OSError: [Errno 113] No route to host\n\n/usr/local/lib/python3.8/socket.py:669: OSError"}, "parameters": [{"name": "setup_profiles", "value": "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}"}], "start": 1637700923955, "stop": 1637700923955, "uuid": "e6fc3a5d-7886-474d-830c-0a129044c0b4", "historyId": "7e5ac2e683b2d7b0b278e0756a4ca41b", "testCaseId": "2fba51c4ec75b402c13c258fb6ef7a03", "fullName": "e2e.advanced.spatial_consistency.wpa2_personal.test_bridge_spatial.Test_SpatialConsistency_Bridge#test_nss2_wpa2_personal_5g_10db_60degree", "labels": [{"name": "tag", "value": "fiveg"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_profiles')"}, {"name": "tag", "value": "advance"}, {"name": "tag", "value": "degree60_nss2_10db"}, {"name": "tag", "value": "spatial_consistency"}, {"name": "tag", "value": "bridge"}, {"name": "tag", "value": "wpa2_personal"}, {"name": "parentSuite", "value": "e2e.advanced.spatial_consistency.wpa2_personal"}, {"name": "suite", "value": "test_bridge_spatial"}, {"name": "subSuite", "value": "Test_SpatialConsistency_Bridge"}, {"name": "host", "value": "advanced-ci-8-wx95n"}, {"name": "thread", "value": "7-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "e2e.advanced.spatial_consistency.wpa2_personal.test_bridge_spatial"}], "links": [{"type": "test_case", "url": "https://telecominfraproject.atlassian.net/browse/WIFI-5064", "name": "WIFI-5064"}]}
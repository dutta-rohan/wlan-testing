{
  "uid" : "4a046be3fc2fae37",
  "name" : "test_nss2_wpa2_personal_2g_10db_0degree[setup_profiles0]",
  "fullName" : "e2e.advanced.spatial_consistency.wpa2_personal.test_bridge_spatial.Test_SpatialConsistency_Bridge#test_nss2_wpa2_personal_2g_10db_0degree",
  "historyId" : "f36c7797881bfdface6695c03df56931",
  "time" : {
    "start" : 1637699911869,
    "stop" : 1637699911869,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "http.client.RemoteDisconnected: Remote end closed connection without response",
  "statusTrace" : "get_configuration = {'access_point': [{'ip': '10.28.3.102', 'jumphost': True, 'jumphost_tty': '/dev/ttyAP3', 'mode': 'wifi6', ...}], 'cont...'wlan0', '5G-Radio': ['1.1.wiphy1', '1.1.wiphy3', '1.1.wiphy5'], '5G-Station-Name': 'wlan0', ...}, 'name': 'lanforge'}}\ntestbed = 'advanced-01'\n\n    @pytest.fixture(scope=\"session\")\n    def lf_tools(get_configuration, testbed):\n>       lf_tools_obj = ChamberView(lanforge_data=get_configuration['traffic_generator']['details'],\n                                   access_point_data=get_configuration['access_point'],\n                                   testbed=testbed)\n\ne2e/advanced/conftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../libs/lanforge/lf_tools.py:110: in __init__\n    self.CreateDut = DUT(lfmgr=self.lanforge_ip,\n../lanforge/lanforge-scripts/py-scripts/create_chamberview_dut.py:91: in __init__\n    self.cv_test = cvtest(lfmgr, port)\n../lanforge/lanforge-scripts/py-json/cv_test_manager.py:91: in __init__\n    super().__init__(lfclient_host=lfclient_host,\n../lanforge/lanforge-scripts/py-json/realm.py:112: in __init__\n    self.check_connect()\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:363: in check_connect\n    response = self.json_get(\"/\", debug_=self.debug)\n../lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py:276: in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:276: in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n../lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py:248: in get\n    myresponses.append(request.urlopen(myrequest))\n/usr/local/lib/python3.8/urllib/request.py:222: in urlopen\n    return opener.open(url, data, timeout)\n/usr/local/lib/python3.8/urllib/request.py:525: in open\n    response = self._open(req, data)\n/usr/local/lib/python3.8/urllib/request.py:542: in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n/usr/local/lib/python3.8/urllib/request.py:502: in _call_chain\n    result = func(*args)\n/usr/local/lib/python3.8/urllib/request.py:1383: in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n/usr/local/lib/python3.8/urllib/request.py:1358: in do_open\n    r = h.getresponse()\n/usr/local/lib/python3.8/http/client.py:1348: in getresponse\n    response.begin()\n/usr/local/lib/python3.8/http/client.py:316: in begin\n    version, status, reason = self._read_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <http.client.HTTPResponse object at 0x7f0fd076f820>\n\n    def _read_status(self):\n        line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n        if len(line) > _MAXLINE:\n            raise LineTooLong(\"status line\")\n        if self.debuglevel > 0:\n            print(\"reply:\", repr(line))\n        if not line:\n            # Presumably, the server closed the connection before\n            # sending a valid response.\n>           raise RemoteDisconnected(\"Remote end closed connection without\"\n                                     \" response\")\nE           http.client.RemoteDisconnected: Remote end closed connection without response\n\n/usr/local/lib/python3.8/http/client.py:285: RemoteDisconnected",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "station_names_twog",
    "time" : {
      "start" : 1637699899356,
      "stop" : 1637699899356,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration",
    "time" : {
      "start" : 1637699746750,
      "stop" : 1637699746750,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test",
    "time" : {
      "start" : 1637699746751,
      "stop" : 1637699746751,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx",
    "time" : {
      "start" : 1637699746751,
      "stop" : 1637699746751,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_tools",
    "time" : {
      "start" : 1637699746752,
      "stop" : 1637699896319,
      "duration" : 149567
    },
    "status" : "broken",
    "statusMessage" : "http.client.RemoteDisconnected: Remote end closed connection without response\n",
    "statusTrace" : "  File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.8/site-packages/_pytest/fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/wlan-testing/tests/e2e/advanced/conftest.py\", line 32, in lf_tools\n    lf_tools_obj = ChamberView(lanforge_data=get_configuration['traffic_generator']['details'],\n  File \"/wlan-testing/tests/../libs/lanforge/lf_tools.py\", line 110, in __init__\n    self.CreateDut = DUT(lfmgr=self.lanforge_ip,\n  File \"/wlan-testing/tests/../lanforge/lanforge-scripts/py-scripts/create_chamberview_dut.py\", line 91, in __init__\n    self.cv_test = cvtest(lfmgr, port)\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/cv_test_manager.py\", line 91, in __init__\n    super().__init__(lfclient_host=lfclient_host,\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/realm.py\", line 112, in __init__\n    self.check_connect()\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py\", line 363, in check_connect\n    response = self.json_get(\"/\", debug_=self.debug)\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/LANforge/lfcli_base.py\", line 276, in json_get\n    json_response = lf_r.get_as_json(debug_=debug_, die_on_error_=False)\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py\", line 276, in get_as_json\n    j = self.get(debug=debug_, die_on_error_=die_on_error_, method_=method_)\n  File \"/wlan-testing/lanforge/lanforge-scripts/py-json/LANforge/LFRequest.py\", line 248, in get\n    myresponses.append(request.urlopen(myrequest))\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 222, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 525, in open\n    response = self._open(req, data)\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 542, in _open\n    result = self._call_chain(self.handle_open, protocol, protocol +\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 502, in _call_chain\n    result = func(*args)\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 1383, in http_open\n    return self.do_open(http.client.HTTPConnection, req)\n  File \"/usr/local/lib/python3.8/urllib/request.py\", line 1358, in do_open\n    r = h.getresponse()\n  File \"/usr/local/lib/python3.8/http/client.py\", line 1348, in getresponse\n    response.begin()\n  File \"/usr/local/lib/python3.8/http/client.py\", line 316, in begin\n    version, status, reason = self._read_status()\n  File \"/usr/local/lib/python3.8/http/client.py\", line 285, in _read_status\n    raise RemoteDisconnected(\"Remote end closed connection without\"\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  }, {
    "name" : "testbed",
    "time" : {
      "start" : 1637699746750,
      "stop" : 1637699746750,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property",
    "time" : {
      "start" : 1637699746745,
      "stop" : 1637699746746,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "station_names_twog::0",
    "time" : {
      "start" : 1637699946270,
      "stop" : 1637699946270,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "get_configuration::0",
    "time" : {
      "start" : 1637699946271,
      "stop" : 1637699946271,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "lf_test::0",
    "time" : {
      "start" : 1637699946268,
      "stop" : 1637699946268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_influx::0",
    "time" : {
      "start" : 1637699946268,
      "stop" : 1637699946268,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "testbed::0",
    "time" : {
      "start" : 1637699946274,
      "stop" : 1637699946274,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "add_allure_environment_property::0",
    "time" : {
      "start" : 1637699946275,
      "stop" : 1637699946275,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "wpa2_personal"
  }, {
    "name" : "tag",
    "value" : "spatial_consistency"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_profiles')"
  }, {
    "name" : "tag",
    "value" : "advance"
  }, {
    "name" : "tag",
    "value" : "nss2"
  }, {
    "name" : "tag",
    "value" : "bridge"
  }, {
    "name" : "tag",
    "value" : "twog"
  }, {
    "name" : "parentSuite",
    "value" : "e2e.advanced.spatial_consistency.wpa2_personal"
  }, {
    "name" : "suite",
    "value" : "test_bridge_spatial"
  }, {
    "name" : "subSuite",
    "value" : "Test_SpatialConsistency_Bridge"
  }, {
    "name" : "host",
    "value" : "advanced-ci-8-2dgvq"
  }, {
    "name" : "thread",
    "value" : "7-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "e2e.advanced.spatial_consistency.wpa2_personal.test_bridge_spatial"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "setup_profiles",
    "value" : "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}"
  } ],
  "links" : [ {
    "name" : "WIFI-5070",
    "url" : "https://telecominfraproject.atlassian.net/browse/WIFI-5070",
    "type" : "test_case"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('setup_profiles')", "nss2", "wpa2_personal", "bridge", "twog", "spatial_consistency", "advance" ]
  },
  "source" : "4a046be3fc2fae37.json",
  "parameterValues" : [ "{'mode': 'BRIDGE', 'ssid_modes': {'wpa2_personal': [{'ssid_name': 'ssid_wpa2_2g', 'appliedRadios': ['2G'], 'security_key': 'something'}, {'ssid_name': 'ssid_wpa2_5g', 'appliedRadios': ['5G'], 'security_key': 'something'}]}, 'rf': {}, 'radius': False}" ]
}